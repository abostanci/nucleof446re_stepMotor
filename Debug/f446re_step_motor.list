
f446re_step_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008fb0  08008fb0  00009fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093bc  080093bc  0000b1c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080093bc  080093bc  0000a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c4  080093c4  0000b1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093c8  080093c8  0000a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  080093cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200001c0  0800958c  0000b1c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  0800958c  0000b680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015679  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a03  00000000  00000000  00020869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108b  00000000  00000000  000247b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002307b  00000000  00000000  00025843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e30  00000000  00000000  000488be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db533  00000000  00000000  0005d6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006360  00000000  00000000  00138c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0013efc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008f98 	.word	0x08008f98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08008f98 	.word	0x08008f98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f003 fd4e 	bl	8004090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f84e 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f974 	bl	80008e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f948 	bl	8000890 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000600:	f000 f8b6 	bl	8000770 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000604:	f000 f8ea 	bl	80007dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 2);
 8000608:	2102      	movs	r1, #2
 800060a:	2001      	movs	r0, #1
 800060c:	f003 fc88 	bl	8003f20 <BSP_MotorControl_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f003 fb72 	bl	8003cfc <BSP_MotorControl_Init>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 8000618:	2100      	movs	r1, #0
 800061a:	2001      	movs	r0, #1
 800061c:	f003 fb6e 	bl	8003cfc <BSP_MotorControl_Init>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000620:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x8c>)
 8000622:	f003 fb11 	bl	8003c48 <BSP_MotorControl_AttachFlagInterrupt>
  BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 8000626:	4815      	ldr	r0, [pc, #84]	@ (800067c <main+0x90>)
 8000628:	f003 fb2c 	bl	8003c84 <BSP_MotorControl_AttachBusyInterrupt>
  BSP_MotorControl_AttachErrorHandler(MyErrorHandler);
 800062c:	4814      	ldr	r0, [pc, #80]	@ (8000680 <main+0x94>)
 800062e:	f003 faed 	bl	8003c0c <BSP_MotorControl_AttachErrorHandler>
  BSP_MotorControl_CmdResetPos(0);
 8000632:	2000      	movs	r0, #0
 8000634:	f003 fbee 	bl	8003e14 <BSP_MotorControl_CmdResetPos>
  BSP_MotorControl_CmdResetPos(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f003 fbeb 	bl	8003e14 <BSP_MotorControl_CmdResetPos>
  HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4910      	ldr	r1, [pc, #64]	@ (8000684 <main+0x98>)
 8000642:	4811      	ldr	r0, [pc, #68]	@ (8000688 <main+0x9c>)
 8000644:	f006 fb8f 	bl	8006d66 <HAL_UART_Receive_IT>

  UART_SendString("SYSTEM,READY\n");
 8000648:	4810      	ldr	r0, [pc, #64]	@ (800068c <main+0xa0>)
 800064a:	f000 f9dd 	bl	8000a08 <UART_SendString>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (command_ready)
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <main+0xa4>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d004      	beq.n	8000662 <main+0x76>
	      {
	        command_ready = 0;
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <main+0xa4>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	        ParseCommand();
 800065e:	f000 faa1 	bl	8000ba4 <ParseCommand>
	      }

	      // Check motor status
	      SendMotorStatus(0);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fa2c 	bl	8000ac0 <SendMotorStatus>
	      SendMotorStatus(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 fa29 	bl	8000ac0 <SendMotorStatus>

	      HAL_Delay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000672:	f003 fd7f 	bl	8004174 <HAL_Delay>
	  if (command_ready)
 8000676:	e7ea      	b.n	800064e <main+0x62>
 8000678:	08000ec5 	.word	0x08000ec5
 800067c:	08000ed9 	.word	0x08000ed9
 8000680:	08000ee5 	.word	0x08000ee5
 8000684:	200003d4 	.word	0x200003d4
 8000688:	2000027c 	.word	0x2000027c
 800068c:	08008fb0 	.word	0x08008fb0
 8000690:	200003c8 	.word	0x200003c8

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	@ 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fb54 	bl	8007d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a29      	ldr	r2, [pc, #164]	@ (8000768 <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e0:	4a22      	ldr	r2, [pc, #136]	@ (800076c <SystemClock_Config+0xd8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b20      	ldr	r3, [pc, #128]	@ (800076c <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000708:	2310      	movs	r3, #16
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fc22 	bl	8004f6c <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 fc11 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2102      	movs	r1, #2
 800074e:	4618      	mov	r0, r3
 8000750:	f004 f8c2 	bl	80048d8 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 fbfb 	bl	8000f54 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_SPI1_Init+0x64>)
 8000776:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <MX_SPI1_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_SPI1_Init+0x64>)
 8000796:	2201      	movs	r2, #1
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_SPI1_Init+0x64>)
 80007a4:	2218      	movs	r2, #24
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_SPI1_Init+0x64>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_SPI1_Init+0x64>)
 80007c2:	f004 fe71 	bl	80054a8 <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 fbc2 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001dc 	.word	0x200001dc
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_TIM3_Init+0xac>)
 8000800:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_TIM3_Init+0xb0>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_TIM3_Init+0xac>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_TIM3_Init+0xac>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_TIM3_Init+0xac>)
 8000812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_TIM3_Init+0xac>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_TIM3_Init+0xac>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000824:	4818      	ldr	r0, [pc, #96]	@ (8000888 <MX_TIM3_Init+0xac>)
 8000826:	f005 f94d 	bl	8005ac4 <HAL_TIM_PWM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 fb90 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_TIM3_Init+0xac>)
 8000844:	f006 f924 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800084e:	f000 fb81 	bl	8000f54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	@ 0x60
 8000854:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <MX_TIM3_Init+0xac>)
 800086a:	f005 fc3f 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000874:	f000 fb6e 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <MX_TIM3_Init+0xac>)
 800087a:	f002 fe9b 	bl	80035b4 <HAL_TIM_MspPostInit>

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	@ 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000234 	.word	0x20000234
 800088c:	40000400 	.word	0x40000400

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_USART2_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c8:	f006 f972 	bl	8006bb0 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 fb3f 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000027c 	.word	0x2000027c
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b3f      	ldr	r3, [pc, #252]	@ (80009fc <MX_GPIO_Init+0x118>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a3e      	ldr	r2, [pc, #248]	@ (80009fc <MX_GPIO_Init+0x118>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b3c      	ldr	r3, [pc, #240]	@ (80009fc <MX_GPIO_Init+0x118>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b38      	ldr	r3, [pc, #224]	@ (80009fc <MX_GPIO_Init+0x118>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a37      	ldr	r2, [pc, #220]	@ (80009fc <MX_GPIO_Init+0x118>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <MX_GPIO_Init+0x118>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <MX_GPIO_Init+0x118>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a30      	ldr	r2, [pc, #192]	@ (80009fc <MX_GPIO_Init+0x118>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <MX_GPIO_Init+0x118>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STBY_RESET_Pin_GPIO_Port, STBY_RESET_Pin_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000954:	482a      	ldr	r0, [pc, #168]	@ (8000a00 <MX_GPIO_Init+0x11c>)
 8000956:	f003 ff81 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_GPIO_Port, CS_Pin_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	4829      	ldr	r0, [pc, #164]	@ (8000a04 <MX_GPIO_Init+0x120>)
 8000960:	f003 ff7c 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STBY_RESET_Pin_Pin */
  GPIO_InitStruct.Pin = STBY_RESET_Pin_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STBY_RESET_Pin_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4820      	ldr	r0, [pc, #128]	@ (8000a00 <MX_GPIO_Init+0x11c>)
 800097e:	f003 fdc1 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLAG_Pin_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin_Pin;
 8000982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000988:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800098c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FLAG_Pin_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4819      	ldr	r0, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0x11c>)
 800099a:	f003 fdb3 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUSY_Pin_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <MX_GPIO_Init+0x120>)
 80009b4:	f003 fda6 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin_Pin */
  GPIO_InitStruct.Pin = CS_Pin_Pin;
 80009b8:	2340      	movs	r3, #64	@ 0x40
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_Pin_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <MX_GPIO_Init+0x120>)
 80009d0:	f003 fd98 	bl	8004504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2017      	movs	r0, #23
 80009da:	f003 fcca 	bl	8004372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009de:	2017      	movs	r0, #23
 80009e0:	f003 fce3 	bl	80043aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2028      	movs	r0, #40	@ 0x28
 80009ea:	f003 fcc2 	bl	8004372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ee:	2028      	movs	r0, #40	@ 0x28
 80009f0:	f003 fcdb 	bl	80043aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <UART_SendString>:

/* USER CODE BEGIN 4 */
void UART_SendString(const char *str)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fbfd 	bl	8000210 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	2364      	movs	r3, #100	@ 0x64
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <UART_SendString+0x24>)
 8000a20:	f006 f916 	bl	8006c50 <HAL_UART_Transmit>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000027c 	.word	0x2000027c

08000a30 <UART_ReceiveChar>:

void UART_ReceiveChar(uint8_t ch)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  // Check for buffer overflow BEFORE writing
  if (cmd_index >= RX_BUFFER_SIZE - 1)
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a40:	d908      	bls.n	8000a54 <UART_ReceiveChar+0x24>
  {
    // Buffer full - reset and report error
    cmd_index = 0;
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
    SendError(0, "BUFFER_OVERFLOW", "Command too long");
 8000a48:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <UART_ReceiveChar+0x7c>)
 8000a4a:	4919      	ldr	r1, [pc, #100]	@ (8000ab0 <UART_ReceiveChar+0x80>)
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f88b 	bl	8000b68 <SendError>
    return;
 8000a52:	e025      	b.n	8000aa0 <UART_ReceiveChar+0x70>
  }

  if (ch == '\n' || ch == '\r')
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b0a      	cmp	r3, #10
 8000a58:	d002      	beq.n	8000a60 <UART_ReceiveChar+0x30>
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b0d      	cmp	r3, #13
 8000a5e:	d117      	bne.n	8000a90 <UART_ReceiveChar+0x60>
  {
    if (cmd_index > 0)  // Only process if we have data
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00f      	beq.n	8000a88 <UART_ReceiveChar+0x58>
    {
      command_buffer[cmd_index] = '\0';
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <UART_ReceiveChar+0x84>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	54d1      	strb	r1, [r2, r3]
      // Copy to rx_buffer for processing
      memcpy(rx_buffer, command_buffer, cmd_index + 1);
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	461a      	mov	r2, r3
 8000a7a:	490e      	ldr	r1, [pc, #56]	@ (8000ab4 <UART_ReceiveChar+0x84>)
 8000a7c:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <UART_ReceiveChar+0x88>)
 8000a7e:	f007 f9c3 	bl	8007e08 <memcpy>
      command_ready = 1;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <UART_ReceiveChar+0x8c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
    }
    cmd_index = 0;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e007      	b.n	8000aa0 <UART_ReceiveChar+0x70>
  }
  else
  {
    command_buffer[cmd_index++] = ch;
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	4904      	ldr	r1, [pc, #16]	@ (8000aa8 <UART_ReceiveChar+0x78>)
 8000a98:	600a      	str	r2, [r1, #0]
 8000a9a:	4906      	ldr	r1, [pc, #24]	@ (8000ab4 <UART_ReceiveChar+0x84>)
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	54ca      	strb	r2, [r1, r3]
  }
}
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000458 	.word	0x20000458
 8000aac:	08008fc0 	.word	0x08008fc0
 8000ab0:	08008fd4 	.word	0x08008fd4
 8000ab4:	200003d8 	.word	0x200003d8
 8000ab8:	200002c8 	.word	0x200002c8
 8000abc:	200003c8 	.word	0x200003c8

08000ac0 <SendMotorStatus>:

void SendMotorStatus(uint8_t motor_id)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af04      	add	r7, sp, #16
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(motor_id);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 f959 	bl	8003d84 <BSP_MotorControl_CmdGetStatus>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	82bb      	strh	r3, [r7, #20]
  int32_t position = BSP_MotorControl_GetPosition(motor_id);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 f92f 	bl	8003d3c <BSP_MotorControl_GetPosition>
 8000ade:	6138      	str	r0, [r7, #16]

  // Extract status flags
  uint8_t is_moving = ((statusRegister & POWERSTEP01_STATUS_BUSY) == 0) ? 1 : 0;
 8000ae0:	8abb      	ldrh	r3, [r7, #20]
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	73fb      	strb	r3, [r7, #15]
  uint8_t has_error = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	75fb      	strb	r3, [r7, #23]

  // Check for any error conditions
  if (((statusRegister & POWERSTEP01_STATUS_UVLO) == 0) ||
 8000af6:	8abb      	ldrh	r3, [r7, #20]
 8000af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d017      	beq.n	8000b30 <SendMotorStatus+0x70>
      ((statusRegister & POWERSTEP01_STATUS_OCD) == 0) ||
 8000b00:	8abb      	ldrh	r3, [r7, #20]
 8000b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((statusRegister & POWERSTEP01_STATUS_UVLO) == 0) ||
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d012      	beq.n	8000b30 <SendMotorStatus+0x70>
      ((statusRegister & POWERSTEP01_STATUS_STALL_A) == 0) ||
 8000b0a:	8abb      	ldrh	r3, [r7, #20]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
      ((statusRegister & POWERSTEP01_STATUS_OCD) == 0) ||
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00d      	beq.n	8000b30 <SendMotorStatus+0x70>
      ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0) ||
 8000b14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
      ((statusRegister & POWERSTEP01_STATUS_STALL_A) == 0) ||
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	da09      	bge.n	8000b30 <SendMotorStatus+0x70>
      (statusRegister & POWERSTEP01_STATUS_CMD_ERROR) ||
 8000b1c:	8abb      	ldrh	r3, [r7, #20]
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0) ||
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d104      	bne.n	8000b30 <SendMotorStatus+0x70>
      (statusRegister & POWERSTEP01_STATUS_TH_STATUS))
 8000b26:	8abb      	ldrh	r3, [r7, #20]
 8000b28:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
      (statusRegister & POWERSTEP01_STATUS_CMD_ERROR) ||
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SendMotorStatus+0x74>
  {
    has_error = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	75fb      	strb	r3, [r7, #23]
  }

  // Send compact status
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE,
 8000b34:	79f8      	ldrb	r0, [r7, #7]
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	7dfa      	ldrb	r2, [r7, #23]
 8000b3a:	8ab9      	ldrh	r1, [r7, #20]
 8000b3c:	9103      	str	r1, [sp, #12]
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SendMotorStatus+0xa0>)
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <SendMotorStatus+0xa4>)
 8000b4e:	f007 f89b 	bl	8007c88 <sniprintf>
           "STATUS,%d,%ld,%d,%d,0x%04X\n",
           motor_id, position, is_moving, has_error, statusRegister);
  UART_SendString((const char *)tx_buffer);
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <SendMotorStatus+0xa4>)
 8000b54:	f7ff ff58 	bl	8000a08 <UART_SendString>
}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	08008fe4 	.word	0x08008fe4
 8000b64:	20000348 	.word	0x20000348

08000b68 <SendError>:

void SendError(uint8_t motor_id, const char *error_type, const char *description)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	73fb      	strb	r3, [r7, #15]
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "ERROR,%d,%s,%s\n", motor_id, error_type, description);
 8000b76:	7bfa      	ldrb	r2, [r7, #15]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4613      	mov	r3, r2
 8000b82:	4a06      	ldr	r2, [pc, #24]	@ (8000b9c <SendError+0x34>)
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <SendError+0x38>)
 8000b88:	f007 f87e 	bl	8007c88 <sniprintf>
  UART_SendString((const char *)tx_buffer);
 8000b8c:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <SendError+0x38>)
 8000b8e:	f7ff ff3b 	bl	8000a08 <UART_SendString>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08009000 	.word	0x08009000
 8000ba0:	20000348 	.word	0x20000348

08000ba4 <ParseCommand>:

void ParseCommand(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af02      	add	r7, sp, #8
  char *cmd = (char *)rx_buffer;
 8000baa:	4b61      	ldr	r3, [pc, #388]	@ (8000d30 <ParseCommand+0x18c>)
 8000bac:	60fb      	str	r3, [r7, #12]

  // Ignore empty commands
  if (strlen(cmd) == 0)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80b7 	beq.w	8000d26 <ParseCommand+0x182>
  {
    return;
  }

  // Debug: Echo back what was received (safely truncated)
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "DEBUG,RX:[%.20s]\n", cmd);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4a5e      	ldr	r2, [pc, #376]	@ (8000d34 <ParseCommand+0x190>)
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	485e      	ldr	r0, [pc, #376]	@ (8000d38 <ParseCommand+0x194>)
 8000bc0:	f007 f862 	bl	8007c88 <sniprintf>
  UART_SendString((const char *)tx_buffer);
 8000bc4:	485c      	ldr	r0, [pc, #368]	@ (8000d38 <ParseCommand+0x194>)
 8000bc6:	f7ff ff1f 	bl	8000a08 <UART_SendString>

  if (strncmp(cmd, "MOVE", 4) == 0)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	495b      	ldr	r1, [pc, #364]	@ (8000d3c <ParseCommand+0x198>)
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f007 f8c6 	bl	8007d60 <strncmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d142      	bne.n	8000c60 <ParseCommand+0xbc>
  {
    int32_t motor0_steps, motor1_steps;
    if (sscanf(cmd, "MOVE,%ld,%ld", &motor0_steps, &motor1_steps) == 2)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	f107 0208 	add.w	r2, r7, #8
 8000be0:	4957      	ldr	r1, [pc, #348]	@ (8000d40 <ParseCommand+0x19c>)
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f007 f886 	bl	8007cf4 <siscanf>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d132      	bne.n	8000c54 <ParseCommand+0xb0>
    {
      // Validate step values
      if (motor0_steps < MIN_MOTOR_STEPS || motor0_steps > MAX_MOTOR_STEPS ||
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	4a54      	ldr	r2, [pc, #336]	@ (8000d44 <ParseCommand+0x1a0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	db0d      	blt.n	8000c12 <ParseCommand+0x6e>
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	dc08      	bgt.n	8000c12 <ParseCommand+0x6e>
          motor1_steps < MIN_MOTOR_STEPS || motor1_steps > MAX_MOTOR_STEPS)
 8000c00:	687b      	ldr	r3, [r7, #4]
      if (motor0_steps < MIN_MOTOR_STEPS || motor0_steps > MAX_MOTOR_STEPS ||
 8000c02:	4a50      	ldr	r2, [pc, #320]	@ (8000d44 <ParseCommand+0x1a0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	db04      	blt.n	8000c12 <ParseCommand+0x6e>
          motor1_steps < MIN_MOTOR_STEPS || motor1_steps > MAX_MOTOR_STEPS)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	dd05      	ble.n	8000c1e <ParseCommand+0x7a>
      {
        SendError(0, "RANGE_ERROR", "Step value out of range");
 8000c12:	4a4d      	ldr	r2, [pc, #308]	@ (8000d48 <ParseCommand+0x1a4>)
 8000c14:	494d      	ldr	r1, [pc, #308]	@ (8000d4c <ParseCommand+0x1a8>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffa6 	bl	8000b68 <SendError>
 8000c1c:	e084      	b.n	8000d28 <ParseCommand+0x184>
        return;
      }

      // Queue both motors
      motor0_target = motor0_steps;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	4a4b      	ldr	r2, [pc, #300]	@ (8000d50 <ParseCommand+0x1ac>)
 8000c22:	6013      	str	r3, [r2, #0]
      motor1_target = motor1_steps;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4b      	ldr	r2, [pc, #300]	@ (8000d54 <ParseCommand+0x1b0>)
 8000c28:	6013      	str	r3, [r2, #0]
      MoveMotorsToPosition(motor0_target, motor1_target);
 8000c2a:	4b49      	ldr	r3, [pc, #292]	@ (8000d50 <ParseCommand+0x1ac>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a49      	ldr	r2, [pc, #292]	@ (8000d54 <ParseCommand+0x1b0>)
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f8a9 	bl	8000d8c <MoveMotorsToPosition>

      // Send confirmation with actual values
      snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "OK,MOVE,%ld,%ld\n",
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	4613      	mov	r3, r2
 8000c42:	4a45      	ldr	r2, [pc, #276]	@ (8000d58 <ParseCommand+0x1b4>)
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	483c      	ldr	r0, [pc, #240]	@ (8000d38 <ParseCommand+0x194>)
 8000c48:	f007 f81e 	bl	8007c88 <sniprintf>
               motor0_steps, motor1_steps);
      UART_SendString((const char *)tx_buffer);
 8000c4c:	483a      	ldr	r0, [pc, #232]	@ (8000d38 <ParseCommand+0x194>)
 8000c4e:	f7ff fedb 	bl	8000a08 <UART_SendString>
 8000c52:	e069      	b.n	8000d28 <ParseCommand+0x184>
    }
    else
    {
      SendError(0, "PARSE_ERROR", "Invalid MOVE format");
 8000c54:	4a41      	ldr	r2, [pc, #260]	@ (8000d5c <ParseCommand+0x1b8>)
 8000c56:	4942      	ldr	r1, [pc, #264]	@ (8000d60 <ParseCommand+0x1bc>)
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff ff85 	bl	8000b68 <SendError>
 8000c5e:	e063      	b.n	8000d28 <ParseCommand+0x184>
    }
  }
  else if (strncmp(cmd, "STOP", 4) == 0)
 8000c60:	2204      	movs	r2, #4
 8000c62:	4940      	ldr	r1, [pc, #256]	@ (8000d64 <ParseCommand+0x1c0>)
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f007 f87b 	bl	8007d60 <strncmp>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d109      	bne.n	8000c84 <ParseCommand+0xe0>
  {
    UART_SendString("OK,STOPPING\n");
 8000c70:	483d      	ldr	r0, [pc, #244]	@ (8000d68 <ParseCommand+0x1c4>)
 8000c72:	f7ff fec9 	bl	8000a08 <UART_SendString>
    BSP_MotorControl_CmdSoftStop(0);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f003 f930 	bl	8003edc <BSP_MotorControl_CmdSoftStop>
    BSP_MotorControl_CmdSoftStop(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f003 f92d 	bl	8003edc <BSP_MotorControl_CmdSoftStop>
 8000c82:	e051      	b.n	8000d28 <ParseCommand+0x184>
  }
  else if (strncmp(cmd, "HOME", 4) == 0)
 8000c84:	2204      	movs	r2, #4
 8000c86:	4939      	ldr	r1, [pc, #228]	@ (8000d6c <ParseCommand+0x1c8>)
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f007 f869 	bl	8007d60 <strncmp>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d107      	bne.n	8000ca4 <ParseCommand+0x100>
  {
    // Move to position 0,0
    MoveMotorsToPosition(0, 0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f878 	bl	8000d8c <MoveMotorsToPosition>
    UART_SendString("OK,HOMING\n");
 8000c9c:	4834      	ldr	r0, [pc, #208]	@ (8000d70 <ParseCommand+0x1cc>)
 8000c9e:	f7ff feb3 	bl	8000a08 <UART_SendString>
 8000ca2:	e041      	b.n	8000d28 <ParseCommand+0x184>
  }
  else if (strncmp(cmd, "STATUS", 6) == 0)
 8000ca4:	2206      	movs	r2, #6
 8000ca6:	4933      	ldr	r1, [pc, #204]	@ (8000d74 <ParseCommand+0x1d0>)
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f007 f859 	bl	8007d60 <strncmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d116      	bne.n	8000ce2 <ParseCommand+0x13e>
  {
    // Check for CLEAR flag
    if (strstr(cmd, "CLEAR") != NULL)
 8000cb4:	4930      	ldr	r1, [pc, #192]	@ (8000d78 <ParseCommand+0x1d4>)
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f007 f864 	bl	8007d84 <strstr>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <ParseCommand+0x130>
    {
      BSP_MotorControl_CmdGetStatus(0); // Clear error flags
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f003 f85e 	bl	8003d84 <BSP_MotorControl_CmdGetStatus>
      BSP_MotorControl_CmdGetStatus(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f003 f85b 	bl	8003d84 <BSP_MotorControl_CmdGetStatus>
      UART_SendString("OK,STATUS_CLEARED\n");
 8000cce:	482b      	ldr	r0, [pc, #172]	@ (8000d7c <ParseCommand+0x1d8>)
 8000cd0:	f7ff fe9a 	bl	8000a08 <UART_SendString>
    }
    SendMotorStatus(0);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fef3 	bl	8000ac0 <SendMotorStatus>
    SendMotorStatus(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff fef0 	bl	8000ac0 <SendMotorStatus>
 8000ce0:	e022      	b.n	8000d28 <ParseCommand+0x184>
  }
  else if (strncmp(cmd, "RESET", 5) == 0)
 8000ce2:	2205      	movs	r2, #5
 8000ce4:	4926      	ldr	r1, [pc, #152]	@ (8000d80 <ParseCommand+0x1dc>)
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f007 f83a 	bl	8007d60 <strncmp>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10f      	bne.n	8000d12 <ParseCommand+0x16e>
  {
    BSP_MotorControl_CmdGetStatus(0); // Clear error flags
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f003 f846 	bl	8003d84 <BSP_MotorControl_CmdGetStatus>
    BSP_MotorControl_CmdGetStatus(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f003 f843 	bl	8003d84 <BSP_MotorControl_CmdGetStatus>
    BSP_MotorControl_CmdResetPos(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f003 f888 	bl	8003e14 <BSP_MotorControl_CmdResetPos>
    BSP_MotorControl_CmdResetPos(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f003 f885 	bl	8003e14 <BSP_MotorControl_CmdResetPos>
    UART_SendString("OK,RESET_COMPLETE\n");
 8000d0a:	481e      	ldr	r0, [pc, #120]	@ (8000d84 <ParseCommand+0x1e0>)
 8000d0c:	f7ff fe7c 	bl	8000a08 <UART_SendString>
 8000d10:	e00a      	b.n	8000d28 <ParseCommand+0x184>
  }
  else
  {
    // Safely truncate unknown command in error message
    snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "ERROR,UNKNOWN,%.20s\n", cmd);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <ParseCommand+0x1e4>)
 8000d16:	2180      	movs	r1, #128	@ 0x80
 8000d18:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <ParseCommand+0x194>)
 8000d1a:	f006 ffb5 	bl	8007c88 <sniprintf>
    UART_SendString((const char *)tx_buffer);
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <ParseCommand+0x194>)
 8000d20:	f7ff fe72 	bl	8000a08 <UART_SendString>
 8000d24:	e000      	b.n	8000d28 <ParseCommand+0x184>
    return;
 8000d26:	bf00      	nop
  }
}
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200002c8 	.word	0x200002c8
 8000d34:	08009010 	.word	0x08009010
 8000d38:	20000348 	.word	0x20000348
 8000d3c:	08009024 	.word	0x08009024
 8000d40:	0800902c 	.word	0x0800902c
 8000d44:	ffffd8f0 	.word	0xffffd8f0
 8000d48:	0800903c 	.word	0x0800903c
 8000d4c:	08009054 	.word	0x08009054
 8000d50:	200003cc 	.word	0x200003cc
 8000d54:	200003d0 	.word	0x200003d0
 8000d58:	08009060 	.word	0x08009060
 8000d5c:	08009074 	.word	0x08009074
 8000d60:	08009088 	.word	0x08009088
 8000d64:	08009094 	.word	0x08009094
 8000d68:	0800909c 	.word	0x0800909c
 8000d6c:	080090ac 	.word	0x080090ac
 8000d70:	080090b4 	.word	0x080090b4
 8000d74:	080090c0 	.word	0x080090c0
 8000d78:	080090c8 	.word	0x080090c8
 8000d7c:	080090d0 	.word	0x080090d0
 8000d80:	080090e4 	.word	0x080090e4
 8000d84:	080090ec 	.word	0x080090ec
 8000d88:	08009100 	.word	0x08009100

08000d8c <MoveMotorsToPosition>:

void MoveMotorsToPosition(int32_t motor0_pos, int32_t motor1_pos)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	BSP_MotorControl_QueueCommands(0,POWERSTEP01_GO_TO, motor0_pos);
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	2160      	movs	r1, #96	@ 0x60
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f003 f878 	bl	8003e90 <BSP_MotorControl_QueueCommands>
	BSP_MotorControl_QueueCommands(1,POWERSTEP01_GO_TO, motor1_pos);
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	2160      	movs	r1, #96	@ 0x60
 8000da4:	2001      	movs	r0, #1
 8000da6:	f003 f873 	bl	8003e90 <BSP_MotorControl_QueueCommands>
	BSP_MotorControl_SendQueuedCommands();
 8000daa:	f003 f855 	bl	8003e58 <BSP_MotorControl_SendQueuedCommands>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <CheckMotorErrors>:

void CheckMotorErrors(uint8_t motor_id)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(motor_id);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 ffdd 	bl	8003d84 <BSP_MotorControl_CmdGetStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	81fb      	strh	r3, [r7, #14]

  if ((statusRegister & POWERSTEP01_STATUS_HIZ) == POWERSTEP01_STATUS_HIZ)
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <CheckMotorErrors+0x2c>
  {
    SendError(motor_id, "HIZ_STATE", "Power bridges disabled");
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a2a      	ldr	r2, [pc, #168]	@ (8000e84 <CheckMotorErrors+0xcc>)
 8000ddc:	492a      	ldr	r1, [pc, #168]	@ (8000e88 <CheckMotorErrors+0xd0>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fec2 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_CMD_ERROR) == POWERSTEP01_STATUS_CMD_ERROR)
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <CheckMotorErrors+0x42>
  {
    SendError(motor_id, "CMD_ERROR", "Command could not be performed");
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <CheckMotorErrors+0xd4>)
 8000df2:	4927      	ldr	r1, [pc, #156]	@ (8000e90 <CheckMotorErrors+0xd8>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff feb7 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_UVLO) == 0)
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <CheckMotorErrors+0x58>
  {
    SendError(motor_id, "UVLO", "Undervoltage lock-out");
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4a23      	ldr	r2, [pc, #140]	@ (8000e94 <CheckMotorErrors+0xdc>)
 8000e08:	4923      	ldr	r1, [pc, #140]	@ (8000e98 <CheckMotorErrors+0xe0>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff feac 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_UVLO_ADC) == 0)
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <CheckMotorErrors+0x6e>
  {
    SendError(motor_id, "UVLO_ADC", "ADC undervoltage lock-out");
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e9c <CheckMotorErrors+0xe4>)
 8000e1e:	4920      	ldr	r1, [pc, #128]	@ (8000ea0 <CheckMotorErrors+0xe8>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fea1 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_TH_STATUS) != 0)
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <CheckMotorErrors+0x84>
  {
    SendError(motor_id, "THERMAL", "Thermal warning or shutdown");
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <CheckMotorErrors+0xec>)
 8000e34:	491c      	ldr	r1, [pc, #112]	@ (8000ea8 <CheckMotorErrors+0xf0>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fe96 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_OCD) == 0)
 8000e3c:	89fb      	ldrh	r3, [r7, #14]
 8000e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <CheckMotorErrors+0x9a>
  {
    SendError(motor_id, "OCD", "Overcurrent detection");
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <CheckMotorErrors+0xf4>)
 8000e4a:	4919      	ldr	r1, [pc, #100]	@ (8000eb0 <CheckMotorErrors+0xf8>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe8b 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_STALL_A) == 0)
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d105      	bne.n	8000e68 <CheckMotorErrors+0xb0>
  {
    SendError(motor_id, "STALL_A", "Stall on bridge A");
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <CheckMotorErrors+0xfc>)
 8000e60:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <CheckMotorErrors+0x100>)
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe80 	bl	8000b68 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
 8000e68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db05      	blt.n	8000e7c <CheckMotorErrors+0xc4>
  {
    SendError(motor_id, "STALL_B", "Stall on bridge B");
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <CheckMotorErrors+0x104>)
 8000e74:	4912      	ldr	r1, [pc, #72]	@ (8000ec0 <CheckMotorErrors+0x108>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe76 	bl	8000b68 <SendError>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	08009118 	.word	0x08009118
 8000e88:	08009130 	.word	0x08009130
 8000e8c:	0800913c 	.word	0x0800913c
 8000e90:	0800915c 	.word	0x0800915c
 8000e94:	08009168 	.word	0x08009168
 8000e98:	08009180 	.word	0x08009180
 8000e9c:	08009188 	.word	0x08009188
 8000ea0:	080091a4 	.word	0x080091a4
 8000ea4:	080091b0 	.word	0x080091b0
 8000ea8:	080091cc 	.word	0x080091cc
 8000eac:	080091d4 	.word	0x080091d4
 8000eb0:	080091ec 	.word	0x080091ec
 8000eb4:	080091f0 	.word	0x080091f0
 8000eb8:	08009204 	.word	0x08009204
 8000ebc:	0800920c 	.word	0x0800920c
 8000ec0:	08009220 	.word	0x08009220

08000ec4 <MyFlagInterruptHandler>:

void MyFlagInterruptHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  // Check errors for both motors
  CheckMotorErrors(0);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff ff75 	bl	8000db8 <CheckMotorErrors>
  CheckMotorErrors(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ff72 	bl	8000db8 <CheckMotorErrors>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <MyBusyInterruptHandler>:

void MyBusyInterruptHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
   if (BSP_MotorControl_CheckBusyHw())
 8000edc:	f002 ff78 	bl	8003dd0 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {

   }
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <MyErrorHandler>:

void MyErrorHandler(uint16_t error)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
  gLastError = error;
 8000eee:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <MyErrorHandler+0x28>)
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	8013      	strh	r3, [r2, #0]
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "ERROR,0,SYSTEM_ERROR,0x%04X\n", error);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <MyErrorHandler+0x2c>)
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <MyErrorHandler+0x30>)
 8000efc:	f006 fec4 	bl	8007c88 <sniprintf>
  UART_SendString((const char *)tx_buffer);
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MyErrorHandler+0x30>)
 8000f02:	f7ff fd81 	bl	8000a08 <UART_SendString>

  while(1)
 8000f06:	bf00      	nop
 8000f08:	e7fd      	b.n	8000f06 <MyErrorHandler+0x22>
 8000f0a:	bf00      	nop
 8000f0c:	200002c4 	.word	0x200002c4
 8000f10:	08009228 	.word	0x08009228
 8000f14:	20000348 	.word	0x20000348

08000f18 <HAL_UART_RxCpltCallback>:
  {
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_UART_RxCpltCallback+0x30>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d109      	bne.n	8000f3e <HAL_UART_RxCpltCallback+0x26>
  {
    UART_ReceiveChar(uart_rx_byte);
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <HAL_UART_RxCpltCallback+0x34>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fd7e 	bl	8000a30 <UART_ReceiveChar>
    // Re-enable interrupt for next byte
    HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	4905      	ldr	r1, [pc, #20]	@ (8000f4c <HAL_UART_RxCpltCallback+0x34>)
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_UART_RxCpltCallback+0x38>)
 8000f3a:	f005 ff14 	bl	8006d66 <HAL_UART_Receive_IT>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	200003d4 	.word	0x200003d4
 8000f50:	2000027c 	.word	0x2000027c

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <Powerstep01_AttachErrorHandler+0x1c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000464 	.word	0x20000464

08000f80 <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <Powerstep01_AttachFlagInterrupt+0x1c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000460 	.word	0x20000460

08000fa0 <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8000fa8:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <Powerstep01_AttachBusyInterrupt+0x1c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2000045c 	.word	0x2000045c

08000fc0 <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <Powerstep01_ReadId+0x14>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000486 	.word	0x20000486

08000fd8 <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <Powerstep01_Init+0x84>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fc26 	bl	8003838 <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 8000fec:	f002 fd4c 	bl	8003a88 <Powerstep01_Board_SpiInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8000ff6:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8000ffa:	f001 f927 	bl	800224c <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8000ffe:	f002 fcb1 	bl	8003964 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <Powerstep01_Init+0x84>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fd19 	bl	8003a40 <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f002 fbf4 	bl	80037fc <Powerstep01_Board_Delay>

  if (pInit == 0)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <Powerstep01_Init+0x84>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fa07 	bl	8002434 <Powerstep01_SetRegisterToPredefinedValues>
 8001026:	e006      	b.n	8001036 <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <Powerstep01_Init+0x84>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fda7 	bl	8002b84 <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <Powerstep01_Init+0x84>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fa0c 	bl	800145a <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8001042:	f000 fba1 	bl	8001788 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <Powerstep01_Init+0x84>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b03      	ldr	r3, [pc, #12]	@ (800105c <Powerstep01_Init+0x84>)
 8001050:	801a      	strh	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000486 	.word	0x20000486

08001060 <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8001064:	f002 fd82 	bl	8003b6c <Powerstep01_Board_BUSY_PIN_GetState>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 8001072:	2300      	movs	r3, #0
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	bd80      	pop	{r7, pc}

08001078 <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 800107c:	f002 fd82 	bl	8003b84 <Powerstep01_Board_FLAG_PIN_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 800108a:	2300      	movs	r3, #0
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 80010a0:	4b6a      	ldr	r3, [pc, #424]	@ (800124c <Powerstep01_CmdGetParam+0x1bc>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f080 80c9 	bcs.w	8001240 <Powerstep01_CmdGetParam+0x1b0>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80010b2:	4b66      	ldr	r3, [pc, #408]	@ (800124c <Powerstep01_CmdGetParam+0x1bc>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3b01      	subs	r3, #1
 80010c0:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80010c6:	4b62      	ldr	r3, [pc, #392]	@ (8001250 <Powerstep01_CmdGetParam+0x1c0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80010d2:	f002 fba7 	bl	8003824 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e030      	b.n	8001142 <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80010e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4413      	add	r3, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80010ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4413      	add	r3, r2
 80010f0:	3303      	adds	r3, #3
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80010f6:	4a57      	ldr	r2, [pc, #348]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4413      	add	r3, r2
 80010fc:	3306      	adds	r3, #6
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001102:	4a54      	ldr	r2, [pc, #336]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4413      	add	r3, r2
 8001108:	3309      	adds	r3, #9
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 800110e:	4a52      	ldr	r2, [pc, #328]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4413      	add	r3, r2
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 8001118:	4a4f      	ldr	r2, [pc, #316]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4413      	add	r3, r2
 800111e:	3303      	adds	r3, #3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8001124:	4a4c      	ldr	r2, [pc, #304]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4413      	add	r3, r2
 800112a:	3306      	adds	r3, #6
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 8001130:	4a49      	ldr	r2, [pc, #292]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	3309      	adds	r3, #9
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3301      	adds	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b42      	ldr	r3, [pc, #264]	@ (800124c <Powerstep01_CmdGetParam+0x1bc>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4293      	cmp	r3, r2
 800114e:	d3c7      	bcc.n	80010e0 <Powerstep01_CmdGetParam+0x50>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b1b      	cmp	r3, #27
 8001154:	bf8c      	ite	hi
 8001156:	2301      	movhi	r3, #1
 8001158:	2300      	movls	r3, #0
 800115a:	b2db      	uxtb	r3, r3
      }
      switch (param)
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12c      	bne.n	80011ba <Powerstep01_CmdGetParam+0x12a>
 8001160:	2201      	movs	r2, #1
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	409a      	lsls	r2, r3
 8001166:	4b3d      	ldr	r3, [pc, #244]	@ (800125c <Powerstep01_CmdGetParam+0x1cc>)
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	bf14      	ite	ne
 800116e:	2301      	movne	r3, #1
 8001170:	2300      	moveq	r3, #0
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d113      	bne.n	80011a0 <Powerstep01_CmdGetParam+0x110>
 8001178:	f002 031a 	and.w	r3, r2, #26
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf14      	ite	ne
 8001180:	2301      	movne	r3, #1
 8001182:	2300      	moveq	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d017      	beq.n	80011ba <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	f042 0220 	orr.w	r2, r2, #32
 8001194:	b2d1      	uxtb	r1, r2
 8001196:	4a2f      	ldr	r2, [pc, #188]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 8001198:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 800119a:	2303      	movs	r3, #3
 800119c:	73fb      	strb	r3, [r7, #15]
          break;
 800119e:	e018      	b.n	80011d2 <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	b2d1      	uxtb	r1, r2
 80011ac:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 80011ae:	4413      	add	r3, r2
 80011b0:	460a      	mov	r2, r1
 80011b2:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	73fb      	strb	r3, [r7, #15]
          break;
 80011b8:	e00b      	b.n	80011d2 <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	f042 0220 	orr.w	r2, r2, #32
 80011c4:	b2d1      	uxtb	r1, r2
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 80011c8:	4413      	add	r3, r2
 80011ca:	460a      	mov	r2, r1
 80011cc:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80011d2:	f002 fb1e 	bl	8003812 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <Powerstep01_CmdGetParam+0x1c0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f47f af70 	bne.w	80010c6 <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f1c3 0303 	rsb	r3, r3, #3
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	e011      	b.n	8001214 <Powerstep01_CmdGetParam+0x184>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <Powerstep01_CmdGetParam+0x1c4>)
 80011fa:	1898      	adds	r0, r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 8001206:	4413      	add	r3, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f001 feb7 	bl	8002f7c <Powerstep01_WriteBytes>
         loop++)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d9ea      	bls.n	80011f0 <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800121a:	7b7b      	ldrb	r3, [r7, #13]
 800121c:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 800121e:	4413      	add	r3, r2
 8001220:	78db      	ldrb	r3, [r3, #3]
 8001222:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 8001224:	7b7b      	ldrb	r3, [r7, #13]
 8001226:	490c      	ldr	r1, [pc, #48]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 8001228:	440b      	add	r3, r1
 800122a:	799b      	ldrb	r3, [r3, #6]
 800122c:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800122e:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 8001230:	7b7a      	ldrb	r2, [r7, #13]
 8001232:	4909      	ldr	r1, [pc, #36]	@ (8001258 <Powerstep01_CmdGetParam+0x1c8>)
 8001234:	440a      	add	r2, r1
 8001236:	7a52      	ldrb	r2, [r2, #9]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 800123c:	f002 faf2 	bl	8003824 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 8001240:	697b      	ldr	r3, [r7, #20]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000468 	.word	0x20000468
 8001250:	20000484 	.word	0x20000484
 8001254:	2000046c 	.word	0x2000046c
 8001258:	20000478 	.word	0x20000478
 800125c:	0d2021e4 	.word	0x0d2021e4

08001260 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 800126e:	4b48      	ldr	r3, [pc, #288]	@ (8001390 <Powerstep01_CmdGetStatus+0x130>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	429a      	cmp	r2, r3
 8001278:	f080 8085 	bcs.w	8001386 <Powerstep01_CmdGetStatus+0x126>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800127c:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <Powerstep01_CmdGetStatus+0x130>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3b01      	subs	r3, #1
 800128a:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 8001290:	4b40      	ldr	r3, [pc, #256]	@ (8001394 <Powerstep01_CmdGetStatus+0x134>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <Powerstep01_CmdGetStatus+0x44>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800129c:	f002 fac2 	bl	8003824 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	e030      	b.n	800130c <Powerstep01_CmdGetStatus+0xac>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80012aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <Powerstep01_CmdGetStatus+0x138>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80012b4:	4a38      	ldr	r2, [pc, #224]	@ (8001398 <Powerstep01_CmdGetStatus+0x138>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4413      	add	r3, r2
 80012ba:	3303      	adds	r3, #3
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80012c0:	4a35      	ldr	r2, [pc, #212]	@ (8001398 <Powerstep01_CmdGetStatus+0x138>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4413      	add	r3, r2
 80012c6:	3306      	adds	r3, #6
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80012cc:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <Powerstep01_CmdGetStatus+0x138>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4413      	add	r3, r2
 80012d2:	3309      	adds	r3, #9
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 80012d8:	4a30      	ldr	r2, [pc, #192]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4413      	add	r3, r2
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 80012e2:	4a2e      	ldr	r2, [pc, #184]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4413      	add	r3, r2
 80012e8:	3303      	adds	r3, #3
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 80012ee:	4a2b      	ldr	r2, [pc, #172]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4413      	add	r3, r2
 80012f4:	3306      	adds	r3, #6
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 80012fa:	4a28      	ldr	r2, [pc, #160]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4413      	add	r3, r2
 8001300:	3309      	adds	r3, #9
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <Powerstep01_CmdGetStatus+0x130>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4293      	cmp	r3, r2
 8001318:	d3c7      	bcc.n	80012aa <Powerstep01_CmdGetStatus+0x4a>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <Powerstep01_CmdGetStatus+0x138>)
 800131e:	21d0      	movs	r1, #208	@ 0xd0
 8001320:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001322:	f002 fa76 	bl	8003812 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <Powerstep01_CmdGetStatus+0x134>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ad      	bne.n	8001290 <Powerstep01_CmdGetStatus+0x30>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	e011      	b.n	800135e <Powerstep01_CmdGetStatus+0xfe>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <Powerstep01_CmdGetStatus+0x138>)
 8001344:	1898      	adds	r0, r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	4a13      	ldr	r2, [pc, #76]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 8001350:	4413      	add	r3, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f001 fe12 	bl	8002f7c <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	3301      	adds	r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d9ea      	bls.n	800133a <Powerstep01_CmdGetStatus+0xda>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 8001368:	4413      	add	r3, r2
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	b21b      	sxth	r3, r3
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	4909      	ldr	r1, [pc, #36]	@ (800139c <Powerstep01_CmdGetStatus+0x13c>)
 8001376:	440b      	add	r3, r1
 8001378:	799b      	ldrb	r3, [r3, #6]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 8001382:	f002 fa4f 	bl	8003824 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 8001386:	8afb      	ldrh	r3, [r7, #22]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000468 	.word	0x20000468
 8001394:	20000484 	.word	0x20000484
 8001398:	2000046c 	.word	0x2000046c
 800139c:	20000478 	.word	0x20000478

080013a0 <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2200      	movs	r2, #0
 80013ae:	2170      	movs	r1, #112	@ 0x70
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 ff77 	bl	80022a4 <Powerstep01_SendCommand>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2200      	movs	r2, #0
 80013cc:	2178      	movs	r1, #120	@ 0x78
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 ff68 	bl	80022a4 <Powerstep01_SendCommand>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2160      	movs	r1, #96	@ 0x60
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 ff58 	bl	80022a4 <Powerstep01_SendCommand>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001412:	b2d9      	uxtb	r1, r3
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 ff43 	bl	80022a4 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	460b      	mov	r3, r1
 8001434:	71bb      	strb	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 800143a:	79ba      	ldrb	r2, [r7, #6]
 800143c:	797b      	ldrb	r3, [r7, #5]
 800143e:	4313      	orrs	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 ff29 	bl	80022a4 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2200      	movs	r2, #0
 8001468:	21a8      	movs	r1, #168	@ 0xa8
 800146a:	4618      	mov	r0, r3
 800146c:	f000 ff1a 	bl	80022a4 <Powerstep01_SendCommand>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2200      	movs	r2, #0
 8001486:	21b8      	movs	r1, #184	@ 0xb8
 8001488:	4618      	mov	r0, r3
 800148a:	f000 ff0b 	bl	80022a4 <Powerstep01_SendCommand>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	603a      	str	r2, [r7, #0]
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	460b      	mov	r3, r1
 80014a4:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 80014a6:	79bb      	ldrb	r3, [r7, #6]
 80014a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ac:	b2d9      	uxtb	r1, r3
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fef6 	bl	80022a4 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fee7 	bl	80022a4 <Powerstep01_SendCommand>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	460b      	mov	r3, r1
 80014ea:	71bb      	strb	r3, [r7, #6]
 80014ec:	4613      	mov	r3, r2
 80014ee:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 80014f0:	79ba      	ldrb	r2, [r7, #6]
 80014f2:	797b      	ldrb	r3, [r7, #5]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 80014fc:	b2d9      	uxtb	r1, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2200      	movs	r2, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fece 	bl	80022a4 <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2200      	movs	r2, #0
 800151e:	21c0      	movs	r1, #192	@ 0xc0
 8001520:	4618      	mov	r0, r3
 8001522:	f000 febf 	bl	80022a4 <Powerstep01_SendCommand>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2200      	movs	r2, #0
 800153c:	21d8      	movs	r1, #216	@ 0xd8
 800153e:	4618      	mov	r0, r3
 8001540:	f000 feb0 	bl	80022a4 <Powerstep01_SendCommand>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	603a      	str	r2, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	460b      	mov	r3, r1
 800155a:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001562:	b2d9      	uxtb	r1, r3
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fe9b 	bl	80022a4 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 8001586:	4b61      	ldr	r3, [pc, #388]	@ (800170c <Powerstep01_CmdSetParam+0x194>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	429a      	cmp	r2, r3
 8001590:	f080 80b7 	bcs.w	8001702 <Powerstep01_CmdSetParam+0x18a>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001598:	4b5c      	ldr	r3, [pc, #368]	@ (800170c <Powerstep01_CmdSetParam+0x194>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80015ac:	4b58      	ldr	r3, [pc, #352]	@ (8001710 <Powerstep01_CmdSetParam+0x198>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80015b2:	7cbb      	ldrb	r3, [r7, #18]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80015b8:	f002 f934 	bl	8003824 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80015bc:	2300      	movs	r3, #0
 80015be:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e019      	b.n	80015fa <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80015c6:	4a53      	ldr	r2, [pc, #332]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	4413      	add	r3, r2
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80015d0:	4a50      	ldr	r2, [pc, #320]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4413      	add	r3, r2
 80015d6:	3303      	adds	r3, #3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80015dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4413      	add	r3, r2
 80015e2:	3306      	adds	r3, #6
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80015e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	4413      	add	r3, r2
 80015ee:	3309      	adds	r3, #9
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <Powerstep01_CmdSetParam+0x194>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	4293      	cmp	r3, r2
 8001606:	d3de      	bcc.n	80015c6 <Powerstep01_CmdSetParam+0x4e>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b1a      	cmp	r3, #26
 800160c:	bf8c      	ite	hi
 800160e:	2301      	movhi	r3, #1
 8001610:	2300      	movls	r3, #0
 8001612:	b2db      	uxtb	r3, r3
      }
      switch (param)
 8001614:	2b00      	cmp	r3, #0
 8001616:	d13e      	bne.n	8001696 <Powerstep01_CmdSetParam+0x11e>
 8001618:	2201      	movs	r2, #1
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	409a      	lsls	r2, r3
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <Powerstep01_CmdSetParam+0x1a0>)
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d120      	bne.n	8001672 <Powerstep01_CmdSetParam+0xfa>
 8001630:	f002 030a 	and.w	r3, r2, #10
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d029      	beq.n	8001696 <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001642:	7c7b      	ldrb	r3, [r7, #17]
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	b2d1      	uxtb	r1, r2
 8001648:	4a32      	ldr	r2, [pc, #200]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 800164a:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	0c1a      	lsrs	r2, r3, #16
 8001650:	7c7b      	ldrb	r3, [r7, #17]
 8001652:	b2d1      	uxtb	r1, r2
 8001654:	4a2f      	ldr	r2, [pc, #188]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 8001656:	4413      	add	r3, r2
 8001658:	460a      	mov	r2, r1
 800165a:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0a1a      	lsrs	r2, r3, #8
 8001660:	7c7b      	ldrb	r3, [r7, #17]
 8001662:	b2d1      	uxtb	r1, r2
 8001664:	4a2b      	ldr	r2, [pc, #172]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 8001666:	4413      	add	r3, r2
 8001668:	460a      	mov	r2, r1
 800166a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 3;
 800166c:	2303      	movs	r3, #3
 800166e:	74fb      	strb	r3, [r7, #19]
          break;
 8001670:	e01a      	b.n	80016a8 <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001672:	7c7b      	ldrb	r3, [r7, #17]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	b2d1      	uxtb	r1, r2
 8001678:	4a26      	ldr	r2, [pc, #152]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 800167a:	4413      	add	r3, r2
 800167c:	460a      	mov	r2, r1
 800167e:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0a1a      	lsrs	r2, r3, #8
 8001684:	7c7b      	ldrb	r3, [r7, #17]
 8001686:	b2d1      	uxtb	r1, r2
 8001688:	4a22      	ldr	r2, [pc, #136]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 800168a:	4413      	add	r3, r2
 800168c:	460a      	mov	r2, r1
 800168e:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 2;
 8001690:	2302      	movs	r3, #2
 8001692:	74fb      	strb	r3, [r7, #19]
          break;
 8001694:	e008      	b.n	80016a8 <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001696:	7c7b      	ldrb	r3, [r7, #17]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	b2d1      	uxtb	r1, r2
 800169c:	4a1d      	ldr	r2, [pc, #116]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 800169e:	4413      	add	r3, r2
 80016a0:	460a      	mov	r2, r1
 80016a2:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80016a8:	7c7b      	ldrb	r3, [r7, #17]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	b2d1      	uxtb	r1, r2
 80016ae:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 80016b0:	4413      	add	r3, r2
 80016b2:	460a      	mov	r2, r1
 80016b4:	725a      	strb	r2, [r3, #9]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80016b6:	f002 f8ac 	bl	8003812 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <Powerstep01_CmdSetParam+0x198>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f47f af71 	bne.w	80015ac <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80016ca:	7cfb      	ldrb	r3, [r7, #19]
 80016cc:	f1c3 0303 	rsb	r3, r3, #3
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e011      	b.n	80016f8 <Powerstep01_CmdSetParam+0x180>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <Powerstep01_CmdSetParam+0x19c>)
 80016de:	1898      	adds	r0, r3, r2
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	4a0c      	ldr	r2, [pc, #48]	@ (800171c <Powerstep01_CmdSetParam+0x1a4>)
 80016ea:	4413      	add	r3, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f001 fc45 	bl	8002f7c <Powerstep01_WriteBytes>
         loop++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d9ea      	bls.n	80016d4 <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 80016fe:	f002 f891 	bl	8003824 <Powerstep01_Board_EnableIrq>
  }
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000468 	.word	0x20000468
 8001710:	20000484 	.word	0x20000484
 8001714:	2000046c 	.word	0x2000046c
 8001718:	052021e4 	.word	0x052021e4
 800171c:	20000478 	.word	0x20000478

08001720 <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2200      	movs	r2, #0
 800172e:	21a0      	movs	r1, #160	@ 0xa0
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fdb7 	bl	80022a4 <Powerstep01_SendCommand>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2200      	movs	r2, #0
 800174c:	21b0      	movs	r1, #176	@ 0xb0
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fda8 	bl	80022a4 <Powerstep01_SendCommand>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	460a      	mov	r2, r1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 8001772:	b2d9      	uxtb	r1, r3
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2200      	movs	r2, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fd93 	bl	80022a4 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e028      	b.n	80017e6 <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a25      	ldr	r2, [pc, #148]	@ (800182c <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8001798:	21d0      	movs	r1, #208	@ 0xd0
 800179a:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4a23      	ldr	r2, [pc, #140]	@ (800182c <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017a0:	4413      	add	r3, r2
 80017a2:	2200      	movs	r2, #0
 80017a4:	70da      	strb	r2, [r3, #3]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a20      	ldr	r2, [pc, #128]	@ (800182c <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017aa:	4413      	add	r3, r2
 80017ac:	2200      	movs	r2, #0
 80017ae:	719a      	strb	r2, [r3, #6]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	4a1e      	ldr	r2, [pc, #120]	@ (800182c <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017b4:	4413      	add	r3, r2
 80017b6:	2200      	movs	r2, #0
 80017b8:	725a      	strb	r2, [r3, #9]
     spiRxBursts[0][loop] = 0;
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80017be:	2100      	movs	r1, #0
 80017c0:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80017c6:	4413      	add	r3, r2
 80017c8:	2200      	movs	r2, #0
 80017ca:	70da      	strb	r2, [r3, #3]
     spiRxBursts[2][loop] = 0;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	719a      	strb	r2, [r3, #6]
     spiRxBursts[3][loop] = 0;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4a15      	ldr	r2, [pc, #84]	@ (8001830 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80017da:	4413      	add	r3, r2
 80017dc:	2200      	movs	r2, #0
 80017de:	725a      	strb	r2, [r3, #9]
  for (loop = 0; loop < numberOfDevices; loop++)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	3301      	adds	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <Powerstep01_FetchAndClearAllStatus+0xac>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3d0      	bcc.n	8001794 <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 80017f2:	2300      	movs	r3, #0
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	e011      	b.n	800181c <Powerstep01_FetchAndClearAllStatus+0x94>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8001802:	1898      	adds	r0, r3, r2
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 800180e:	4413      	add	r3, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f001 fbb3 	bl	8002f7c <Powerstep01_WriteBytes>
       loop++)
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	3301      	adds	r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d9ea      	bls.n	80017f8 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000046c 	.word	0x2000046c
 8001830:	20000478 	.word	0x20000478
 8001834:	20000468 	.word	0x20000468

08001838 <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <Powerstep01_GetFetchedStatus+0x58>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	429a      	cmp	r2, r3
 8001850:	d216      	bcs.n	8001880 <Powerstep01_GetFetchedStatus+0x48>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <Powerstep01_GetFetchedStatus+0x58>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <Powerstep01_GetFetchedStatus+0x5c>)
 8001866:	4413      	add	r3, r2
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	b21b      	sxth	r3, r3
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	7b7b      	ldrb	r3, [r7, #13]
 8001872:	4908      	ldr	r1, [pc, #32]	@ (8001894 <Powerstep01_GetFetchedStatus+0x5c>)
 8001874:	440b      	add	r3, r1
 8001876:	799b      	ldrb	r3, [r3, #6]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 8001880:	89fb      	ldrh	r3, [r7, #14]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000468 	.word	0x20000468
 8001894:	20000478 	.word	0x20000478

08001898 <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 800189c:	4b02      	ldr	r3, [pc, #8]	@ (80018a8 <Powerstep01_GetMotorHandle+0x10>)
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000000 	.word	0x20000000

080018ac <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 80018b0:	4b02      	ldr	r3, [pc, #8]	@ (80018bc <Powerstep01_GetFwVersion+0x10>)
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	00010500 	.word	0x00010500

080018c0 <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2103      	movs	r1, #3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fbde 	bl	8001090 <Powerstep01_CmdGetParam>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fc82 	bl	80021e0 <Powerstep01_ConvertPosition>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <Powerstep01_GetNbDevices+0x14>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000468 	.word	0x20000468

08001900 <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2116      	movs	r1, #22
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fbbd 	bl	8001090 <Powerstep01_CmdGetParam>
 8001916:	4603      	mov	r3, r0
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbaf 	bl	8001090 <Powerstep01_CmdGetParam>
 8001932:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3b01      	subs	r3, #1
 8001938:	2b14      	cmp	r3, #20
 800193a:	f200 8090 	bhi.w	8001a5e <Powerstep01_GetAnalogValue+0x15e>
 800193e:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <Powerstep01_GetAnalogValue+0x44>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001999 	.word	0x08001999
 8001948:	08001a5f 	.word	0x08001a5f
 800194c:	08001999 	.word	0x08001999
 8001950:	080019b9 	.word	0x080019b9
 8001954:	080019ad 	.word	0x080019ad
 8001958:	080019ad 	.word	0x080019ad
 800195c:	080019c5 	.word	0x080019c5
 8001960:	080019d1 	.word	0x080019d1
 8001964:	08001a1d 	.word	0x08001a1d
 8001968:	08001a1d 	.word	0x08001a1d
 800196c:	08001a1d 	.word	0x08001a1d
 8001970:	08001a1d 	.word	0x08001a1d
 8001974:	080019f9 	.word	0x080019f9
 8001978:	08001a3b 	.word	0x08001a3b
 800197c:	08001a41 	.word	0x08001a41
 8001980:	08001a41 	.word	0x08001a41
 8001984:	08001a05 	.word	0x08001a05
 8001988:	08001a5f 	.word	0x08001a5f
 800198c:	08001a11 	.word	0x08001a11
 8001990:	08001a11 	.word	0x08001a11
 8001994:	080019e5 	.word	0x080019e5
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fc21 	bl	80021e0 <Powerstep01_ConvertPosition>
 800199e:	ee07 0a90 	vmov	s15, r0
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 80019aa:	e061      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f001 fb27 	bl	8003000 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 80019b2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80019b6:	e05b      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f001 fca3 	bl	8003304 <Powerstep01_Speed_RegVal_to_Steps_s>
 80019be:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80019c2:	e055      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f001 fc55 	bl	8003274 <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 80019ca:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80019ce:	e04f      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d6:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f001 fc7d 	bl	80032d8 <Powerstep01_MinSpd_RegVal_to_Steps_s>
 80019de:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 80019e2:	e045      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ea:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f001 fb69 	bl	80030c4 <Powerstep01_FSSpd_RegVal_to_Steps_s>
 80019f2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80019f6:	e03b      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f001 fb9b 	bl	8003134 <Powerstep01_IntSpd_RegVal_to_Steps_s>
 80019fe:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a02:	e035      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f001 fbcd 	bl	80031a4 <Powerstep01_KTherm_RegVal_to_Comp>
 8001a0a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a0e:	e02f      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f001 fcb1 	bl	8003378 <Powerstep01_StallOcd_RegVal_to_Th>
 8001a16:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a1a:	e029      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 8001a1c:	7cfb      	ldrb	r3, [r7, #19]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <Powerstep01_GetAnalogValue+0x12e>
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f001 fbf6 	bl	8003214 <Powerstep01_Kval_RegVal_to_Perc>
 8001a28:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 8001a2c:	e020      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f001 fcde 	bl	80033f0 <Powerstep01_Tval_RegVal_to_RefVoltage>
 8001a34:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a38:	e01a      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8001a3a:	7cfb      	ldrb	r3, [r7, #19]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d016      	beq.n	8001a6e <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <Powerstep01_GetAnalogValue+0x152>
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f001 fb0e 	bl	8003068 <Powerstep01_BEMFslope_RegVal_to_Perc>
 8001a4c:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 8001a50:	e00e      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f001 fd01 	bl	800345a <Powerstep01_Tmin_RegVal_to_Time>
 8001a58:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a5c:	e008      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a68:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a6c:	e000      	b.n	8001a70 <Powerstep01_GetAnalogValue+0x170>
        break;
 8001a6e:	bf00      	nop
  }
  return value;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	ee07 3a90 	vmov	s15, r3
}
 8001a76:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fafe 	bl	8001090 <Powerstep01_CmdGetParam>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fba2 	bl	80021e0 <Powerstep01_ConvertPosition>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fbd4 	bl	8001260 <Powerstep01_CmdGetStatus>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 8001ac6:	2300      	movs	r3, #0
  }
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	603a      	str	r2, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	460b      	mov	r3, r1
 8001ade:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <Powerstep01_QueueCommands+0xd8>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d257      	bcs.n	8001b9c <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <Powerstep01_QueueCommands+0xd8>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8001b02:	2b8a      	cmp	r3, #138	@ 0x8a
 8001b04:	d01a      	beq.n	8001b3c <Powerstep01_QueueCommands+0x6c>
 8001b06:	2b8a      	cmp	r3, #138	@ 0x8a
 8001b08:	dc35      	bgt.n	8001b76 <Powerstep01_QueueCommands+0xa6>
 8001b0a:	2b82      	cmp	r3, #130	@ 0x82
 8001b0c:	d016      	beq.n	8001b3c <Powerstep01_QueueCommands+0x6c>
 8001b0e:	2b82      	cmp	r3, #130	@ 0x82
 8001b10:	dc31      	bgt.n	8001b76 <Powerstep01_QueueCommands+0xa6>
 8001b12:	2b40      	cmp	r3, #64	@ 0x40
 8001b14:	d012      	beq.n	8001b3c <Powerstep01_QueueCommands+0x6c>
 8001b16:	2b40      	cmp	r3, #64	@ 0x40
 8001b18:	db2d      	blt.n	8001b76 <Powerstep01_QueueCommands+0xa6>
 8001b1a:	2b68      	cmp	r3, #104	@ 0x68
 8001b1c:	dc2b      	bgt.n	8001b76 <Powerstep01_QueueCommands+0xa6>
 8001b1e:	2b50      	cmp	r3, #80	@ 0x50
 8001b20:	db29      	blt.n	8001b76 <Powerstep01_QueueCommands+0xa6>
 8001b22:	3b50      	subs	r3, #80	@ 0x50
 8001b24:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <Powerstep01_QueueCommands+0xdc>)
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01c      	beq.n	8001b76 <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	491c      	ldr	r1, [pc, #112]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b40:	79ba      	ldrb	r2, [r7, #6]
 8001b42:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	141a      	asrs	r2, r3, #16
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	b2d1      	uxtb	r1, r2
 8001b4c:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	460a      	mov	r2, r1
 8001b52:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	121a      	asrs	r2, r3, #8
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	b2d1      	uxtb	r1, r2
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	b2d1      	uxtb	r1, r2
 8001b6a:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	460a      	mov	r2, r1
 8001b70:	725a      	strb	r2, [r3, #9]
       break;
 8001b72:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 8001b74:	e012      	b.n	8001b9c <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b82:	4413      	add	r3, r2
 8001b84:	2200      	movs	r2, #0
 8001b86:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = command;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <Powerstep01_QueueCommands+0xe0>)
 8001b96:	4413      	add	r3, r2
 8001b98:	79ba      	ldrb	r2, [r7, #6]
 8001b9a:	725a      	strb	r2, [r3, #9]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000468 	.word	0x20000468
 8001bac:	01010001 	.word	0x01010001
 8001bb0:	2000046c 	.word	0x2000046c

08001bb4 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	211b      	movs	r1, #27
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa64 	bl	8001090 <Powerstep01_CmdGetParam>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29b      	uxth	r3, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 ff2d 	bl	8003a40 <Powerstep01_Board_ReleaseReset>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 ff32 	bl	8003a64 <Powerstep01_Board_Reset>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460a      	mov	r2, r1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	2b07      	cmp	r3, #7
 8001c1c:	d82a      	bhi.n	8001c74 <Powerstep01_SelectStepMode+0x6c>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <Powerstep01_SelectStepMode+0x1c>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c45 	.word	0x08001c45
 8001c28:	08001c4b 	.word	0x08001c4b
 8001c2c:	08001c51 	.word	0x08001c51
 8001c30:	08001c57 	.word	0x08001c57
 8001c34:	08001c5d 	.word	0x08001c5d
 8001c38:	08001c63 	.word	0x08001c63
 8001c3c:	08001c69 	.word	0x08001c69
 8001c40:	08001c6f 	.word	0x08001c6f
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
      break;
 8001c48:	e016      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
      break;    
 8001c4e:	e013      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8001c50:	2302      	movs	r3, #2
 8001c52:	73fb      	strb	r3, [r7, #15]
      break;        
 8001c54:	e010      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8001c56:	2303      	movs	r3, #3
 8001c58:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5a:	e00d      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	73fb      	strb	r3, [r7, #15]
      break;        
 8001c60:	e00a      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 8001c62:	2305      	movs	r3, #5
 8001c64:	73fb      	strb	r3, [r7, #15]
      break;
 8001c66:	e007      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8001c68:	2306      	movs	r3, #6
 8001c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6c:	e004      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	73fb      	strb	r3, [r7, #15]
      break;
 8001c72:	e001      	b.n	8001c78 <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8001c74:	2300      	movs	r3, #0
 8001c76:	e01c      	b.n	8001cb2 <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fbed 	bl	800145a <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2116      	movs	r1, #22
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fa03 	bl	8001090 <Powerstep01_CmdGetParam>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f023 0307 	bic.w	r3, r3, #7
 8001c92:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 8001c94:	7bba      	ldrb	r2, [r7, #14]
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2116      	movs	r1, #22
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fc68 	bl	8001578 <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fc3f 	bl	800152e <Powerstep01_CmdResetPos>
  
  return TRUE;
 8001cb0:	2301      	movs	r3, #1
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop

08001cbc <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	e011      	b.n	8001cec <Powerstep01_SendQueuedCommands+0x30>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <Powerstep01_SendQueuedCommands+0x40>)
 8001cd2:	1898      	adds	r0, r3, r2
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <Powerstep01_SendQueuedCommands+0x44>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f001 f94b 	bl	8002f7c <Powerstep01_WriteBytes>
       loop++)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d9ea      	bls.n	8001cc8 <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000046c 	.word	0x2000046c
 8001d00:	20000478 	.word	0x20000478

08001d04 <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f9bb 	bl	8001090 <Powerstep01_CmdGetParam>
 8001d1a:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	1ad2      	subs	r2, r2, r3
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2101      	movs	r1, #1
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fc26 	bl	8001578 <Powerstep01_CmdSetParam>
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2103      	movs	r1, #3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc16 	bl	8001578 <Powerstep01_CmdSetParam>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d804      	bhi.n	8001d6e <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8001d64:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <Powerstep01_SetNbDevices+0x28>)
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 8001d6e:	2300      	movs	r3, #0
  }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	20000468 	.word	0x20000468

08001d80 <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2116      	movs	r1, #22
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f979 	bl	8001090 <Powerstep01_CmdGetParam>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 8001db0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	d507      	bpl.n	8001dce <Powerstep01_SetAnalogValue+0x4e>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d004      	beq.n	8001dce <Powerstep01_SetAnalogValue+0x4e>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d001      	beq.n	8001dce <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	2b14      	cmp	r3, #20
 8001dd4:	f200 8191 	bhi.w	80020fa <Powerstep01_SetAnalogValue+0x37a>
 8001dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <Powerstep01_SetAnalogValue+0x60>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001e9b 	.word	0x08001e9b
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e9b 	.word	0x08001e9b
 8001dec:	080020fb 	.word	0x080020fb
 8001df0:	08001f0f 	.word	0x08001f0f
 8001df4:	08001f0f 	.word	0x08001f0f
 8001df8:	08001f35 	.word	0x08001f35
 8001dfc:	08001f5b 	.word	0x08001f5b
 8001e00:	0800204f 	.word	0x0800204f
 8001e04:	0800204f 	.word	0x0800204f
 8001e08:	0800204f 	.word	0x0800204f
 8001e0c:	0800204f 	.word	0x0800204f
 8001e10:	08001fcb 	.word	0x08001fcb
 8001e14:	0800209d 	.word	0x0800209d
 8001e18:	080020a9 	.word	0x080020a9
 8001e1c:	080020a9 	.word	0x080020a9
 8001e20:	08001ff1 	.word	0x08001ff1
 8001e24:	080020fb 	.word	0x080020fb
 8001e28:	08002029 	.word	0x08002029
 8001e2c:	08002029 	.word	0x08002029
 8001e30:	08001f93 	.word	0x08001f93
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8001e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e38:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 800211c <Powerstep01_SetAnalogValue+0x39c>
 8001e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	dc1c      	bgt.n	8001e80 <Powerstep01_SetAnalogValue+0x100>
 8001e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	d018      	beq.n	8001e86 <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8001e54:	2116      	movs	r1, #22
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff f91a 	bl	8001090 <Powerstep01_CmdGetParam>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	2201      	movs	r2, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d502      	bpl.n	8001e86 <Powerstep01_SetAnalogValue+0x106>
 8001e80:	2300      	movs	r3, #0
 8001e82:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8001e84:	e13b      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8001e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8e:	ee17 3a90 	vmov	r3, s15
 8001e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e96:	617b      	str	r3, [r7, #20]
      break;        
 8001e98:	e131      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 8001e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	d51c      	bpl.n	8001ee2 <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 8001ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eac:	eef1 7a67 	vneg.f32	s15, s15
 8001eb0:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 8001eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebc:	ee17 3a90 	vmov	r3, s15
 8001ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ec4:	d80a      	bhi.n	8001edc <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ece:	ee17 3a90 	vmov	r3, s15
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ed8:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8001eda:	e110      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8001edc:	2300      	movs	r3, #0
 8001ede:	74fb      	strb	r3, [r7, #19]
      break;
 8001ee0:	e10d      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 8001ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ef2:	d209      	bcs.n	8001f08 <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efc:	ee17 3a90 	vmov	r3, s15
 8001f00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	e0fa      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8001f08:	2300      	movs	r3, #0
 8001f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8001f0c:	e0f7      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8001f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f12:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002120 <Powerstep01_SetAnalogValue+0x3a0>
 8001f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	dd02      	ble.n	8001f26 <Powerstep01_SetAnalogValue+0x1a6>
 8001f20:	2300      	movs	r3, #0
 8001f22:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8001f24:	e0eb      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8001f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f2a:	f001 f84d 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	617b      	str	r3, [r7, #20]
      break;
 8001f32:	e0e4      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8001f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f38:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002124 <Powerstep01_SetAnalogValue+0x3a4>
 8001f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dd02      	ble.n	8001f4c <Powerstep01_SetAnalogValue+0x1cc>
 8001f46:	2300      	movs	r3, #0
 8001f48:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8001f4a:	e0d8      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8001f4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f50:	f001 f974 	bl	800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8001f54:	4603      	mov	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]
      break;
 8001f58:	e0d1      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8001f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8002128 <Powerstep01_SetAnalogValue+0x3a8>
 8001f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	dd02      	ble.n	8001f72 <Powerstep01_SetAnalogValue+0x1f2>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 8001f70:	e0c5      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f88a 	bl	8001090 <Powerstep01_CmdGetParam>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 8001f82:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f86:	f001 f98b 	bl	80032a0 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4323      	orrs	r3, r4
 8001f8e:	617b      	str	r3, [r7, #20]
      break;      
 8001f90:	e0b5      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 8001f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f96:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800212c <Powerstep01_SetAnalogValue+0x3ac>
 8001f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dd02      	ble.n	8001faa <Powerstep01_SetAnalogValue+0x22a>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 8001fa8:	e0a9      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f86e 	bl	8001090 <Powerstep01_CmdGetParam>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 8001fba:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fbe:	f001 f869 	bl	8003094 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4323      	orrs	r3, r4
 8001fc6:	617b      	str	r3, [r7, #20]
      break;
 8001fc8:	e099      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8001fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fce:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002130 <Powerstep01_SetAnalogValue+0x3b0>
 8001fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	dd02      	ble.n	8001fe2 <Powerstep01_SetAnalogValue+0x262>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8001fe0:	e08d      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 8001fe2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fe6:	f001 f889 	bl	80030fc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8001fea:	4603      	mov	r3, r0
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	e086      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8001ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d408      	bmi.n	8002014 <Powerstep01_SetAnalogValue+0x294>
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002134 <Powerstep01_SetAnalogValue+0x3b4>
 800200a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	dd02      	ble.n	800201a <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8002014:	2300      	movs	r3, #0
 8002016:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8002018:	e071      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 800201a:	ed97 0a01 	vldr	s0, [r7, #4]
 800201e:	f001 f89f 	bl	8003160 <Powerstep01_KTherm_Comp_to_RegVal>
 8002022:	4603      	mov	r3, r0
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	e06a      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8002028:	edd7 7a01 	vldr	s15, [r7, #4]
 800202c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002138 <Powerstep01_SetAnalogValue+0x3b8>
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd02      	ble.n	8002040 <Powerstep01_SetAnalogValue+0x2c0>
 800203a:	2300      	movs	r3, #0
 800203c:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 800203e:	e05e      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8002040:	ed97 0a01 	vldr	s0, [r7, #4]
 8002044:	f001 f974 	bl	8003330 <Powerstep01_StallOcd_Th_to_RegVal>
 8002048:	4603      	mov	r3, r0
 800204a:	617b      	str	r3, [r7, #20]
      break;
 800204c:	e057      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 800204e:	7cbb      	ldrb	r3, [r7, #18]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d112      	bne.n	800207a <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8002054:	edd7 7a01 	vldr	s15, [r7, #4]
 8002058:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002138 <Powerstep01_SetAnalogValue+0x3b8>
 800205c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd02      	ble.n	800206c <Powerstep01_SetAnalogValue+0x2ec>
 8002066:	2300      	movs	r3, #0
 8002068:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 800206a:	e048      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 800206c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002070:	f001 f99a 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002074:	4603      	mov	r3, r0
 8002076:	617b      	str	r3, [r7, #20]
      break;
 8002078:	e041      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 800207a:	edd7 7a01 	vldr	s15, [r7, #4]
 800207e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	dd02      	ble.n	800208e <Powerstep01_SetAnalogValue+0x30e>
 8002088:	2300      	movs	r3, #0
 800208a:	74fb      	strb	r3, [r7, #19]
      break;
 800208c:	e037      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 800208e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002092:	f001 f8a1 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002096:	4603      	mov	r3, r0
 8002098:	617b      	str	r3, [r7, #20]
      break;
 800209a:	e030      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 800209c:	7cbb      	ldrb	r3, [r7, #18]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	74fb      	strb	r3, [r7, #19]
        break;
 80020a6:	e02a      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 80020a8:	7cbb      	ldrb	r3, [r7, #18]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d112      	bne.n	80020d4 <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 80020ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800213c <Powerstep01_SetAnalogValue+0x3bc>
 80020b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	dd02      	ble.n	80020c6 <Powerstep01_SetAnalogValue+0x346>
 80020c0:	2300      	movs	r3, #0
 80020c2:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 80020c4:	e01b      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 80020c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80020ca:	f001 f9a9 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 80020ce:	4603      	mov	r3, r0
 80020d0:	617b      	str	r3, [r7, #20]
      break;
 80020d2:	e014      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 80020d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002140 <Powerstep01_SetAnalogValue+0x3c0>
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd02      	ble.n	80020ec <Powerstep01_SetAnalogValue+0x36c>
 80020e6:	2300      	movs	r3, #0
 80020e8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ea:	e008      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 80020ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80020f0:	f000 ff9c 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 80020f4:	4603      	mov	r3, r0
 80020f6:	617b      	str	r3, [r7, #20]
      break;
 80020f8:	e001      	b.n	80020fe <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fa34 	bl	8001578 <Powerstep01_CmdSetParam>
  }
  return result;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
}
 8002112:	4618      	mov	r0, r3
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	43ff8000 	.word	0x43ff8000
 8002120:	4768c600 	.word	0x4768c600
 8002124:	4673e800 	.word	0x4673e800
 8002128:	44741333 	.word	0x44741333
 800212c:	46742400 	.word	0x46742400
 8002130:	44742000 	.word	0x44742000
 8002134:	3fbc0000 	.word	0x3fbc0000
 8002138:	447a0000 	.word	0x447a0000
 800213c:	42800000 	.word	0x42800000
 8002140:	3ecccccd 	.word	0x3ecccccd

08002144 <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	4618      	mov	r0, r3
 8002152:	f001 fc45 	bl	80039e0 <Powerstep01_Board_StartStepClock>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 8002162:	f001 fc63 	bl	8003a2c <Powerstep01_Board_StopStepClock>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 8002172:	2301      	movs	r3, #1
 8002174:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 8002176:	e016      	b.n	80021a6 <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 8002178:	2300      	movs	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 800217c:	2300      	movs	r3, #0
 800217e:	71bb      	strb	r3, [r7, #6]
 8002180:	e00b      	b.n	800219a <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fc8e 	bl	8001aa6 <Powerstep01_IsDeviceBusy>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	4313      	orrs	r3, r2
 8002192:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	3301      	adds	r3, #1
 8002198:	71bb      	strb	r3, [r7, #6]
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	79ba      	ldrb	r2, [r7, #6]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d3ed      	bcc.n	8002182 <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e5      	bne.n	8002178 <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000468 	.word	0x20000468

080021bc <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 80021c6:	bf00      	nop
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fc6b 	bl	8001aa6 <Powerstep01_IsDeviceBusy>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f8      	bne.n	80021c8 <Powerstep01_WaitWhileActive+0xc>
}
 80021d6:	bf00      	nop
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3301      	adds	r3, #1
 80021fc:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002204:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	425b      	negs	r3, r3
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e001      	b.n	8002212 <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 8002224:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <Powerstep01_BusyInterruptHandler+0x24>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <Powerstep01_BusyInterruptHandler+0x28>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <Powerstep01_BusyInterruptHandler+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <Powerstep01_BusyInterruptHandler+0x28>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
  }
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000045c 	.word	0x2000045c
 8002248:	20000485 	.word	0x20000485

0800224c <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002256:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <Powerstep01_ErrorHandler+0x28>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <Powerstep01_ErrorHandler+0x28>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	4610      	mov	r0, r2
 8002266:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002268:	e000      	b.n	800226c <Powerstep01_ErrorHandler+0x20>
    while(1)
 800226a:	e7fe      	b.n	800226a <Powerstep01_ErrorHandler+0x1e>
}
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000464 	.word	0x20000464

08002278 <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <Powerstep01_FlagInterruptHandler+0x24>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <Powerstep01_FlagInterruptHandler+0x28>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <Powerstep01_FlagInterruptHandler+0x24>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <Powerstep01_FlagInterruptHandler+0x28>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
  }
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000460 	.word	0x20000460
 80022a0:	20000485 	.word	0x20000485

080022a4 <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	603a      	str	r2, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	460b      	mov	r3, r1
 80022b2:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80022b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002424 <Powerstep01_SendCommand+0x180>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f080 80ad 	bcs.w	800241c <Powerstep01_SendCommand+0x178>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80022c6:	4b57      	ldr	r3, [pc, #348]	@ (8002424 <Powerstep01_SendCommand+0x180>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 80022d6:	2300      	movs	r3, #0
 80022d8:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80022da:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <Powerstep01_SendCommand+0x184>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80022e0:	7abb      	ldrb	r3, [r7, #10]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80022e6:	f001 fa9d 	bl	8003824 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e019      	b.n	8002328 <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80022f4:	4a4d      	ldr	r2, [pc, #308]	@ (800242c <Powerstep01_SendCommand+0x188>)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80022fe:	4a4b      	ldr	r2, [pc, #300]	@ (800242c <Powerstep01_SendCommand+0x188>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	3303      	adds	r3, #3
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800230a:	4a48      	ldr	r2, [pc, #288]	@ (800242c <Powerstep01_SendCommand+0x188>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	3306      	adds	r3, #6
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 8002316:	4a45      	ldr	r2, [pc, #276]	@ (800242c <Powerstep01_SendCommand+0x188>)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	3309      	adds	r3, #9
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	4b3e      	ldr	r3, [pc, #248]	@ (8002424 <Powerstep01_SendCommand+0x180>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4293      	cmp	r3, r2
 8002334:	d3de      	bcc.n	80022f4 <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 800233c:	2b8a      	cmp	r3, #138	@ 0x8a
 800233e:	d016      	beq.n	800236e <Powerstep01_SendCommand+0xca>
 8002340:	2b8a      	cmp	r3, #138	@ 0x8a
 8002342:	dc32      	bgt.n	80023aa <Powerstep01_SendCommand+0x106>
 8002344:	2b82      	cmp	r3, #130	@ 0x82
 8002346:	d012      	beq.n	800236e <Powerstep01_SendCommand+0xca>
 8002348:	2b82      	cmp	r3, #130	@ 0x82
 800234a:	dc2e      	bgt.n	80023aa <Powerstep01_SendCommand+0x106>
 800234c:	2b68      	cmp	r3, #104	@ 0x68
 800234e:	d00a      	beq.n	8002366 <Powerstep01_SendCommand+0xc2>
 8002350:	2b68      	cmp	r3, #104	@ 0x68
 8002352:	dc2a      	bgt.n	80023aa <Powerstep01_SendCommand+0x106>
 8002354:	2b60      	cmp	r3, #96	@ 0x60
 8002356:	d006      	beq.n	8002366 <Powerstep01_SendCommand+0xc2>
 8002358:	2b60      	cmp	r3, #96	@ 0x60
 800235a:	dc26      	bgt.n	80023aa <Powerstep01_SendCommand+0x106>
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d006      	beq.n	800236e <Powerstep01_SendCommand+0xca>
 8002360:	2b50      	cmp	r3, #80	@ 0x50
 8002362:	d004      	beq.n	800236e <Powerstep01_SendCommand+0xca>
 8002364:	e021      	b.n	80023aa <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800236c:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 800236e:	7a7b      	ldrb	r3, [r7, #9]
 8002370:	492e      	ldr	r1, [pc, #184]	@ (800242c <Powerstep01_SendCommand+0x188>)
 8002372:	79ba      	ldrb	r2, [r7, #6]
 8002374:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	0c1a      	lsrs	r2, r3, #16
 800237a:	7a7b      	ldrb	r3, [r7, #9]
 800237c:	b2d1      	uxtb	r1, r2
 800237e:	4a2b      	ldr	r2, [pc, #172]	@ (800242c <Powerstep01_SendCommand+0x188>)
 8002380:	4413      	add	r3, r2
 8002382:	460a      	mov	r2, r1
 8002384:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	0a1a      	lsrs	r2, r3, #8
 800238a:	7a7b      	ldrb	r3, [r7, #9]
 800238c:	b2d1      	uxtb	r1, r2
 800238e:	4a27      	ldr	r2, [pc, #156]	@ (800242c <Powerstep01_SendCommand+0x188>)
 8002390:	4413      	add	r3, r2
 8002392:	460a      	mov	r2, r1
 8002394:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8002396:	7a7b      	ldrb	r3, [r7, #9]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d1      	uxtb	r1, r2
 800239c:	4a23      	ldr	r2, [pc, #140]	@ (800242c <Powerstep01_SendCommand+0x188>)
 800239e:	4413      	add	r3, r2
 80023a0:	460a      	mov	r2, r1
 80023a2:	725a      	strb	r2, [r3, #9]
          maxArgumentNbBytes = 3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	72fb      	strb	r3, [r7, #11]
          break;
 80023a8:	e012      	b.n	80023d0 <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 80023aa:	7a7b      	ldrb	r3, [r7, #9]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <Powerstep01_SendCommand+0x188>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 80023b2:	7a7b      	ldrb	r3, [r7, #9]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <Powerstep01_SendCommand+0x188>)
 80023b6:	4413      	add	r3, r2
 80023b8:	2200      	movs	r2, #0
 80023ba:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 80023bc:	7a7b      	ldrb	r3, [r7, #9]
 80023be:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <Powerstep01_SendCommand+0x188>)
 80023c0:	4413      	add	r3, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = param;
 80023c6:	7a7b      	ldrb	r3, [r7, #9]
 80023c8:	4a18      	ldr	r2, [pc, #96]	@ (800242c <Powerstep01_SendCommand+0x188>)
 80023ca:	4413      	add	r3, r2
 80023cc:	79ba      	ldrb	r2, [r7, #6]
 80023ce:	725a      	strb	r2, [r3, #9]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80023d0:	f001 fa1f 	bl	8003812 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <Powerstep01_SendCommand+0x184>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f af7b 	bne.w	80022da <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	f1c3 0303 	rsb	r3, r3, #3
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e011      	b.n	8002412 <Powerstep01_SendCommand+0x16e>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <Powerstep01_SendCommand+0x188>)
 80023f8:	1898      	adds	r0, r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	4a0b      	ldr	r2, [pc, #44]	@ (8002430 <Powerstep01_SendCommand+0x18c>)
 8002404:	4413      	add	r3, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f000 fdb8 	bl	8002f7c <Powerstep01_WriteBytes>
         loop++)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d9ea      	bls.n	80023ee <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8002418:	f001 fa04 	bl	8003824 <Powerstep01_Board_EnableIrq>
  }
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000468 	.word	0x20000468
 8002428:	20000484 	.word	0x20000484
 800242c:	2000046c 	.word	0x2000046c
 8002430:	20000478 	.word	0x20000478

08002434 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff f897 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2200      	movs	r2, #0
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f891 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2200      	movs	r2, #0
 800245a:	2103      	movs	r1, #3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff f88b 	bl	8001578 <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b02      	cmp	r3, #2
 8002466:	f000 8263 	beq.w	8002930 <Powerstep01_SetRegisterToPredefinedValues+0x4fc>
 800246a:	2b02      	cmp	r3, #2
 800246c:	f300 8380 	bgt.w	8002b70 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <Powerstep01_SetRegisterToPredefinedValues+0x48>
 8002474:	2b01      	cmp	r3, #1
 8002476:	f000 813b 	beq.w	80026f0 <Powerstep01_SetRegisterToPredefinedValues+0x2bc>
      }
      break;
#endif
    default: ;
  }
}
 800247a:	e379      	b.n	8002b70 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 800247c:	2308      	movs	r3, #8
 800247e:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002480:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80026c0 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8002484:	f000 fda0 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002488:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 800248a:	461a      	mov	r2, r3
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2105      	movs	r1, #5
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f871 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002496:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80026c0 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 800249a:	f000 fd95 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800249e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 80024a0:	461a      	mov	r2, r3
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2106      	movs	r1, #6
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f866 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 80024ac:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80026c4 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 80024b0:	f000 fec4 	bl	800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 80024b4:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2107      	movs	r1, #7
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f85b 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 80024c2:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80026dc <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 80024c6:	f000 feeb 	bl	80032a0 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 80024ca:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 80024cc:	461a      	mov	r2, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2108      	movs	r1, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f850 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 80024d8:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80026bc <Powerstep01_SetRegisterToPredefinedValues+0x288>
 80024dc:	f000 fdda 	bl	8003094 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 80024e0:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 80024e2:	461a      	mov	r2, r3
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2115      	movs	r1, #21
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f845 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2208      	movs	r2, #8
 80024f2:	2113      	movs	r1, #19
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f83f 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	220c      	movs	r2, #12
 80024fe:	2116      	movs	r1, #22
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff f839 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	22ef      	movs	r2, #239	@ 0xef
 800250a:	2117      	movs	r1, #23
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f833 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	22c3      	movs	r2, #195	@ 0xc3
 8002516:	2118      	movs	r1, #24
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f82d 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	2119      	movs	r1, #25
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f827 	bl	8001578 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d175      	bne.n	800261c <Powerstep01_SetRegisterToPredefinedValues+0x1e8>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002530:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 80026e4 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 8002534:	f000 fde2 	bl	80030fc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002538:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 800253a:	461a      	mov	r2, r3
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	210d      	movs	r1, #13
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f819 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 8002546:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800254a:	f000 fe09 	bl	8003160 <Powerstep01_KTherm_Comp_to_RegVal>
 800254e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2111      	movs	r1, #17
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f80e 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 800255c:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80026e8 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8002560:	f000 fee6 	bl	8003330 <Powerstep01_StallOcd_Th_to_RegVal>
 8002564:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002566:	461a      	mov	r2, r3
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2114      	movs	r1, #20
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f803 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002572:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002576:	f000 fe2f 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 800257a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 800257c:	461a      	mov	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2109      	movs	r1, #9
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fff8 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002588:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 800258c:	f000 fe24 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002590:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	210a      	movs	r1, #10
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe ffed 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800259e:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80025a2:	f000 fe19 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 80025a6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 80025a8:	461a      	mov	r2, r3
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	210b      	movs	r1, #11
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe ffe2 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80025b4:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80025b8:	f000 fe0e 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 80025bc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 80025be:	461a      	mov	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	210c      	movs	r1, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe ffd7 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80025ca:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 80026c8 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 80025ce:	f000 fd2d 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 80025d2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	210e      	movs	r1, #14
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ffcc 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80025e0:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80026cc <Powerstep01_SetRegisterToPredefinedValues+0x298>
 80025e4:	f000 fd22 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 80025e8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80025ea:	461a      	mov	r2, r3
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	210f      	movs	r1, #15
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe ffc1 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80025f6:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80026cc <Powerstep01_SetRegisterToPredefinedValues+0x298>
 80025fa:	f000 fd17 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 80025fe:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002600:	461a      	mov	r2, r3
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2110      	movs	r1, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ffb6 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002612:	211a      	movs	r1, #26
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe ffaf 	bl	8001578 <Powerstep01_CmdSetParam>
      break;
 800261a:	e2a9      	b.n	8002b70 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800261c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002620:	f000 fec2 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002624:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2109      	movs	r1, #9
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe ffa3 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002632:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002636:	f000 feb7 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800263a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 800263c:	461a      	mov	r2, r3
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	210a      	movs	r1, #10
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe ff98 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002648:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 800264c:	f000 feac 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002650:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002652:	461a      	mov	r2, r3
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	210b      	movs	r1, #11
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe ff8d 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800265e:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002662:	f000 fea1 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002666:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002668:	461a      	mov	r2, r3
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	210c      	movs	r1, #12
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe ff82 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2235      	movs	r2, #53	@ 0x35
 8002678:	210e      	movs	r1, #14
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ff7c 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002680:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002684:	f000 fecc 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 8002688:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	210f      	movs	r1, #15
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe ff71 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002696:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 800269a:	f000 fec1 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 800269e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	2110      	movs	r1, #16
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe ff66 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	f243 2208 	movw	r2, #12808	@ 0x3208
 80026b2:	211a      	movs	r1, #26
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe ff5f 	bl	8001578 <Powerstep01_CmdSetParam>
      break;
 80026ba:	e259      	b.n	8002b70 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
 80026bc:	437428f6 	.word	0x437428f6
 80026c0:	4168cccd 	.word	0x4168cccd
 80026c4:	41740000 	.word	0x41740000
 80026c8:	3d1c432d 	.word	0x3d1c432d
 80026cc:	3d801f75 	.word	0x3d801f75
 80026d0:	43a40f5c 	.word	0x43a40f5c
 80026d4:	44fb051f 	.word	0x44fb051f
 80026d8:	4477f47b 	.word	0x4477f47b
 80026dc:	00000000 	.word	0x00000000
 80026e0:	4414c5c3 	.word	0x4414c5c3
 80026e4:	42760c4a 	.word	0x42760c4a
 80026e8:	4404d000 	.word	0x4404d000
 80026ec:	418028f6 	.word	0x418028f6
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_1;
 80026f0:	2308      	movs	r3, #8
 80026f2:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 80026f4:	ed1f 0a0e 	vldr	s0, [pc, #-56]	@ 80026c0 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 80026f8:	f000 fc66 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80026fc:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 80026fe:	461a      	mov	r2, r3
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2105      	movs	r1, #5
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ff37 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800270a:	ed1f 0a13 	vldr	s0, [pc, #-76]	@ 80026c0 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 800270e:	f000 fc5b 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002712:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002714:	461a      	mov	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2106      	movs	r1, #6
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe ff2c 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8002720:	ed1f 0a18 	vldr	s0, [pc, #-96]	@ 80026c4 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 8002724:	f000 fd8a 	bl	800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002728:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 800272a:	461a      	mov	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2107      	movs	r1, #7
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ff21 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8002736:	ed1f 0a17 	vldr	s0, [pc, #-92]	@ 80026dc <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 800273a:	f000 fdb1 	bl	80032a0 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 800273e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002740:	461a      	mov	r2, r3
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2108      	movs	r1, #8
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe ff16 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 800274c:	ed1f 0a1c 	vldr	s0, [pc, #-112]	@ 80026e0 <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 8002750:	f000 fca0 	bl	8003094 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002754:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2115      	movs	r1, #21
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe ff0b 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2208      	movs	r2, #8
 8002766:	2113      	movs	r1, #19
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe ff05 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	220c      	movs	r2, #12
 8002772:	2116      	movs	r1, #22
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe feff 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	22ef      	movs	r2, #239	@ 0xef
 800277e:	2117      	movs	r1, #23
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fef9 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	22c3      	movs	r2, #195	@ 0xc3
 800278a:	2118      	movs	r1, #24
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fef3 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2240      	movs	r2, #64	@ 0x40
 8002796:	2119      	movs	r1, #25
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe feed 	bl	8001578 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d175      	bne.n	8002890 <Powerstep01_SetRegisterToPredefinedValues+0x45c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80027a4:	ed1f 0a31 	vldr	s0, [pc, #-196]	@ 80026e4 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 80027a8:	f000 fca8 	bl	80030fc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80027ac:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80027ae:	461a      	mov	r2, r3
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	210d      	movs	r1, #13
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fedf 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 80027ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80027be:	f000 fccf 	bl	8003160 <Powerstep01_KTherm_Comp_to_RegVal>
 80027c2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2111      	movs	r1, #17
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fed4 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 80027d0:	ed1f 0a3b 	vldr	s0, [pc, #-236]	@ 80026e8 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 80027d4:	f000 fdac 	bl	8003330 <Powerstep01_StallOcd_Th_to_RegVal>
 80027d8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 80027da:	461a      	mov	r2, r3
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	2114      	movs	r1, #20
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fec9 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80027e6:	ed1f 0a3f 	vldr	s0, [pc, #-252]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80027ea:	f000 fcf5 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 80027ee:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 80027f0:	461a      	mov	r2, r3
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2109      	movs	r1, #9
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe febe 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80027fc:	ed1f 0a45 	vldr	s0, [pc, #-276]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002800:	f000 fcea 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002804:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	210a      	movs	r1, #10
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe feb3 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002812:	ed1f 0a4a 	vldr	s0, [pc, #-296]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002816:	f000 fcdf 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 800281a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	210b      	movs	r1, #11
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fea8 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002828:	ed1f 0a50 	vldr	s0, [pc, #-320]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 800282c:	f000 fcd4 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002830:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002832:	461a      	mov	r2, r3
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	210c      	movs	r1, #12
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fe9d 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800283e:	ed1f 0a5e 	vldr	s0, [pc, #-376]	@ 80026c8 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002842:	f000 fbf3 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002846:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002848:	461a      	mov	r2, r3
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	210e      	movs	r1, #14
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fe92 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002854:	ed1f 0a63 	vldr	s0, [pc, #-396]	@ 80026cc <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8002858:	f000 fbe8 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 800285c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	210f      	movs	r1, #15
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fe87 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800286a:	ed1f 0a68 	vldr	s0, [pc, #-416]	@ 80026cc <Powerstep01_SetRegisterToPredefinedValues+0x298>
 800286e:	f000 fbdd 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002872:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002874:	461a      	mov	r2, r3
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2110      	movs	r1, #16
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fe7c 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002886:	211a      	movs	r1, #26
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fe75 	bl	8001578 <Powerstep01_CmdSetParam>
      break;     
 800288e:	e16f      	b.n	8002b70 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002890:	ed1f 0a71 	vldr	s0, [pc, #-452]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002894:	f000 fd88 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002898:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 800289a:	461a      	mov	r2, r3
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	2109      	movs	r1, #9
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fe69 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028a6:	ed1f 0a76 	vldr	s0, [pc, #-472]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80028aa:	f000 fd7d 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028ae:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	210a      	movs	r1, #10
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fe5e 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028bc:	ed1f 0a7c 	vldr	s0, [pc, #-496]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80028c0:	f000 fd72 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028c4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80028c6:	461a      	mov	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	210b      	movs	r1, #11
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fe53 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028d2:	ed1f 0a81 	vldr	s0, [pc, #-516]	@ 80026d0 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80028d6:	f000 fd67 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028da:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	210c      	movs	r1, #12
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fe48 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2235      	movs	r2, #53	@ 0x35
 80028ec:	210e      	movs	r1, #14
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fe42 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80028f4:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80028f8:	f000 fd92 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 80028fc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 80028fe:	461a      	mov	r2, r3
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	210f      	movs	r1, #15
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fe37 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800290a:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 800290e:	f000 fd87 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 8002912:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002914:	461a      	mov	r2, r3
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	2110      	movs	r1, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fe2c 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002926:	211a      	movs	r1, #26
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fe25 	bl	8001578 <Powerstep01_CmdSetParam>
      break;     
 800292e:	e11f      	b.n	8002b70 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_2;
 8002930:	2308      	movs	r3, #8
 8002932:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002934:	ed1f 0a99 	vldr	s0, [pc, #-612]	@ 80026d4 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002938:	f000 fb46 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800293c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 800293e:	461a      	mov	r2, r3
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2105      	movs	r1, #5
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fe17 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800294a:	ed1f 0a9e 	vldr	s0, [pc, #-632]	@ 80026d4 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800294e:	f000 fb3b 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002952:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	2106      	movs	r1, #6
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fe0c 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8002960:	ed1f 0aa3 	vldr	s0, [pc, #-652]	@ 80026d8 <Powerstep01_SetRegisterToPredefinedValues+0x2a4>
 8002964:	f000 fc6a 	bl	800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002968:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 800296a:	461a      	mov	r2, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2107      	movs	r1, #7
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fe01 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8002976:	ed1f 0aa7 	vldr	s0, [pc, #-668]	@ 80026dc <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 800297a:	f000 fc91 	bl	80032a0 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 800297e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2108      	movs	r1, #8
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fdf6 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 800298c:	ed1f 0aac 	vldr	s0, [pc, #-688]	@ 80026e0 <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 8002990:	f000 fb80 	bl	8003094 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002994:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002996:	461a      	mov	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2115      	movs	r1, #21
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fdeb 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	2208      	movs	r2, #8
 80029a6:	2113      	movs	r1, #19
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fde5 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	220c      	movs	r2, #12
 80029b2:	2116      	movs	r1, #22
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fddf 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	22ef      	movs	r2, #239	@ 0xef
 80029be:	2117      	movs	r1, #23
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fdd9 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	22c3      	movs	r2, #195	@ 0xc3
 80029ca:	2118      	movs	r1, #24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fdd3 	bl	8001578 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	2119      	movs	r1, #25
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe fdcd 	bl	8001578 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d175      	bne.n	8002ad0 <Powerstep01_SetRegisterToPredefinedValues+0x69c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80029e4:	ed1f 0ac1 	vldr	s0, [pc, #-772]	@ 80026e4 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 80029e8:	f000 fb88 	bl	80030fc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80029ec:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80029ee:	461a      	mov	r2, r3
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	210d      	movs	r1, #13
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fdbf 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 80029fa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80029fe:	f000 fbaf 	bl	8003160 <Powerstep01_KTherm_Comp_to_RegVal>
 8002a02:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002a04:	461a      	mov	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2111      	movs	r1, #17
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fdb4 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 8002a10:	ed1f 0acb 	vldr	s0, [pc, #-812]	@ 80026e8 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8002a14:	f000 fc8c 	bl	8003330 <Powerstep01_StallOcd_Th_to_RegVal>
 8002a18:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2114      	movs	r1, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fda9 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a26:	ed1f 0acf 	vldr	s0, [pc, #-828]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a2a:	f000 fbd5 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002a2e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002a30:	461a      	mov	r2, r3
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2109      	movs	r1, #9
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fd9e 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a3c:	ed1f 0ad5 	vldr	s0, [pc, #-852]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a40:	f000 fbca 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002a44:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002a46:	461a      	mov	r2, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fd93 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a52:	ed1f 0ada 	vldr	s0, [pc, #-872]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a56:	f000 fbbf 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002a5a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	210b      	movs	r1, #11
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fd88 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a68:	ed1f 0ae0 	vldr	s0, [pc, #-896]	@ 80026ec <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a6c:	f000 fbb4 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002a70:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002a72:	461a      	mov	r2, r3
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	210c      	movs	r1, #12
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fd7d 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002a7e:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8002b78 <Powerstep01_SetRegisterToPredefinedValues+0x744>
 8002a82:	f000 fad3 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002a86:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002a88:	461a      	mov	r2, r3
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	210e      	movs	r1, #14
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fd72 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002a94:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8002b7c <Powerstep01_SetRegisterToPredefinedValues+0x748>
 8002a98:	f000 fac8 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002a9c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fd67 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002aaa:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8002b7c <Powerstep01_SetRegisterToPredefinedValues+0x748>
 8002aae:	f000 fabd 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002ab2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2110      	movs	r1, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fd5c 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002ac6:	211a      	movs	r1, #26
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fd55 	bl	8001578 <Powerstep01_CmdSetParam>
      break;
 8002ace:	e04e      	b.n	8002b6e <Powerstep01_SetRegisterToPredefinedValues+0x73a>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002ad0:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8002b80 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002ad4:	f000 fc68 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ad8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2109      	movs	r1, #9
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fd49 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002ae6:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002b80 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002aea:	f000 fc5d 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002aee:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002af0:	461a      	mov	r2, r3
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	210a      	movs	r1, #10
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fd3e 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002afc:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002b80 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002b00:	f000 fc52 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002b04:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	210b      	movs	r1, #11
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fd33 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002b12:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002b80 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002b16:	f000 fc47 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002b1a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	210c      	movs	r1, #12
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fd28 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2235      	movs	r2, #53	@ 0x35
 8002b2c:	210e      	movs	r1, #14
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fd22 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002b34:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002b38:	f000 fc72 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 8002b3c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	210f      	movs	r1, #15
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fd17 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002b4a:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 8002b4e:	f000 fc67 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 8002b52:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	2110      	movs	r1, #16
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fd0c 	bl	8001578 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002b66:	211a      	movs	r1, #26
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fd05 	bl	8001578 <Powerstep01_CmdSetParam>
      break;
 8002b6e:	bf00      	nop
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	3d1c432d 	.word	0x3d1c432d
 8002b7c:	3d801f75 	.word	0x3d801f75
 8002b80:	43a40f5c 	.word	0x43a40f5c

08002b84 <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	2200      	movs	r2, #0
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fcee 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fce8 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2103      	movs	r1, #3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fce2 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bba:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbe:	f000 fa03 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002bc2:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	2105      	movs	r1, #5
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fcd4 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bda:	f000 f9f5 	bl	8002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002bde:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002be0:	461a      	mov	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2106      	movs	r1, #6
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fcc6 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	f000 fb21 	bl	800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002bfa:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2107      	movs	r1, #7
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fcb8 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c12:	eeb0 0a67 	vmov.f32	s0, s15
 8002c16:	f000 fb11 	bl	800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002c1a:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2108      	movs	r1, #8
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fca6 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c36:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3a:	f000 fa2b 	bl	8003094 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002c3e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002c40:	4323      	orrs	r3, r4
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2115      	movs	r1, #21
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fc94 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c56:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5a:	f000 fb69 	bl	8003330 <Powerstep01_StallOcd_Th_to_RegVal>
 8002c5e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002c60:	461a      	mov	r2, r3
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2113      	movs	r1, #19
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fc86 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2116      	movs	r1, #22
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fc74 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8002c96:	461a      	mov	r2, r3
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2117      	movs	r1, #23
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fc6b 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 8002cb8:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 8002cbe:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2118      	movs	r1, #24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fc56 	bl	8001578 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2119      	movs	r1, #25
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fc48 	bl	8001578 <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 80b6 	bne.w	8002e5e <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfc:	f000 f9fe 	bl	80030fc <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002d00:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8002d02:	461a      	mov	r2, r3
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	210d      	movs	r1, #13
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fc35 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002d14:	eeb0 0a67 	vmov.f32	s0, s15
 8002d18:	f000 fa22 	bl	8003160 <Powerstep01_KTherm_Comp_to_RegVal>
 8002d1c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002d1e:	461a      	mov	r2, r3
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2111      	movs	r1, #17
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fc27 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002d30:	eeb0 0a67 	vmov.f32	s0, s15
 8002d34:	f000 fafc 	bl	8003330 <Powerstep01_StallOcd_Th_to_RegVal>
 8002d38:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2114      	movs	r1, #20
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fc19 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d50:	f000 fa42 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002d54:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002d56:	461a      	mov	r2, r3
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2109      	movs	r1, #9
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fc0b 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002d68:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6c:	f000 fa34 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002d70:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	210a      	movs	r1, #10
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fbfd 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002d84:	eeb0 0a67 	vmov.f32	s0, s15
 8002d88:	f000 fa26 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002d8c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002d8e:	461a      	mov	r2, r3
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	210b      	movs	r1, #11
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe fbef 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002da0:	eeb0 0a67 	vmov.f32	s0, s15
 8002da4:	f000 fa18 	bl	80031d8 <Powerstep01_Kval_Perc_to_RegVal>
 8002da8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	210c      	movs	r1, #12
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fbe1 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc0:	f000 f934 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002dc4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	210e      	movs	r1, #14
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fbd3 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ddc:	f000 f926 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002de0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002de2:	461a      	mov	r2, r3
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	210f      	movs	r1, #15
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fbc5 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002df4:	eeb0 0a67 	vmov.f32	s0, s15
 8002df8:	f000 f918 	bl	800302c <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002dfc:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002dfe:	461a      	mov	r2, r3
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2110      	movs	r1, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fbb7 	bl	8001578 <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 8002e36:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 8002e3e:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 8002e46:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 8002e4e:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002e50:	461a      	mov	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	211a      	movs	r1, #26
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fb8e 	bl	8001578 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 8002e5c:	e08a      	b.n	8002f74 <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002e64:	eeb0 0a67 	vmov.f32	s0, s15
 8002e68:	f000 fa9e 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002e6c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002e6e:	461a      	mov	r2, r3
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2109      	movs	r1, #9
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fb7f 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	f000 fa90 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002e88:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	210a      	movs	r1, #10
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fb71 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea0:	f000 fa82 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ea4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	210b      	movs	r1, #11
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fb63 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f000 fa74 	bl	80033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ec0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	210c      	movs	r1, #12
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fb55 	bl	8001578 <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	210e      	movs	r1, #14
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fb47 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef4:	f000 fa94 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 8002ef8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	210f      	movs	r1, #15
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fb39 	bl	8001578 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	f000 fa86 	bl	8003420 <Powerstep01_Tmin_Time_to_RegVal>
 8002f14:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002f16:	461a      	mov	r2, r3
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2110      	movs	r1, #16
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fb2b 	bl	8001578 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 8002f42:	4313      	orrs	r3, r2
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 8002f4e:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 8002f56:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 8002f5e:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 8002f66:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	211a      	movs	r1, #26
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fb02 	bl	8001578 <Powerstep01_CmdSetParam>
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd90      	pop	{r4, r7, pc}

08002f7c <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <Powerstep01_WriteBytes+0x40>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fdb1 	bl	8003af8 <Powerstep01_Board_SpiWriteBytes>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 8002f9c:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8002fa0:	f7ff f954 	bl	800224c <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <Powerstep01_WriteBytes+0x44>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <Powerstep01_WriteBytes+0x48>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
  }
}                     
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000468 	.word	0x20000468
 8002fc0:	20000485 	.word	0x20000485
 8002fc4:	20000484 	.word	0x20000484

08002fc8 <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 8002fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 8002fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fea:	ee17 3a90 	vmov	r3, s15
 8002fee:	b29b      	uxth	r3, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	3d8cbccc 	.word	0x3d8cbccc

08003000 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003028 <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 8003016:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	4168d4a5 	.word	0x4168d4a5

0800302c <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 8003036:	edd7 7a01 	vldr	s15, [r7, #4]
 800303a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003064 <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 800303e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003042:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800304e:	edc7 7a00 	vstr	s15, [r7]
 8003052:	783b      	ldrb	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	441f6000 	.word	0x441f6000

08003068 <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003090 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 800307e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	3acd9a67 	.word	0x3acd9a67

08003094 <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 800309e:	edd7 7a01 	vldr	s15, [r7, #4]
 80030a2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80030c0 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 80030a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ae:	ee17 3a90 	vmov	r3, s15
 80030b2:	b29b      	uxth	r3, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	3d8637bd 	.word	0x3d8637bd

080030c4 <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80030f4 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 80030da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80030f8 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 80030e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80030e6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	3f7fbe77 	.word	0x3f7fbe77
 80030f8:	41742400 	.word	0x41742400

080030fc <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 8003106:	edd7 7a01 	vldr	s15, [r7, #4]
 800310a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003130 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 800310e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003112:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800311a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800311e:	ee17 3a90 	vmov	r3, s15
 8003122:	b29b      	uxth	r3, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	418637bd 	.word	0x418637bd

08003134 <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800315c <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 800314a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	3d7423d9 	.word	0x3d7423d9

08003160 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 800316a:	edd7 7a01 	vldr	s15, [r7, #4]
 800316e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003176:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80031a0 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 800317a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318a:	edc7 7a00 	vstr	s15, [r7]
 800318e:	783b      	ldrb	r3, [r7, #0]
 8003190:	b2db      	uxtb	r3, r3
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	42000000 	.word	0x42000000

080031a4 <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80031d4 <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 80031ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031c2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	3d000000 	.word	0x3d000000

080031d8 <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 80031e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031e6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003210 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 80031ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fa:	edc7 7a00 	vstr	s15, [r7]
 80031fe:	783b      	ldrb	r3, [r7, #0]
 8003200:	b2db      	uxtb	r3, r3
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	4023d70a 	.word	0x4023d70a

08003214 <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 800322a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800322e:	eeb0 0a67 	vmov.f32	s0, s15
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 8003246:	edd7 7a01 	vldr	s15, [r7, #4]
 800324a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 800324e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003252:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003256:	ee77 7a87 	vadd.f32	s15, s15, s14
 800325a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325e:	ee17 3a90 	vmov	r3, s15
 8003262:	b29b      	uxth	r3, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	3d8637bd 	.word	0x3d8637bd

08003274 <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800329c <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 800328a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800328e:	eeb0 0a67 	vmov.f32	s0, s15
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	41742400 	.word	0x41742400

080032a0 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 80032aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ae:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80032d4 <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 80032b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c2:	ee17 3a90 	vmov	r3, s15
 80032c6:	b29b      	uxth	r3, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	408637bd 	.word	0x408637bd

080032d8 <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003300 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 80032ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	3e742400 	.word	0x3e742400

08003304 <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800332c <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 800331a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	3c742400 	.word	0x3c742400

08003330 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 800333a:	edd7 7a01 	vldr	s15, [r7, #4]
 800333e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003370 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 8003342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003346:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003374 <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 800334a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800334e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003352:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335a:	edc7 7a00 	vstr	s15, [r7]
 800335e:	783b      	ldrb	r3, [r7, #0]
 8003360:	b2db      	uxtb	r3, r3
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	41fa0000 	.word	0x41fa0000
 8003374:	3d03126f 	.word	0x3d03126f

08003378 <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3301      	adds	r3, #1
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80033a4 <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8003390:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003394:	eeb0 0a67 	vmov.f32	s0, s15
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	41fa0000 	.word	0x41fa0000

080033a8 <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 80033b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80033e8 <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 80033ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033be:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80033ec <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 80033c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d2:	edc7 7a00 	vstr	s15, [r7]
 80033d6:	783b      	ldrb	r3, [r7, #0]
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40fa0000 	.word	0x40fa0000
 80033ec:	3e03126f 	.word	0x3e03126f

080033f0 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003404:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800341c <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 8003408:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800340c:	eeb0 0a67 	vmov.f32	s0, s15
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40fa0000 	.word	0x40fa0000

08003420 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 800342a:	edd7 7a01 	vldr	s15, [r7, #4]
 800342e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800343a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800343e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003446:	edc7 7a00 	vstr	s15, [r7]
 800344a:	783b      	ldrb	r3, [r7, #0]
 800344c:	b2db      	uxtb	r3, r3
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3301      	adds	r3, #1
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003472:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003476:	eeb0 0a67 	vmov.f32	s0, s15
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_MspInit+0x4c>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	4a0f      	ldr	r2, [pc, #60]	@ (80034d0 <HAL_MspInit+0x4c>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003498:	6453      	str	r3, [r2, #68]	@ 0x44
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <HAL_MspInit+0x4c>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_MspInit+0x4c>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <HAL_MspInit+0x4c>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_MspInit+0x4c>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034c2:	2007      	movs	r0, #7
 80034c4:	f000 ff4a 	bl	800435c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800

080034d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	@ 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a19      	ldr	r2, [pc, #100]	@ (8003558 <HAL_SPI_MspInit+0x84>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d12b      	bne.n	800354e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b18      	ldr	r3, [pc, #96]	@ (800355c <HAL_SPI_MspInit+0x88>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	4a17      	ldr	r2, [pc, #92]	@ (800355c <HAL_SPI_MspInit+0x88>)
 8003500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003504:	6453      	str	r3, [r2, #68]	@ 0x44
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <HAL_SPI_MspInit+0x88>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_SPI_MspInit+0x88>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a10      	ldr	r2, [pc, #64]	@ (800355c <HAL_SPI_MspInit+0x88>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <HAL_SPI_MspInit+0x88>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800352e:	23e0      	movs	r3, #224	@ 0xe0
 8003530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800353e:	2305      	movs	r3, #5
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	4805      	ldr	r0, [pc, #20]	@ (8003560 <HAL_SPI_MspInit+0x8c>)
 800354a:	f000 ffdb 	bl	8004504 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	@ 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40013000 	.word	0x40013000
 800355c:	40023800 	.word	0x40023800
 8003560:	40020000 	.word	0x40020000

08003564 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_TIM_PWM_MspInit+0x48>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d115      	bne.n	80035a2 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <HAL_TIM_PWM_MspInit+0x4c>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a0c      	ldr	r2, [pc, #48]	@ (80035b0 <HAL_TIM_PWM_MspInit+0x4c>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	4b0a      	ldr	r3, [pc, #40]	@ (80035b0 <HAL_TIM_PWM_MspInit+0x4c>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	201d      	movs	r0, #29
 8003598:	f000 feeb 	bl	8004372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800359c:	201d      	movs	r0, #29
 800359e:	f000 ff04 	bl	80043aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40023800 	.word	0x40023800

080035b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a12      	ldr	r2, [pc, #72]	@ (800361c <HAL_TIM_MspPostInit+0x68>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11d      	bne.n	8003612 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_TIM_MspPostInit+0x6c>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <HAL_TIM_MspPostInit+0x6c>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <HAL_TIM_MspPostInit+0x6c>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = STEP_CLOCK_Pin_Pin;
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003602:	2302      	movs	r3, #2
 8003604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_CLOCK_Pin_GPIO_Port, &GPIO_InitStruct);
 8003606:	f107 030c 	add.w	r3, r7, #12
 800360a:	4619      	mov	r1, r3
 800360c:	4805      	ldr	r0, [pc, #20]	@ (8003624 <HAL_TIM_MspPostInit+0x70>)
 800360e:	f000 ff79 	bl	8004504 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003612:	bf00      	nop
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40000400 	.word	0x40000400
 8003620:	40023800 	.word	0x40023800
 8003624:	40020800 	.word	0x40020800

08003628 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <HAL_UART_MspInit+0x94>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d133      	bne.n	80036b2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <HAL_UART_MspInit+0x98>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	4a1b      	ldr	r2, [pc, #108]	@ (80036c0 <HAL_UART_MspInit+0x98>)
 8003654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003658:	6413      	str	r3, [r2, #64]	@ 0x40
 800365a:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <HAL_UART_MspInit+0x98>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_UART_MspInit+0x98>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <HAL_UART_MspInit+0x98>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6313      	str	r3, [r2, #48]	@ 0x30
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <HAL_UART_MspInit+0x98>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003682:	230c      	movs	r3, #12
 8003684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003692:	2307      	movs	r3, #7
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	4619      	mov	r1, r3
 800369c:	4809      	ldr	r0, [pc, #36]	@ (80036c4 <HAL_UART_MspInit+0x9c>)
 800369e:	f000 ff31 	bl	8004504 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	2026      	movs	r0, #38	@ 0x26
 80036a8:	f000 fe63 	bl	8004372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036ac:	2026      	movs	r0, #38	@ 0x26
 80036ae:	f000 fe7c 	bl	80043aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80036b2:	bf00      	nop
 80036b4:	3728      	adds	r7, #40	@ 0x28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40004400 	.word	0x40004400
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40020000 	.word	0x40020000

080036c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <NMI_Handler+0x4>

080036d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <HardFault_Handler+0x4>

080036d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <MemManage_Handler+0x4>

080036e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e4:	bf00      	nop
 80036e6:	e7fd      	b.n	80036e4 <BusFault_Handler+0x4>

080036e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <UsageFault_Handler+0x4>

080036f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800371e:	f000 fd09 	bl	8004134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}

08003726 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUSY_Pin_Pin);
 800372a:	2020      	movs	r0, #32
 800372c:	f001 f8b0 	bl	8004890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}

08003734 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003738:	4802      	ldr	r0, [pc, #8]	@ (8003744 <TIM3_IRQHandler+0x10>)
 800373a:	f002 fbe7 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000234 	.word	0x20000234

08003748 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800374c:	4802      	ldr	r0, [pc, #8]	@ (8003758 <USART2_IRQHandler+0x10>)
 800374e:	f003 fb2f 	bl	8006db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000027c 	.word	0x2000027c

0800375c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLAG_Pin_Pin);
 8003760:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003764:	f001 f894 	bl	8004890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}

0800376c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003774:	4a14      	ldr	r2, [pc, #80]	@ (80037c8 <_sbrk+0x5c>)
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <_sbrk+0x60>)
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003780:	4b13      	ldr	r3, [pc, #76]	@ (80037d0 <_sbrk+0x64>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <_sbrk+0x64>)
 800378a:	4a12      	ldr	r2, [pc, #72]	@ (80037d4 <_sbrk+0x68>)
 800378c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <_sbrk+0x64>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	429a      	cmp	r2, r3
 800379a:	d207      	bcs.n	80037ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800379c:	f004 fb08 	bl	8007db0 <__errno>
 80037a0:	4603      	mov	r3, r0
 80037a2:	220c      	movs	r2, #12
 80037a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	e009      	b.n	80037c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037ac:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b2:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <_sbrk+0x64>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	4a05      	ldr	r2, [pc, #20]	@ (80037d0 <_sbrk+0x64>)
 80037bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20020000 	.word	0x20020000
 80037cc:	00000400 	.word	0x00000400
 80037d0:	20000488 	.word	0x20000488
 80037d4:	20000680 	.word	0x20000680

080037d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <SystemInit+0x20>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e2:	4a05      	ldr	r2, [pc, #20]	@ (80037f8 <SystemInit+0x20>)
 80037e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fcb5 	bl	8004174 <HAL_Delay>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003816:	b672      	cpsid	i
}
 8003818:	bf00      	nop
  __disable_irq();
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003828:	b662      	cpsie	i
}
 800382a:	bf00      	nop
  __enable_irq();
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8082 	bne.w	800394e <Powerstep01_Board_GpioInit+0x116>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	4b42      	ldr	r3, [pc, #264]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a41      	ldr	r2, [pc, #260]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b3f      	ldr	r3, [pc, #252]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	4a3a      	ldr	r2, [pc, #232]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6313      	str	r3, [r2, #48]	@ 0x30
 8003876:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	4b34      	ldr	r3, [pc, #208]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6313      	str	r3, [r2, #48]	@ 0x30
 8003892:	4b31      	ldr	r3, [pc, #196]	@ (8003958 <Powerstep01_Board_GpioInit+0x120>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 800389e:	2320      	movs	r3, #32
 80038a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80038a2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038a8:	2301      	movs	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80038ac:	2301      	movs	r3, #1
 80038ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4619      	mov	r1, r3
 80038b6:	4829      	ldr	r0, [pc, #164]	@ (800395c <Powerstep01_Board_GpioInit+0x124>)
 80038b8:	f000 fe24 	bl	8004504 <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 80038bc:	2200      	movs	r2, #0
 80038be:	2106      	movs	r1, #6
 80038c0:	2017      	movs	r0, #23
 80038c2:	f000 fd56 	bl	8004372 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);    
 80038c6:	2017      	movs	r0, #23
 80038c8:	f000 fd6f 	bl	80043aa <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 80038cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80038d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d8:	2301      	movs	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80038dc:	2301      	movs	r3, #1
 80038de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	4619      	mov	r1, r3
 80038e6:	481e      	ldr	r0, [pc, #120]	@ (8003960 <Powerstep01_Board_GpioInit+0x128>)
 80038e8:	f000 fe0c 	bl	8004504 <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2105      	movs	r1, #5
 80038f0:	2028      	movs	r0, #40	@ 0x28
 80038f2:	f000 fd3e 	bl	8004372 <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 80038f6:	2028      	movs	r0, #40	@ 0x28
 80038f8:	f000 fd57 	bl	80043aa <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 80038fc:	2340      	movs	r3, #64	@ 0x40
 80038fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003900:	2301      	movs	r3, #1
 8003902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003908:	2301      	movs	r3, #1
 800390a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4619      	mov	r1, r3
 8003912:	4812      	ldr	r0, [pc, #72]	@ (800395c <Powerstep01_Board_GpioInit+0x124>)
 8003914:	f000 fdf6 	bl	8004504 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003918:	2201      	movs	r2, #1
 800391a:	2140      	movs	r1, #64	@ 0x40
 800391c:	480f      	ldr	r0, [pc, #60]	@ (800395c <Powerstep01_Board_GpioInit+0x124>)
 800391e:	f000 ff9d 	bl	800485c <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 8003922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003928:	2301      	movs	r3, #1
 800392a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003930:	2301      	movs	r3, #1
 8003932:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4619      	mov	r1, r3
 800393a:	4809      	ldr	r0, [pc, #36]	@ (8003960 <Powerstep01_Board_GpioInit+0x128>)
 800393c:	f000 fde2 	bl	8004504 <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f88e 	bl	8003a64 <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 8003948:	2001      	movs	r0, #1
 800394a:	f7ff ff57 	bl	80037fc <Powerstep01_Board_Delay>
  }
}
 800394e:	bf00      	nop
 8003950:	3728      	adds	r7, #40	@ 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	40020400 	.word	0x40020400
 8003960:	40020000 	.word	0x40020000

08003964 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08e      	sub	sp, #56	@ 0x38
 8003968:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 800396a:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 800396c:	4a1b      	ldr	r2, [pc, #108]	@ (80039dc <Powerstep01_Board_StepClockInit+0x78>)
 800396e:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 8003970:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 8003972:	223f      	movs	r2, #63	@ 0x3f
 8003974:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 8003988:	4813      	ldr	r0, [pc, #76]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 800398a:	f002 f89b 	bl	8005ac4 <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800398e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003992:	607b      	str	r3, [r7, #4]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	4619      	mov	r1, r3
 8003998:	480f      	ldr	r0, [pc, #60]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 800399a:	f002 fc69 	bl	8006270 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800399e:	2360      	movs	r3, #96	@ 0x60
 80039a0:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80039ae:	f107 031c 	add.w	r3, r7, #28
 80039b2:	2204      	movs	r2, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4808      	ldr	r0, [pc, #32]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 80039b8:	f002 fb98 	bl	80060ec <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <Powerstep01_Board_StepClockInit+0x74>)
 80039cc:	f003 f860 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
}
 80039d0:	bf00      	nop
 80039d2:	3738      	adds	r7, #56	@ 0x38
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200004e4 	.word	0x200004e4
 80039dc:	40000400 	.word	0x40000400

080039e0 <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80039ea:	f001 f88f 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80039ee:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	019b      	lsls	r3, r3, #6
 80039f4:	461a      	mov	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <Powerstep01_Board_StartStepClock+0x48>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a08:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <Powerstep01_Board_StartStepClock+0x48>)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <Powerstep01_Board_StartStepClock+0x48>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	0852      	lsrs	r2, r2, #1
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 8003a18:	2104      	movs	r1, #4
 8003a1a:	4803      	ldr	r0, [pc, #12]	@ (8003a28 <Powerstep01_Board_StartStepClock+0x48>)
 8003a1c:	f002 f8a2 	bl	8005b64 <HAL_TIM_PWM_Start_IT>
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200004e4 	.word	0x200004e4

08003a2c <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 8003a30:	2104      	movs	r1, #4
 8003a32:	4802      	ldr	r0, [pc, #8]	@ (8003a3c <Powerstep01_Board_StopStepClock+0x10>)
 8003a34:	f002 f9ac 	bl	8005d90 <HAL_TIM_PWM_Stop_IT>
}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200004e4 	.word	0x200004e4

08003a40 <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET); 
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a50:	4803      	ldr	r0, [pc, #12]	@ (8003a60 <Powerstep01_Board_ReleaseReset+0x20>)
 8003a52:	f000 ff03 	bl	800485c <HAL_GPIO_WritePin>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40020000 	.word	0x40020000

08003a64 <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET); 
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a74:	4803      	ldr	r0, [pc, #12]	@ (8003a84 <Powerstep01_Board_Reset+0x20>)
 8003a76:	f000 fef1 	bl	800485c <HAL_GPIO_WritePin>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40020000 	.word	0x40020000

08003a88 <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003a8e:	4b18      	ldr	r3, [pc, #96]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003a90:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <Powerstep01_Board_SpiInit+0x6c>)
 8003a92:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003a94:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003a96:	2220      	movs	r2, #32
 8003a98:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003a9a:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003aa0:	4b13      	ldr	r3, [pc, #76]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003aa6:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003aac:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003abe:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aca:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003acc:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003ad4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ad8:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003ada:	4805      	ldr	r0, [pc, #20]	@ (8003af0 <Powerstep01_Board_SpiInit+0x68>)
 8003adc:	f001 fce4 	bl	80054a8 <HAL_SPI_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000048c 	.word	0x2000048c
 8003af4:	40013000 	.word	0x40013000

08003af8 <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8003b06:	2200      	movs	r2, #0
 8003b08:	2140      	movs	r1, #64	@ 0x40
 8003b0a:	4816      	ldr	r0, [pc, #88]	@ (8003b64 <Powerstep01_Board_SpiWriteBytes+0x6c>)
 8003b0c:	f000 fea6 	bl	800485c <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	e016      	b.n	8003b44 <Powerstep01_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8003b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	4811      	ldr	r0, [pc, #68]	@ (8003b68 <Powerstep01_Board_SpiWriteBytes+0x70>)
 8003b24:	f001 fd49 	bl	80055ba <HAL_SPI_TransmitReceive>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <Powerstep01_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3e4      	bcc.n	8003b16 <Powerstep01_Board_SpiWriteBytes+0x1e>
 8003b4c:	e000      	b.n	8003b50 <Powerstep01_Board_SpiWriteBytes+0x58>
      break;
 8003b4e:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003b50:	2201      	movs	r2, #1
 8003b52:	2140      	movs	r1, #64	@ 0x40
 8003b54:	4803      	ldr	r0, [pc, #12]	@ (8003b64 <Powerstep01_Board_SpiWriteBytes+0x6c>)
 8003b56:	f000 fe81 	bl	800485c <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40020400 	.word	0x40020400
 8003b68:	2000048c 	.word	0x2000048c

08003b6c <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 8003b70:	2120      	movs	r1, #32
 8003b72:	4803      	ldr	r0, [pc, #12]	@ (8003b80 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 8003b74:	f000 fe5a 	bl	800482c <HAL_GPIO_ReadPin>
 8003b78:	4603      	mov	r3, r0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40020400 	.word	0x40020400

08003b84 <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8003b88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b8c:	4802      	ldr	r0, [pc, #8]	@ (8003b98 <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 8003b8e:	f000 fe4d 	bl	800482c <HAL_GPIO_ReadPin>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40020000 	.word	0x40020000

08003b9c <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	2300      	movs	r3, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	2300      	movs	r3, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <BSP_MotorControl_AttachErrorHandler+0x26>
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8003c26:	4b07      	ldr	r3, [pc, #28]	@ (8003c44 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
 8003c30:	e004      	b.n	8003c3c <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003c32:	f640 0002 	movw	r0, #2050	@ 0x802
 8003c36:	f000 f843 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	2000052c 	.word	0x2000052c

08003c48 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003c58:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003c62:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e004      	b.n	8003c78 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003c6e:	f640 0003 	movw	r0, #2051	@ 0x803
 8003c72:	f000 f825 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2000052c 	.word	0x2000052c

08003c84 <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <BSP_MotorControl_AttachBusyInterrupt+0x26>
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
 8003ca8:	e004      	b.n	8003cb4 <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003caa:	f640 0004 	movw	r0, #2052	@ 0x804
 8003cae:	f000 f807 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000052c 	.word	0x2000052c

08003cc0 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003cca:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <BSP_MotorControl_ErrorHandler+0x38>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <BSP_MotorControl_ErrorHandler+0x2e>
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <BSP_MotorControl_ErrorHandler+0x38>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <BSP_MotorControl_ErrorHandler+0x38>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003cec:	e000      	b.n	8003cf0 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003cee:	e7fe      	b.n	8003cee <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000052c 	.word	0x2000052c

08003cfc <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003d08:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <BSP_MotorControl_Init+0x3c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <BSP_MotorControl_Init+0x2a>
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <BSP_MotorControl_Init+0x3c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003d1a:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <BSP_MotorControl_Init+0x3c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	4798      	blx	r3
 8003d24:	e004      	b.n	8003d30 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8003d26:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d2a:	f7ff ffc9 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	2000052c 	.word	0x2000052c

08003d3c <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <BSP_MotorControl_GetPosition+0x44>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <BSP_MotorControl_GetPosition+0x30>
 8003d52:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <BSP_MotorControl_GetPosition+0x44>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 8003d5c:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <BSP_MotorControl_GetPosition+0x44>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d62:	79fa      	ldrb	r2, [r7, #7]
 8003d64:	4610      	mov	r0, r2
 8003d66:	4798      	blx	r3
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	e003      	b.n	8003d74 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 8003d6c:	f640 000e 	movw	r0, #2062	@ 0x80e
 8003d70:	f7ff ffa6 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2000052c 	.word	0x2000052c

08003d84 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003d92:	4b0e      	ldr	r3, [pc, #56]	@ (8003dcc <BSP_MotorControl_CmdGetStatus+0x48>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00f      	beq.n	8003dba <BSP_MotorControl_CmdGetStatus+0x36>
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <BSP_MotorControl_CmdGetStatus+0x48>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003da6:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <BSP_MotorControl_CmdGetStatus+0x48>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	79fa      	ldrb	r2, [r7, #7]
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
 8003db4:	4603      	mov	r3, r0
 8003db6:	81fb      	strh	r3, [r7, #14]
 8003db8:	e003      	b.n	8003dc2 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003dba:	f640 0022 	movw	r0, #2082	@ 0x822
 8003dbe:	f7ff ff7f 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000052c 	.word	0x2000052c

08003dd0 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <BSP_MotorControl_CheckBusyHw+0x2e>
 8003de2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8003dee:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003df6:	4798      	blx	r3
 8003df8:	4603      	mov	r3, r0
 8003dfa:	71fb      	strb	r3, [r7, #7]
 8003dfc:	e003      	b.n	8003e06 <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 8003dfe:	f640 002b 	movw	r0, #2091	@ 0x82b
 8003e02:	f7ff ff5d 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 8003e06:	79fb      	ldrb	r3, [r7, #7]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	2000052c 	.word	0x2000052c

08003e14 <BSP_MotorControl_CmdResetPos>:
 * @brief Issues Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdResetPos(uint8_t deviceId)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdResetPos != 0))
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <BSP_MotorControl_CmdResetPos+0x40>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <BSP_MotorControl_CmdResetPos+0x2e>
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <BSP_MotorControl_CmdResetPos+0x40>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <BSP_MotorControl_CmdResetPos+0x2e>
  {
    motorDrvHandle->CmdResetPos(deviceId);
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <BSP_MotorControl_CmdResetPos+0x40>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003e3a:	79fa      	ldrb	r2, [r7, #7]
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4798      	blx	r3
 8003e40:	e004      	b.n	8003e4c <BSP_MotorControl_CmdResetPos+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(49);
 8003e42:	f640 0031 	movw	r0, #2097	@ 0x831
 8003e46:	f7ff ff3b 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	2000052c 	.word	0x2000052c

08003e58 <BSP_MotorControl_SendQueuedCommands>:
 * @brief Sends commands stored in the queue by previously
 * BSP_MotorControl_QueueCommands
 * @retval None
 *********************************************************/
void BSP_MotorControl_SendQueuedCommands(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SendQueuedCommands != 0))
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <BSP_MotorControl_SendQueuedCommands+0x34>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <BSP_MotorControl_SendQueuedCommands+0x24>
 8003e64:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <BSP_MotorControl_SendQueuedCommands+0x34>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <BSP_MotorControl_SendQueuedCommands+0x24>
  {
    motorDrvHandle->SendQueuedCommands();
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <BSP_MotorControl_SendQueuedCommands+0x34>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e78:	4798      	blx	r3
 8003e7a:	e004      	b.n	8003e86 <BSP_MotorControl_SendQueuedCommands+0x2e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(57);
 8003e7c:	f640 0039 	movw	r0, #2105	@ 0x839
 8003e80:	f7ff ff1e 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	2000052c 	.word	0x2000052c

08003e90 <BSP_MotorControl_QueueCommands>:
 * except SET_PARAM, GET_PARAM, GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void BSP_MotorControl_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	603a      	str	r2, [r7, #0]
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->QueueCommands != 0))
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <BSP_MotorControl_QueueCommands+0x48>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00e      	beq.n	8003ec6 <BSP_MotorControl_QueueCommands+0x36>
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <BSP_MotorControl_QueueCommands+0x48>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <BSP_MotorControl_QueueCommands+0x36>
  {
    motorDrvHandle->QueueCommands(deviceId, command, value);
 8003eb4:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <BSP_MotorControl_QueueCommands+0x48>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ebc:	79b9      	ldrb	r1, [r7, #6]
 8003ebe:	79f8      	ldrb	r0, [r7, #7]
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	4798      	blx	r3
 8003ec4:	e004      	b.n	8003ed0 <BSP_MotorControl_QueueCommands+0x40>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(58);
 8003ec6:	f640 003a 	movw	r0, #2106	@ 0x83a
 8003eca:	f7ff fef9 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	2000052c 	.word	0x2000052c

08003edc <BSP_MotorControl_CmdSoftStop>:
 * @brief Issues Soft Stop command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdSoftStop(uint8_t deviceId)
{	
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdSoftStop != 0))
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <BSP_MotorControl_CmdSoftStop+0x40>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <BSP_MotorControl_CmdSoftStop+0x2e>
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <BSP_MotorControl_CmdSoftStop+0x40>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <BSP_MotorControl_CmdSoftStop+0x2e>
  {
    motorDrvHandle->CmdSoftStop(deviceId);
 8003efa:	4b08      	ldr	r3, [pc, #32]	@ (8003f1c <BSP_MotorControl_CmdSoftStop+0x40>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003f02:	79fa      	ldrb	r2, [r7, #7]
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
 8003f08:	e004      	b.n	8003f14 <BSP_MotorControl_CmdSoftStop+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(62);
 8003f0a:	f640 003e 	movw	r0, #2110	@ 0x83e
 8003f0e:	f7ff fed7 	bl	8003cc0 <BSP_MotorControl_ErrorHandler>
  }    
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000052c 	.word	0x2000052c

08003f20 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	460a      	mov	r2, r1
 8003f2a:	80fb      	strh	r3, [r7, #6]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003f30:	4a40      	ldr	r2, [pc, #256]	@ (8004034 <BSP_MotorControl_SetNbDevices+0x114>)
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	f641 124a 	movw	r2, #6474	@ 0x194a
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d105      	bne.n	8003f50 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003f44:	f7ff fe2a 	bl	8003b9c <L6474_GetMotorHandle>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e055      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003f56:	f7fd fc9f 	bl	8001898 <Powerstep01_GetMotorHandle>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a36      	ldr	r2, [pc, #216]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e04c      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	f641 023e 	movw	r2, #6206	@ 0x183e
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d105      	bne.n	8003f78 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003f6c:	f7ff fe2e 	bl	8003bcc <L6206_GetMotorHandle>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4a31      	ldr	r2, [pc, #196]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e041      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 8003f7e:	d105      	bne.n	8003f8c <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003f80:	f7ff fe2c 	bl	8003bdc <L6208_GetMotorHandle>
 8003f84:	4603      	mov	r3, r0
 8003f86:	4a2c      	ldr	r2, [pc, #176]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e037      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	2bdc      	cmp	r3, #220	@ 0xdc
 8003f90:	d105      	bne.n	8003f9e <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8003f92:	f7ff fe2b 	bl	8003bec <Stspin220_GetMotorHandle>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e02e      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	f641 1246 	movw	r2, #6470	@ 0x1946
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <BSP_MotorControl_SetNbDevices+0x92>
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	f641 1248 	movw	r2, #6472	@ 0x1948
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d105      	bne.n	8003fbe <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8003fb2:	f7ff fdfb 	bl	8003bac <l647x_GetMotorHandle>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e01e      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	f641 1250 	movw	r2, #6480	@ 0x1950
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <BSP_MotorControl_SetNbDevices+0xb2>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	f641 1252 	movw	r2, #6482	@ 0x1952
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d105      	bne.n	8003fde <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8003fd2:	f7ff fdf3 	bl	8003bbc <l648x_GetMotorHandle>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4a17      	ldr	r2, [pc, #92]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	e00e      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2bf0      	cmp	r3, #240	@ 0xf0
 8003fe2:	d002      	beq.n	8003fea <BSP_MotorControl_SetNbDevices+0xca>
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	2bfa      	cmp	r3, #250	@ 0xfa
 8003fe8:	d105      	bne.n	8003ff6 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003fea:	f7ff fe07 	bl	8003bfc <Stspin240_250_GetMotorHandle>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4a11      	ldr	r2, [pc, #68]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e002      	b.n	8003ffc <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d011      	beq.n	8004028 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004004:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004010:	797b      	ldrb	r3, [r7, #5]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <BSP_MotorControl_SetNbDevices+0x118>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800401e:	797a      	ldrb	r2, [r7, #5]
 8004020:	4610      	mov	r0, r2
 8004022:	4798      	blx	r3
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000530 	.word	0x20000530
 8004038:	2000052c 	.word	0x2000052c

0800403c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800403c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004074 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004040:	f7ff fbca 	bl	80037d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004044:	480c      	ldr	r0, [pc, #48]	@ (8004078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004046:	490d      	ldr	r1, [pc, #52]	@ (800407c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004048:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800404a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800404c:	e002      	b.n	8004054 <LoopCopyDataInit>

0800404e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800404e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004052:	3304      	adds	r3, #4

08004054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004058:	d3f9      	bcc.n	800404e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405a:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800405c:	4c0a      	ldr	r4, [pc, #40]	@ (8004088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004060:	e001      	b.n	8004066 <LoopFillZerobss>

08004062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004064:	3204      	adds	r2, #4

08004066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004068:	d3fb      	bcc.n	8004062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800406a:	f003 fea7 	bl	8007dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800406e:	f7fc fabd 	bl	80005ec <main>
  bx  lr    
 8004072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800407c:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8004080:	080093cc 	.word	0x080093cc
  ldr r2, =_sbss
 8004084:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8004088:	20000680 	.word	0x20000680

0800408c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800408c:	e7fe      	b.n	800408c <ADC_IRQHandler>
	...

08004090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004094:	4b0e      	ldr	r3, [pc, #56]	@ (80040d0 <HAL_Init+0x40>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0d      	ldr	r2, [pc, #52]	@ (80040d0 <HAL_Init+0x40>)
 800409a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800409e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_Init+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	@ (80040d0 <HAL_Init+0x40>)
 80040a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ac:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <HAL_Init+0x40>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <HAL_Init+0x40>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b8:	2003      	movs	r0, #3
 80040ba:	f000 f94f 	bl	800435c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040be:	2000      	movs	r0, #0
 80040c0:	f000 f808 	bl	80040d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c4:	f7ff f9de 	bl	8003484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023c00 	.word	0x40023c00

080040d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <HAL_InitTick+0x54>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_InitTick+0x58>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f967 	bl	80043c6 <HAL_SYSTICK_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e00e      	b.n	8004120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d80a      	bhi.n	800411e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004108:	2200      	movs	r2, #0
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f000 f92f 	bl	8004372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004114:	4a06      	ldr	r2, [pc, #24]	@ (8004130 <HAL_InitTick+0x5c>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000164 	.word	0x20000164
 800412c:	2000016c 	.word	0x2000016c
 8004130:	20000168 	.word	0x20000168

08004134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <HAL_IncTick+0x20>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_IncTick+0x24>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4413      	add	r3, r2
 8004144:	4a04      	ldr	r2, [pc, #16]	@ (8004158 <HAL_IncTick+0x24>)
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000016c 	.word	0x2000016c
 8004158:	20000534 	.word	0x20000534

0800415c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return uwTick;
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <HAL_GetTick+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000534 	.word	0x20000534

08004174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff ffee 	bl	800415c <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d005      	beq.n	800419a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800418e:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <HAL_Delay+0x44>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800419a:	bf00      	nop
 800419c:	f7ff ffde 	bl	800415c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d8f7      	bhi.n	800419c <HAL_Delay+0x28>
  {
  }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000016c 	.word	0x2000016c

080041bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ee:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	60d3      	str	r3, [r2, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004208:	4b04      	ldr	r3, [pc, #16]	@ (800421c <__NVIC_GetPriorityGrouping+0x18>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0307 	and.w	r3, r3, #7
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db0b      	blt.n	800424a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4907      	ldr	r1, [pc, #28]	@ (8004258 <__NVIC_EnableIRQ+0x38>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2001      	movs	r0, #1
 8004242:	fa00 f202 	lsl.w	r2, r0, r2
 8004246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	e000e100 	.word	0xe000e100

0800425c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426c:	2b00      	cmp	r3, #0
 800426e:	db0a      	blt.n	8004286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b2da      	uxtb	r2, r3
 8004274:	490c      	ldr	r1, [pc, #48]	@ (80042a8 <__NVIC_SetPriority+0x4c>)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	0112      	lsls	r2, r2, #4
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	440b      	add	r3, r1
 8004280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004284:	e00a      	b.n	800429c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4908      	ldr	r1, [pc, #32]	@ (80042ac <__NVIC_SetPriority+0x50>)
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	3b04      	subs	r3, #4
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	440b      	add	r3, r1
 800429a:	761a      	strb	r2, [r3, #24]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000e100 	.word	0xe000e100
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	@ 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f1c3 0307 	rsb	r3, r3, #7
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	bf28      	it	cs
 80042ce:	2304      	movcs	r3, #4
 80042d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3304      	adds	r3, #4
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d902      	bls.n	80042e0 <NVIC_EncodePriority+0x30>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3b03      	subs	r3, #3
 80042de:	e000      	b.n	80042e2 <NVIC_EncodePriority+0x32>
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e4:	f04f 32ff 	mov.w	r2, #4294967295
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	401a      	ands	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f8:	f04f 31ff 	mov.w	r1, #4294967295
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	43d9      	mvns	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004308:	4313      	orrs	r3, r2
         );
}
 800430a:	4618      	mov	r0, r3
 800430c:	3724      	adds	r7, #36	@ 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004328:	d301      	bcc.n	800432e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432a:	2301      	movs	r3, #1
 800432c:	e00f      	b.n	800434e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800432e:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <SysTick_Config+0x40>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004336:	210f      	movs	r1, #15
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	f7ff ff8e 	bl	800425c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <SysTick_Config+0x40>)
 8004342:	2200      	movs	r2, #0
 8004344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004346:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <SysTick_Config+0x40>)
 8004348:	2207      	movs	r2, #7
 800434a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	e000e010 	.word	0xe000e010

0800435c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff ff29 	bl	80041bc <__NVIC_SetPriorityGrouping>
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	4603      	mov	r3, r0
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004384:	f7ff ff3e 	bl	8004204 <__NVIC_GetPriorityGrouping>
 8004388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	6978      	ldr	r0, [r7, #20]
 8004390:	f7ff ff8e 	bl	80042b0 <NVIC_EncodePriority>
 8004394:	4602      	mov	r2, r0
 8004396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ff5d 	bl	800425c <__NVIC_SetPriority>
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	4603      	mov	r3, r0
 80043b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff31 	bl	8004220 <__NVIC_EnableIRQ>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ffa2 	bl	8004318 <SysTick_Config>
 80043d4:	4603      	mov	r3, r0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7ff feb6 	bl	800415c <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d008      	beq.n	8004410 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2280      	movs	r2, #128	@ 0x80
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e052      	b.n	80044b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0216 	bic.w	r2, r2, #22
 800441e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800442e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d103      	bne.n	8004440 <HAL_DMA_Abort+0x62>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0208 	bic.w	r2, r2, #8
 800444e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004460:	e013      	b.n	800448a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004462:	f7ff fe7b 	bl	800415c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b05      	cmp	r3, #5
 800446e:	d90c      	bls.n	800448a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2203      	movs	r2, #3
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e015      	b.n	80044b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e4      	bne.n	8004462 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	223f      	movs	r2, #63	@ 0x3f
 800449e:	409a      	lsls	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d004      	beq.n	80044dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2280      	movs	r2, #128	@ 0x80
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e00c      	b.n	80044f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2205      	movs	r2, #5
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	@ 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	e165      	b.n	80047ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	f040 8154 	bne.w	80047e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d005      	beq.n	8004556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004552:	2b02      	cmp	r3, #2
 8004554:	d130      	bne.n	80045b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2203      	movs	r2, #3
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800458c:	2201      	movs	r2, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 0201 	and.w	r2, r3, #1
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d017      	beq.n	80045f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d123      	bne.n	8004648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	08da      	lsrs	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3208      	adds	r2, #8
 8004608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	220f      	movs	r2, #15
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	69b9      	ldr	r1, [r7, #24]
 8004644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0203 	and.w	r2, r3, #3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80ae 	beq.w	80047e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b5d      	ldr	r3, [pc, #372]	@ (8004804 <HAL_GPIO_Init+0x300>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	4a5c      	ldr	r2, [pc, #368]	@ (8004804 <HAL_GPIO_Init+0x300>)
 8004694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004698:	6453      	str	r3, [r2, #68]	@ 0x44
 800469a:	4b5a      	ldr	r3, [pc, #360]	@ (8004804 <HAL_GPIO_Init+0x300>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046a6:	4a58      	ldr	r2, [pc, #352]	@ (8004808 <HAL_GPIO_Init+0x304>)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	220f      	movs	r2, #15
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4f      	ldr	r2, [pc, #316]	@ (800480c <HAL_GPIO_Init+0x308>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d025      	beq.n	800471e <HAL_GPIO_Init+0x21a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004810 <HAL_GPIO_Init+0x30c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01f      	beq.n	800471a <HAL_GPIO_Init+0x216>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004814 <HAL_GPIO_Init+0x310>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d019      	beq.n	8004716 <HAL_GPIO_Init+0x212>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a4c      	ldr	r2, [pc, #304]	@ (8004818 <HAL_GPIO_Init+0x314>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_GPIO_Init+0x20e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a4b      	ldr	r2, [pc, #300]	@ (800481c <HAL_GPIO_Init+0x318>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00d      	beq.n	800470e <HAL_GPIO_Init+0x20a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004820 <HAL_GPIO_Init+0x31c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <HAL_GPIO_Init+0x206>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a49      	ldr	r2, [pc, #292]	@ (8004824 <HAL_GPIO_Init+0x320>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <HAL_GPIO_Init+0x202>
 8004702:	2306      	movs	r3, #6
 8004704:	e00c      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 8004706:	2307      	movs	r3, #7
 8004708:	e00a      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 800470a:	2305      	movs	r3, #5
 800470c:	e008      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 800470e:	2304      	movs	r3, #4
 8004710:	e006      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 8004712:	2303      	movs	r3, #3
 8004714:	e004      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 8004716:	2302      	movs	r3, #2
 8004718:	e002      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_GPIO_Init+0x21c>
 800471e:	2300      	movs	r3, #0
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	f002 0203 	and.w	r2, r2, #3
 8004726:	0092      	lsls	r2, r2, #2
 8004728:	4093      	lsls	r3, r2
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004730:	4935      	ldr	r1, [pc, #212]	@ (8004808 <HAL_GPIO_Init+0x304>)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	3302      	adds	r3, #2
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800473e:	4b3a      	ldr	r3, [pc, #232]	@ (8004828 <HAL_GPIO_Init+0x324>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004762:	4a31      	ldr	r2, [pc, #196]	@ (8004828 <HAL_GPIO_Init+0x324>)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004768:	4b2f      	ldr	r3, [pc, #188]	@ (8004828 <HAL_GPIO_Init+0x324>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800478c:	4a26      	ldr	r2, [pc, #152]	@ (8004828 <HAL_GPIO_Init+0x324>)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004792:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <HAL_GPIO_Init+0x324>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004828 <HAL_GPIO_Init+0x324>)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <HAL_GPIO_Init+0x324>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047e0:	4a11      	ldr	r2, [pc, #68]	@ (8004828 <HAL_GPIO_Init+0x324>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	3301      	adds	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	f67f ae96 	bls.w	8004520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	3724      	adds	r7, #36	@ 0x24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	40013800 	.word	0x40013800
 800480c:	40020000 	.word	0x40020000
 8004810:	40020400 	.word	0x40020400
 8004814:	40020800 	.word	0x40020800
 8004818:	40020c00 	.word	0x40020c00
 800481c:	40021000 	.word	0x40021000
 8004820:	40021400 	.word	0x40021400
 8004824:	40021800 	.word	0x40021800
 8004828:	40013c00 	.word	0x40013c00

0800482c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	e001      	b.n	800484e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800486c:	787b      	ldrb	r3, [r7, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004878:	e003      	b.n	8004882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	041a      	lsls	r2, r3, #16
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	619a      	str	r2, [r3, #24]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800489a:	4b08      	ldr	r3, [pc, #32]	@ (80048bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048a6:	4a05      	ldr	r2, [pc, #20]	@ (80048bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f806 	bl	80048c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40013c00 	.word	0x40013c00

080048c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0cc      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b68      	ldr	r3, [pc, #416]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d90c      	bls.n	8004914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b65      	ldr	r3, [pc, #404]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b8      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a58      	ldr	r2, [pc, #352]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004944:	4b53      	ldr	r3, [pc, #332]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a52      	ldr	r2, [pc, #328]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800494e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b50      	ldr	r3, [pc, #320]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494d      	ldr	r1, [pc, #308]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b47      	ldr	r3, [pc, #284]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d119      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e07f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d003      	beq.n	8004996 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	2b03      	cmp	r3, #3
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004996:	4b3f      	ldr	r3, [pc, #252]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e06f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e067      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4b37      	ldr	r3, [pc, #220]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4934      	ldr	r1, [pc, #208]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c8:	f7ff fbc8 	bl	800415c <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7ff fbc4 	bl	800415c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e04f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 020c 	and.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d1eb      	bne.n	80049d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d20c      	bcs.n	8004a20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <HAL_RCC_ClockConfig+0x1b8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e032      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4916      	ldr	r1, [pc, #88]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4a:	4b12      	ldr	r3, [pc, #72]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	490e      	ldr	r1, [pc, #56]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a5e:	f000 f855 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a09      	ldr	r2, [pc, #36]	@ (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a7a:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fb28 	bl	80040d4 <HAL_InitTick>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08009254 	.word	0x08009254
 8004a9c:	20000164 	.word	0x20000164
 8004aa0:	20000168 	.word	0x20000168

08004aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	@ (8004ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000164 	.word	0x20000164

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ac0:	f7ff fff0 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0a9b      	lsrs	r3, r3, #10
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4903      	ldr	r1, [pc, #12]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	08009264 	.word	0x08009264

08004ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ae8:	f7ff ffdc 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0b5b      	lsrs	r3, r3, #13
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4903      	ldr	r1, [pc, #12]	@ (8004b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	08009264 	.word	0x08009264

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b10:	b0ae      	sub	sp, #184	@ 0xb8
 8004b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b32:	4bcb      	ldr	r3, [pc, #812]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	f200 8206 	bhi.w	8004f4c <HAL_RCC_GetSysClockFreq+0x440>
 8004b40:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004f4d 	.word	0x08004f4d
 8004b50:	08004f4d 	.word	0x08004f4d
 8004b54:	08004f4d 	.word	0x08004f4d
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004f4d 	.word	0x08004f4d
 8004b60:	08004f4d 	.word	0x08004f4d
 8004b64:	08004f4d 	.word	0x08004f4d
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004f4d 	.word	0x08004f4d
 8004b70:	08004f4d 	.word	0x08004f4d
 8004b74:	08004f4d 	.word	0x08004f4d
 8004b78:	08004d7d 	.word	0x08004d7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b82:	e1e7      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b84:	4bb8      	ldr	r3, [pc, #736]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b8a:	e1e3      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b8c:	4bb4      	ldr	r3, [pc, #720]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b98:	4bb1      	ldr	r3, [pc, #708]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d071      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba4:	4bae      	ldr	r3, [pc, #696]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bb0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bca:	4622      	mov	r2, r4
 8004bcc:	462b      	mov	r3, r5
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	0159      	lsls	r1, r3, #5
 8004bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bdc:	0150      	lsls	r0, r2, #5
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4621      	mov	r1, r4
 8004be4:	1a51      	subs	r1, r2, r1
 8004be6:	6439      	str	r1, [r7, #64]	@ 0x40
 8004be8:	4629      	mov	r1, r5
 8004bea:	eb63 0301 	sbc.w	r3, r3, r1
 8004bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	018b      	lsls	r3, r1, #6
 8004c00:	4641      	mov	r1, r8
 8004c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c06:	4641      	mov	r1, r8
 8004c08:	018a      	lsls	r2, r1, #6
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	1a51      	subs	r1, r2, r1
 8004c0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c10:	4649      	mov	r1, r9
 8004c12:	eb63 0301 	sbc.w	r3, r3, r1
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c24:	4649      	mov	r1, r9
 8004c26:	00cb      	lsls	r3, r1, #3
 8004c28:	4641      	mov	r1, r8
 8004c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2e:	4641      	mov	r1, r8
 8004c30:	00ca      	lsls	r2, r1, #3
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	4622      	mov	r2, r4
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3e:	462b      	mov	r3, r5
 8004c40:	460a      	mov	r2, r1
 8004c42:	eb42 0303 	adc.w	r3, r2, r3
 8004c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c54:	4629      	mov	r1, r5
 8004c56:	024b      	lsls	r3, r1, #9
 8004c58:	4621      	mov	r1, r4
 8004c5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c5e:	4621      	mov	r1, r4
 8004c60:	024a      	lsls	r2, r1, #9
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c78:	f7fb fb22 	bl	80002c0 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4613      	mov	r3, r2
 8004c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c86:	e067      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c88:	4b75      	ldr	r3, [pc, #468]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ca6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	f04f 0000 	mov.w	r0, #0
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	0159      	lsls	r1, r3, #5
 8004cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cbc:	0150      	lsls	r0, r2, #5
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	1a51      	subs	r1, r2, r1
 8004cc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cc8:	4629      	mov	r1, r5
 8004cca:	eb63 0301 	sbc.w	r3, r3, r1
 8004cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004cdc:	4649      	mov	r1, r9
 8004cde:	018b      	lsls	r3, r1, #6
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ce6:	4641      	mov	r1, r8
 8004ce8:	018a      	lsls	r2, r1, #6
 8004cea:	4641      	mov	r1, r8
 8004cec:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d0a:	4692      	mov	sl, r2
 8004d0c:	469b      	mov	fp, r3
 8004d0e:	4623      	mov	r3, r4
 8004d10:	eb1a 0303 	adds.w	r3, sl, r3
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	462b      	mov	r3, r5
 8004d18:	eb4b 0303 	adc.w	r3, fp, r3
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	028b      	lsls	r3, r1, #10
 8004d2e:	4621      	mov	r1, r4
 8004d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d34:	4621      	mov	r1, r4
 8004d36:	028a      	lsls	r2, r1, #10
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d40:	2200      	movs	r2, #0
 8004d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d44:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d4a:	f7fb fab9 	bl	80002c0 <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4613      	mov	r3, r2
 8004d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d58:	4b41      	ldr	r3, [pc, #260]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d7a:	e0eb      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d7c:	4b38      	ldr	r3, [pc, #224]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d88:	4b35      	ldr	r3, [pc, #212]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d06b      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d94:	4b32      	ldr	r3, [pc, #200]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004da8:	2300      	movs	r3, #0
 8004daa:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	0159      	lsls	r1, r3, #5
 8004dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc2:	0150      	lsls	r0, r2, #5
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4621      	mov	r1, r4
 8004dca:	1a51      	subs	r1, r2, r1
 8004dcc:	61b9      	str	r1, [r7, #24]
 8004dce:	4629      	mov	r1, r5
 8004dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004de2:	4659      	mov	r1, fp
 8004de4:	018b      	lsls	r3, r1, #6
 8004de6:	4651      	mov	r1, sl
 8004de8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dec:	4651      	mov	r1, sl
 8004dee:	018a      	lsls	r2, r1, #6
 8004df0:	4651      	mov	r1, sl
 8004df2:	ebb2 0801 	subs.w	r8, r2, r1
 8004df6:	4659      	mov	r1, fp
 8004df8:	eb63 0901 	sbc.w	r9, r3, r1
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e10:	4690      	mov	r8, r2
 8004e12:	4699      	mov	r9, r3
 8004e14:	4623      	mov	r3, r4
 8004e16:	eb18 0303 	adds.w	r3, r8, r3
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	eb49 0303 	adc.w	r3, r9, r3
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e30:	4629      	mov	r1, r5
 8004e32:	024b      	lsls	r3, r1, #9
 8004e34:	4621      	mov	r1, r4
 8004e36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	024a      	lsls	r2, r1, #9
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e46:	2200      	movs	r2, #0
 8004e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e4a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e50:	f7fb fa36 	bl	80002c0 <__aeabi_uldivmod>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4613      	mov	r3, r2
 8004e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e5e:	e065      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x420>
 8004e60:	40023800 	.word	0x40023800
 8004e64:	00f42400 	.word	0x00f42400
 8004e68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	2200      	movs	r2, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	4611      	mov	r1, r2
 8004e78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e7e:	2300      	movs	r3, #0
 8004e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004e86:	4642      	mov	r2, r8
 8004e88:	464b      	mov	r3, r9
 8004e8a:	f04f 0000 	mov.w	r0, #0
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	0159      	lsls	r1, r3, #5
 8004e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e98:	0150      	lsls	r0, r2, #5
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	1a51      	subs	r1, r2, r1
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004eb8:	4659      	mov	r1, fp
 8004eba:	018b      	lsls	r3, r1, #6
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ec2:	4651      	mov	r1, sl
 8004ec4:	018a      	lsls	r2, r1, #6
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	1a54      	subs	r4, r2, r1
 8004eca:	4659      	mov	r1, fp
 8004ecc:	eb63 0501 	sbc.w	r5, r3, r1
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	00eb      	lsls	r3, r5, #3
 8004eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ede:	00e2      	lsls	r2, r4, #3
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	461d      	mov	r5, r3
 8004ee4:	4643      	mov	r3, r8
 8004ee6:	18e3      	adds	r3, r4, r3
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	464b      	mov	r3, r9
 8004eec:	eb45 0303 	adc.w	r3, r5, r3
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004efe:	4629      	mov	r1, r5
 8004f00:	028b      	lsls	r3, r1, #10
 8004f02:	4621      	mov	r1, r4
 8004f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f08:	4621      	mov	r1, r4
 8004f0a:	028a      	lsls	r2, r1, #10
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f14:	2200      	movs	r2, #0
 8004f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f18:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f1e:	f7fb f9cf 	bl	80002c0 <__aeabi_uldivmod>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4613      	mov	r3, r2
 8004f28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0f1b      	lsrs	r3, r3, #28
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	37b8      	adds	r7, #184	@ 0xb8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800
 8004f68:	00f42400 	.word	0x00f42400

08004f6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e28d      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8083 	beq.w	8005092 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f8c:	4b94      	ldr	r3, [pc, #592]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d019      	beq.n	8004fcc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f98:	4b91      	ldr	r3, [pc, #580]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fb0:	d00c      	beq.n	8004fcc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d112      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fbe:	4b88      	ldr	r3, [pc, #544]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fca:	d10b      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	4b84      	ldr	r3, [pc, #528]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05b      	beq.n	8005090 <HAL_RCC_OscConfig+0x124>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d157      	bne.n	8005090 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e25a      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x90>
 8004fee:	4b7c      	ldr	r3, [pc, #496]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7b      	ldr	r2, [pc, #492]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e01d      	b.n	8005038 <HAL_RCC_OscConfig+0xcc>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0xb4>
 8005006:	4b76      	ldr	r3, [pc, #472]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a75      	ldr	r2, [pc, #468]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 800500c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b73      	ldr	r3, [pc, #460]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a72      	ldr	r2, [pc, #456]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0xcc>
 8005020:	4b6f      	ldr	r3, [pc, #444]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6e      	ldr	r2, [pc, #440]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b6c      	ldr	r3, [pc, #432]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a6b      	ldr	r2, [pc, #428]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7ff f88c 	bl	800415c <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7ff f888 	bl	800415c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e21f      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b61      	ldr	r3, [pc, #388]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xdc>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7ff f878 	bl	800415c <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7ff f874 	bl	800415c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	@ 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e20b      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	4b57      	ldr	r3, [pc, #348]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x104>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d06f      	beq.n	800517e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800509e:	4b50      	ldr	r3, [pc, #320]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80050aa:	4b4d      	ldr	r3, [pc, #308]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d105      	bne.n	80050c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80050b6:	4b4a      	ldr	r3, [pc, #296]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c2:	4b47      	ldr	r3, [pc, #284]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	d11c      	bne.n	8005108 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	4b44      	ldr	r3, [pc, #272]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d116      	bne.n	8005108 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050da:	4b41      	ldr	r3, [pc, #260]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_RCC_OscConfig+0x186>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d001      	beq.n	80050f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e1d3      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f2:	4b3b      	ldr	r3, [pc, #236]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4937      	ldr	r1, [pc, #220]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005106:	e03a      	b.n	800517e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d020      	beq.n	8005152 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005110:	4b34      	ldr	r3, [pc, #208]	@ (80051e4 <HAL_RCC_OscConfig+0x278>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7ff f821 	bl	800415c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511e:	f7ff f81d 	bl	800415c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e1b4      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005130:	4b2b      	ldr	r3, [pc, #172]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0f0      	beq.n	800511e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513c:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4925      	ldr	r1, [pc, #148]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]
 8005150:	e015      	b.n	800517e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005152:	4b24      	ldr	r3, [pc, #144]	@ (80051e4 <HAL_RCC_OscConfig+0x278>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7ff f800 	bl	800415c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005160:	f7fe fffc 	bl	800415c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e193      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005172:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d036      	beq.n	80051f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d016      	beq.n	80051c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005192:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <HAL_RCC_OscConfig+0x27c>)
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fe ffe0 	bl	800415c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a0:	f7fe ffdc 	bl	800415c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e173      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b2:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <HAL_RCC_OscConfig+0x274>)
 80051b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x234>
 80051be:	e01b      	b.n	80051f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c0:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c6:	f7fe ffc9 	bl	800415c <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	e00e      	b.n	80051ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ce:	f7fe ffc5 	bl	800415c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d907      	bls.n	80051ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e15c      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
 80051e0:	40023800 	.word	0x40023800
 80051e4:	42470000 	.word	0x42470000
 80051e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ea      	bne.n	80051ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8097 	beq.w	8005334 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520a:	4b83      	ldr	r3, [pc, #524]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	4b7f      	ldr	r3, [pc, #508]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	4a7e      	ldr	r2, [pc, #504]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005224:	6413      	str	r3, [r2, #64]	@ 0x40
 8005226:	4b7c      	ldr	r3, [pc, #496]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b79      	ldr	r3, [pc, #484]	@ (800541c <HAL_RCC_OscConfig+0x4b0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d118      	bne.n	8005274 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005242:	4b76      	ldr	r3, [pc, #472]	@ (800541c <HAL_RCC_OscConfig+0x4b0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a75      	ldr	r2, [pc, #468]	@ (800541c <HAL_RCC_OscConfig+0x4b0>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524e:	f7fe ff85 	bl	800415c <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fe ff81 	bl	800415c <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e118      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005268:	4b6c      	ldr	r3, [pc, #432]	@ (800541c <HAL_RCC_OscConfig+0x4b0>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d106      	bne.n	800528a <HAL_RCC_OscConfig+0x31e>
 800527c:	4b66      	ldr	r3, [pc, #408]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	4a65      	ldr	r2, [pc, #404]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6713      	str	r3, [r2, #112]	@ 0x70
 8005288:	e01c      	b.n	80052c4 <HAL_RCC_OscConfig+0x358>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b05      	cmp	r3, #5
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0x340>
 8005292:	4b61      	ldr	r3, [pc, #388]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005296:	4a60      	ldr	r2, [pc, #384]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	f043 0304 	orr.w	r3, r3, #4
 800529c:	6713      	str	r3, [r2, #112]	@ 0x70
 800529e:	4b5e      	ldr	r3, [pc, #376]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052aa:	e00b      	b.n	80052c4 <HAL_RCC_OscConfig+0x358>
 80052ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	4a59      	ldr	r2, [pc, #356]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b8:	4b57      	ldr	r3, [pc, #348]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052bc:	4a56      	ldr	r2, [pc, #344]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052be:	f023 0304 	bic.w	r3, r3, #4
 80052c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d015      	beq.n	80052f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052cc:	f7fe ff46 	bl	800415c <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d2:	e00a      	b.n	80052ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d4:	f7fe ff42 	bl	800415c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e0d7      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ee      	beq.n	80052d4 <HAL_RCC_OscConfig+0x368>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fe ff30 	bl	800415c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fe ff2c 	bl	800415c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e0c1      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005316:	4b40      	ldr	r3, [pc, #256]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ee      	bne.n	8005300 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005328:	4b3b      	ldr	r3, [pc, #236]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	4a3a      	ldr	r2, [pc, #232]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 800532e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005332:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80ad 	beq.w	8005498 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800533e:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b08      	cmp	r3, #8
 8005348:	d060      	beq.n	800540c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d145      	bne.n	80053de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005352:	4b33      	ldr	r3, [pc, #204]	@ (8005420 <HAL_RCC_OscConfig+0x4b4>)
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fe ff00 	bl	800415c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005360:	f7fe fefc 	bl	800415c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e093      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	3b01      	subs	r3, #1
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	071b      	lsls	r3, r3, #28
 80053aa:	491b      	ldr	r1, [pc, #108]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <HAL_RCC_OscConfig+0x4b4>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fe fed1 	bl	800415c <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053be:	f7fe fecd 	bl	800415c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e064      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d0:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x452>
 80053dc:	e05c      	b.n	8005498 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053de:	4b10      	ldr	r3, [pc, #64]	@ (8005420 <HAL_RCC_OscConfig+0x4b4>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fe feba 	bl	800415c <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fe feb6 	bl	800415c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e04d      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <HAL_RCC_OscConfig+0x4ac>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x480>
 800540a:	e045      	b.n	8005498 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d107      	bne.n	8005424 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e040      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
 8005418:	40023800 	.word	0x40023800
 800541c:	40007000 	.word	0x40007000
 8005420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005424:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <HAL_RCC_OscConfig+0x538>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d030      	beq.n	8005494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543c:	429a      	cmp	r2, r3
 800543e:	d129      	bne.n	8005494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d122      	bne.n	8005494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800545a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545c:	4293      	cmp	r3, r2
 800545e:	d119      	bne.n	8005494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	3b01      	subs	r3, #1
 800546e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005470:	429a      	cmp	r2, r3
 8005472:	d10f      	bne.n	8005494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800

080054a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07b      	b.n	80055b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d108      	bne.n	80054d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ca:	d009      	beq.n	80054e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	61da      	str	r2, [r3, #28]
 80054d2:	e005      	b.n	80054e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fd ffea 	bl	80034d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005564:	ea42 0103 	orr.w	r1, r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	0c1b      	lsrs	r3, r3, #16
 800557e:	f003 0104 	and.w	r1, r3, #4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005586:	f003 0210 	and.w	r2, r3, #16
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08a      	sub	sp, #40	@ 0x28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055c8:	2301      	movs	r3, #1
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055cc:	f7fe fdc6 	bl	800415c <HAL_GetTick>
 80055d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055e0:	887b      	ldrh	r3, [r7, #2]
 80055e2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d00c      	beq.n	8005604 <HAL_SPI_TransmitReceive+0x4a>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f0:	d106      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x46>
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d001      	beq.n	8005604 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005600:	2302      	movs	r3, #2
 8005602:	e17f      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x5c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x5c>
 8005610:	887b      	ldrh	r3, [r7, #2]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e174      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x6e>
 8005624:	2302      	movs	r3, #2
 8005626:	e16d      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b04      	cmp	r3, #4
 800563a:	d003      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2205      	movs	r2, #5
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	887a      	ldrh	r2, [r7, #2]
 800565a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	887a      	ldrh	r2, [r7, #2]
 8005666:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b40      	cmp	r3, #64	@ 0x40
 8005686:	d007      	beq.n	8005698 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a0:	d17e      	bne.n	80057a0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0xf6>
 80056aa:	8afb      	ldrh	r3, [r7, #22]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d16c      	bne.n	800578a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d4:	e059      	b.n	800578a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11b      	bne.n	800571c <HAL_SPI_TransmitReceive+0x162>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_SPI_TransmitReceive+0x162>
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d113      	bne.n	800571c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	1c9a      	adds	r2, r3, #2
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d119      	bne.n	800575e <HAL_SPI_TransmitReceive+0x1a4>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d014      	beq.n	800575e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	b292      	uxth	r2, r2
 8005740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800575a:	2301      	movs	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800575e:	f7fe fcfd 	bl	800415c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576a:	429a      	cmp	r2, r3
 800576c:	d80d      	bhi.n	800578a <HAL_SPI_TransmitReceive+0x1d0>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d009      	beq.n	800578a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e0bc      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1a0      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x11c>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d19b      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x11c>
 800579e:	e082      	b.n	80058a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x1f4>
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d171      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d4:	e05d      	b.n	8005892 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d11c      	bne.n	800581e <HAL_SPI_TransmitReceive+0x264>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d017      	beq.n	800581e <HAL_SPI_TransmitReceive+0x264>
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d114      	bne.n	800581e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d119      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x2a6>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d014      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800585c:	2301      	movs	r3, #1
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005860:	f7fe fc7c 	bl	800415c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586c:	429a      	cmp	r2, r3
 800586e:	d803      	bhi.n	8005878 <HAL_SPI_TransmitReceive+0x2be>
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d102      	bne.n	800587e <HAL_SPI_TransmitReceive+0x2c4>
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e038      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d19c      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x21c>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d197      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8b6 	bl	8005a1c <SPI_EndRxTxTransaction>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e01d      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005902:	2300      	movs	r3, #0
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3728      	adds	r7, #40	@ 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800591c:	f7fe fc1e 	bl	800415c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	4413      	add	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800592c:	f7fe fc16 	bl	800415c <HAL_GetTick>
 8005930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005932:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	015b      	lsls	r3, r3, #5
 8005938:	0d1b      	lsrs	r3, r3, #20
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	fb02 f303 	mul.w	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005942:	e055      	b.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d051      	beq.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800594c:	f7fe fc06 	bl	800415c <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	429a      	cmp	r2, r3
 800595a:	d902      	bls.n	8005962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d13d      	bne.n	80059de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597a:	d111      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005984:	d004      	beq.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800598e:	d107      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a8:	d10f      	bne.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e018      	b.n	8005a10 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e002      	b.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d19a      	bne.n	8005944 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000164 	.word	0x20000164

08005a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2102      	movs	r1, #2
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff ff6a 	bl	800590c <SPI_WaitFlagStateUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e032      	b.n	8005ab4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005abc <SPI_EndRxTxTransaction+0xa0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <SPI_EndRxTxTransaction+0xa4>)
 8005a54:	fba2 2303 	umull	r2, r3, r2, r3
 8005a58:	0d5b      	lsrs	r3, r3, #21
 8005a5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a5e:	fb02 f303 	mul.w	r3, r2, r3
 8005a62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a6c:	d112      	bne.n	8005a94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2180      	movs	r1, #128	@ 0x80
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff ff47 	bl	800590c <SPI_WaitFlagStateUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d016      	beq.n	8005ab2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e00f      	b.n	8005ab4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aaa:	2b80      	cmp	r3, #128	@ 0x80
 8005aac:	d0f2      	beq.n	8005a94 <SPI_EndRxTxTransaction+0x78>
 8005aae:	e000      	b.n	8005ab2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ab0:	bf00      	nop
  }

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000164 	.word	0x20000164
 8005ac0:	165e9f81 	.word	0x165e9f81

08005ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e041      	b.n	8005b5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd fd3a 	bl	8003564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fcae 	bl	8006464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_TIM_PWM_Start_IT+0x28>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e022      	b.n	8005bd2 <HAL_TIM_PWM_Start_IT+0x6e>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d109      	bne.n	8005ba6 <HAL_TIM_PWM_Start_IT+0x42>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	bf14      	ite	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	2300      	moveq	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	e015      	b.n	8005bd2 <HAL_TIM_PWM_Start_IT+0x6e>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d109      	bne.n	8005bc0 <HAL_TIM_PWM_Start_IT+0x5c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e008      	b.n	8005bd2 <HAL_TIM_PWM_Start_IT+0x6e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0c7      	b.n	8005d6a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start_IT+0x86>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be8:	e013      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xae>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start_IT+0x96>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bf8:	e00b      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xae>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start_IT+0xa6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c08:	e003      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xae>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b0c      	cmp	r3, #12
 8005c16:	d841      	bhi.n	8005c9c <HAL_TIM_PWM_Start_IT+0x138>
 8005c18:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c55 	.word	0x08005c55
 8005c24:	08005c9d 	.word	0x08005c9d
 8005c28:	08005c9d 	.word	0x08005c9d
 8005c2c:	08005c9d 	.word	0x08005c9d
 8005c30:	08005c67 	.word	0x08005c67
 8005c34:	08005c9d 	.word	0x08005c9d
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005c9d 	.word	0x08005c9d
 8005c40:	08005c79 	.word	0x08005c79
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005c9d 	.word	0x08005c9d
 8005c50:	08005c8b 	.word	0x08005c8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0202 	orr.w	r2, r2, #2
 8005c62:	60da      	str	r2, [r3, #12]
      break;
 8005c64:	e01d      	b.n	8005ca2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0204 	orr.w	r2, r2, #4
 8005c74:	60da      	str	r2, [r3, #12]
      break;
 8005c76:	e014      	b.n	8005ca2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0208 	orr.w	r2, r2, #8
 8005c86:	60da      	str	r2, [r3, #12]
      break;
 8005c88:	e00b      	b.n	8005ca2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0210 	orr.w	r2, r2, #16
 8005c98:	60da      	str	r2, [r3, #12]
      break;
 8005c9a:	e002      	b.n	8005ca2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d15f      	bne.n	8005d68 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2201      	movs	r2, #1
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fec7 	bl	8006a44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <HAL_TIM_PWM_Start_IT+0x210>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_TIM_PWM_Start_IT+0x166>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d78 <HAL_TIM_PWM_Start_IT+0x214>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <HAL_TIM_PWM_Start_IT+0x16a>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <HAL_TIM_PWM_Start_IT+0x16c>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ce2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a22      	ldr	r2, [pc, #136]	@ (8005d74 <HAL_TIM_PWM_Start_IT+0x210>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d022      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf6:	d01d      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d7c <HAL_TIM_PWM_Start_IT+0x218>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1e      	ldr	r2, [pc, #120]	@ (8005d80 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d013      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <HAL_TIM_PWM_Start_IT+0x220>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <HAL_TIM_PWM_Start_IT+0x214>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a18      	ldr	r2, [pc, #96]	@ (8005d88 <HAL_TIM_PWM_Start_IT+0x224>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	@ (8005d8c <HAL_TIM_PWM_Start_IT+0x228>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d111      	bne.n	8005d58 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d010      	beq.n	8005d68 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d56:	e007      	b.n	8005d68 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40001800 	.word	0x40001800

08005d90 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b0c      	cmp	r3, #12
 8005da2:	d841      	bhi.n	8005e28 <HAL_TIM_PWM_Stop_IT+0x98>
 8005da4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005e29 	.word	0x08005e29
 8005db4:	08005e29 	.word	0x08005e29
 8005db8:	08005e29 	.word	0x08005e29
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005e29 	.word	0x08005e29
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08005e29 	.word	0x08005e29
 8005dcc:	08005e05 	.word	0x08005e05
 8005dd0:	08005e29 	.word	0x08005e29
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005e29 	.word	0x08005e29
 8005ddc:	08005e17 	.word	0x08005e17
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0202 	bic.w	r2, r2, #2
 8005dee:	60da      	str	r2, [r3, #12]
      break;
 8005df0:	e01d      	b.n	8005e2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0204 	bic.w	r2, r2, #4
 8005e00:	60da      	str	r2, [r3, #12]
      break;
 8005e02:	e014      	b.n	8005e2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0208 	bic.w	r2, r2, #8
 8005e12:	60da      	str	r2, [r3, #12]
      break;
 8005e14:	e00b      	b.n	8005e2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0210 	bic.w	r2, r2, #16
 8005e24:	60da      	str	r2, [r3, #12]
      break;
 8005e26:	e002      	b.n	8005e2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d161      	bne.n	8005ef8 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fe01 	bl	8006a44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2f      	ldr	r2, [pc, #188]	@ (8005f04 <HAL_TIM_PWM_Stop_IT+0x174>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_PWM_Stop_IT+0xc6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a2d      	ldr	r2, [pc, #180]	@ (8005f08 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d101      	bne.n	8005e5a <HAL_TIM_PWM_Stop_IT+0xca>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <HAL_TIM_PWM_Stop_IT+0xcc>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10f      	bne.n	8005e90 <HAL_TIM_PWM_Stop_IT+0x100>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_PWM_Stop_IT+0x100>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_TIM_PWM_Stop_IT+0x130>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_TIM_PWM_Stop_IT+0x130>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <HAL_TIM_PWM_Stop_IT+0x140>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ece:	e013      	b.n	8005ef8 <HAL_TIM_PWM_Stop_IT+0x168>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d104      	bne.n	8005ee0 <HAL_TIM_PWM_Stop_IT+0x150>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ede:	e00b      	b.n	8005ef8 <HAL_TIM_PWM_Stop_IT+0x168>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d104      	bne.n	8005ef0 <HAL_TIM_PWM_Stop_IT+0x160>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eee:	e003      	b.n	8005ef8 <HAL_TIM_PWM_Stop_IT+0x168>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40010400 	.word	0x40010400

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0202 	mvn.w	r2, #2
 8005f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa65 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa57 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fa68 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa3f 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa31 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fa42 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0208 	mvn.w	r2, #8
 8005fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa19 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa0b 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa1c 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0210 	mvn.w	r2, #16
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2208      	movs	r2, #8
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9f3 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9e5 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9f6 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0201 	mvn.w	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9c3 	bl	80063fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fd80 	bl	8006b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9c7 	bl	800644e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0220 	mvn.w	r2, #32
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fd52 	bl	8006b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006106:	2302      	movs	r3, #2
 8006108:	e0ae      	b.n	8006268 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	f200 809f 	bhi.w	8006258 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006155 	.word	0x08006155
 8006124:	08006259 	.word	0x08006259
 8006128:	08006259 	.word	0x08006259
 800612c:	08006259 	.word	0x08006259
 8006130:	08006195 	.word	0x08006195
 8006134:	08006259 	.word	0x08006259
 8006138:	08006259 	.word	0x08006259
 800613c:	08006259 	.word	0x08006259
 8006140:	080061d7 	.word	0x080061d7
 8006144:	08006259 	.word	0x08006259
 8006148:	08006259 	.word	0x08006259
 800614c:	08006259 	.word	0x08006259
 8006150:	08006217 	.word	0x08006217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fa28 	bl	80065b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0204 	bic.w	r2, r2, #4
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	619a      	str	r2, [r3, #24]
      break;
 8006192:	e064      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa78 	bl	8006690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6999      	ldr	r1, [r3, #24]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
      break;
 80061d4:	e043      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 facd 	bl	800677c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0208 	orr.w	r2, r2, #8
 80061f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0204 	bic.w	r2, r2, #4
 8006200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	61da      	str	r2, [r3, #28]
      break;
 8006214:	e023      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fb21 	bl	8006864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	021a      	lsls	r2, r3, #8
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	61da      	str	r2, [r3, #28]
      break;
 8006256:	e002      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
      break;
 800625c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIM_ConfigClockSource+0x1c>
 8006288:	2302      	movs	r3, #2
 800628a:	e0b4      	b.n	80063f6 <HAL_TIM_ConfigClockSource+0x186>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c4:	d03e      	beq.n	8006344 <HAL_TIM_ConfigClockSource+0xd4>
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ca:	f200 8087 	bhi.w	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d2:	f000 8086 	beq.w	80063e2 <HAL_TIM_ConfigClockSource+0x172>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062da:	d87f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b70      	cmp	r3, #112	@ 0x70
 80062de:	d01a      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0xa6>
 80062e0:	2b70      	cmp	r3, #112	@ 0x70
 80062e2:	d87b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b60      	cmp	r3, #96	@ 0x60
 80062e6:	d050      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x11a>
 80062e8:	2b60      	cmp	r3, #96	@ 0x60
 80062ea:	d877      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b50      	cmp	r3, #80	@ 0x50
 80062ee:	d03c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xfa>
 80062f0:	2b50      	cmp	r3, #80	@ 0x50
 80062f2:	d873      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b40      	cmp	r3, #64	@ 0x40
 80062f6:	d058      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x13a>
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d86f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b30      	cmp	r3, #48	@ 0x30
 80062fe:	d064      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006300:	2b30      	cmp	r3, #48	@ 0x30
 8006302:	d86b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d060      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d867      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006310:	2b10      	cmp	r3, #16
 8006312:	d05a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	e062      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006326:	f000 fb6d 	bl	8006a04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	609a      	str	r2, [r3, #8]
      break;
 8006342:	e04f      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006354:	f000 fb56 	bl	8006a04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006366:	609a      	str	r2, [r3, #8]
      break;
 8006368:	e03c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	461a      	mov	r2, r3
 8006378:	f000 faca 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2150      	movs	r1, #80	@ 0x50
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb23 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 8006388:	e02c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fae9 	bl	800696e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2160      	movs	r1, #96	@ 0x60
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb13 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 80063a8:	e01c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 faaa 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2140      	movs	r1, #64	@ 0x40
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fb03 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 80063c8:	e00c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f000 fafa 	bl	80069ce <TIM_ITRx_SetConfig>
      break;
 80063da:	e003      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
      break;
 80063e0:	e000      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a43      	ldr	r2, [pc, #268]	@ (8006584 <TIM_Base_SetConfig+0x120>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006482:	d00f      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a40      	ldr	r2, [pc, #256]	@ (8006588 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3f      	ldr	r2, [pc, #252]	@ (800658c <TIM_Base_SetConfig+0x128>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3e      	ldr	r2, [pc, #248]	@ (8006590 <TIM_Base_SetConfig+0x12c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3d      	ldr	r2, [pc, #244]	@ (8006594 <TIM_Base_SetConfig+0x130>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d108      	bne.n	80064b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a32      	ldr	r2, [pc, #200]	@ (8006584 <TIM_Base_SetConfig+0x120>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c4:	d027      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006588 <TIM_Base_SetConfig+0x124>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d023      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2e      	ldr	r2, [pc, #184]	@ (800658c <TIM_Base_SetConfig+0x128>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01f      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006590 <TIM_Base_SetConfig+0x12c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006594 <TIM_Base_SetConfig+0x130>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d017      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006598 <TIM_Base_SetConfig+0x134>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2a      	ldr	r2, [pc, #168]	@ (800659c <TIM_Base_SetConfig+0x138>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a29      	ldr	r2, [pc, #164]	@ (80065a0 <TIM_Base_SetConfig+0x13c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a28      	ldr	r2, [pc, #160]	@ (80065a4 <TIM_Base_SetConfig+0x140>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a27      	ldr	r2, [pc, #156]	@ (80065a8 <TIM_Base_SetConfig+0x144>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a26      	ldr	r2, [pc, #152]	@ (80065ac <TIM_Base_SetConfig+0x148>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a0e      	ldr	r2, [pc, #56]	@ (8006584 <TIM_Base_SetConfig+0x120>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_Base_SetConfig+0xf2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a10      	ldr	r2, [pc, #64]	@ (8006594 <TIM_Base_SetConfig+0x130>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d103      	bne.n	800655e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f043 0204 	orr.w	r2, r3, #4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40014000 	.word	0x40014000
 800659c:	40014400 	.word	0x40014400
 80065a0:	40014800 	.word	0x40014800
 80065a4:	40001800 	.word	0x40001800
 80065a8:	40001c00 	.word	0x40001c00
 80065ac:	40002000 	.word	0x40002000

080065b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f023 0201 	bic.w	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 0302 	bic.w	r3, r3, #2
 80065f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a20      	ldr	r2, [pc, #128]	@ (8006688 <TIM_OC1_SetConfig+0xd8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC1_SetConfig+0x64>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a1f      	ldr	r2, [pc, #124]	@ (800668c <TIM_OC1_SetConfig+0xdc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d10c      	bne.n	800662e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0308 	bic.w	r3, r3, #8
 800661a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <TIM_OC1_SetConfig+0xd8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC1_SetConfig+0x8e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a14      	ldr	r2, [pc, #80]	@ (800668c <TIM_OC1_SetConfig+0xdc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d111      	bne.n	8006662 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	40010000 	.word	0x40010000
 800668c:	40010400 	.word	0x40010400

08006690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f023 0210 	bic.w	r2, r3, #16
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0320 	bic.w	r3, r3, #32
 80066da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a22      	ldr	r2, [pc, #136]	@ (8006774 <TIM_OC2_SetConfig+0xe4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_OC2_SetConfig+0x68>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a21      	ldr	r2, [pc, #132]	@ (8006778 <TIM_OC2_SetConfig+0xe8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d10d      	bne.n	8006714 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <TIM_OC2_SetConfig+0xe4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0x94>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <TIM_OC2_SetConfig+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d113      	bne.n	800674c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800672a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400

0800677c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a21      	ldr	r2, [pc, #132]	@ (800685c <TIM_OC3_SetConfig+0xe0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC3_SetConfig+0x66>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a20      	ldr	r2, [pc, #128]	@ (8006860 <TIM_OC3_SetConfig+0xe4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10d      	bne.n	80067fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <TIM_OC3_SetConfig+0xe0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC3_SetConfig+0x92>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <TIM_OC3_SetConfig+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d113      	bne.n	8006836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800681c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40010000 	.word	0x40010000
 8006860:	40010400 	.word	0x40010400

08006864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a12      	ldr	r2, [pc, #72]	@ (8006908 <TIM_OC4_SetConfig+0xa4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC4_SetConfig+0x68>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a11      	ldr	r2, [pc, #68]	@ (800690c <TIM_OC4_SetConfig+0xa8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f023 0210 	bic.w	r2, r3, #16
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f043 0307 	orr.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	609a      	str	r2, [r3, #8]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2201      	movs	r2, #1
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	401a      	ands	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e05a      	b.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a21      	ldr	r2, [pc, #132]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af4:	d01d      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1d      	ldr	r2, [pc, #116]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1b      	ldr	r2, [pc, #108]	@ (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a18      	ldr	r2, [pc, #96]	@ (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a17      	ldr	r2, [pc, #92]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10c      	bne.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40010400 	.word	0x40010400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40001800 	.word	0x40001800

08006b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e042      	b.n	8006c48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc fd26 	bl	8003628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	@ 0x24
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fdd3 	bl	80077a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	@ 0x28
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d175      	bne.n	8006d5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_UART_Transmit+0x2c>
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e06e      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2221      	movs	r2, #33	@ 0x21
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8e:	f7fd fa65 	bl	800415c <HAL_GetTick>
 8006c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	88fa      	ldrh	r2, [r7, #6]
 8006c9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca8:	d108      	bne.n	8006cbc <HAL_UART_Transmit+0x6c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	e003      	b.n	8006cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc4:	e02e      	b.n	8006d24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2180      	movs	r1, #128	@ 0x80
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fb37 	bl	8007344 <UART_WaitOnFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e03a      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	3302      	adds	r3, #2
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e007      	b.n	8006d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1cb      	bne.n	8006cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2140      	movs	r1, #64	@ 0x40
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 fb03 	bl	8007344 <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e006      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d112      	bne.n	8006da6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_UART_Receive_IT+0x26>
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e00b      	b.n	8006da8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fb2a 	bl	80073f6 <UART_Start_Receive_IT>
 8006da2:	4603      	mov	r3, r0
 8006da4:	e000      	b.n	8006da8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006da6:	2302      	movs	r3, #2
  }
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b0ba      	sub	sp, #232	@ 0xe8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <HAL_UART_IRQHandler+0x66>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fc07 	bl	8007622 <UART_Receive_IT>
      return;
 8006e14:	e273      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80de 	beq.w	8006fdc <HAL_UART_IRQHandler+0x22c>
 8006e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80d1 	beq.w	8006fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <HAL_UART_IRQHandler+0xae>
 8006e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e56:	f043 0201 	orr.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <HAL_UART_IRQHandler+0xd2>
 8006e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7a:	f043 0202 	orr.w	r2, r3, #2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xf6>
 8006e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d011      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x126>
 8006eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d105      	bne.n	8006eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	f043 0208 	orr.w	r2, r3, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 820a 	beq.w	80072f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_UART_IRQHandler+0x14e>
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fb92 	bl	8007622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f08:	2b40      	cmp	r3, #64	@ 0x40
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <HAL_UART_IRQHandler+0x17a>
 8006f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04f      	beq.n	8006fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa9d 	bl	800746a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3a:	2b40      	cmp	r3, #64	@ 0x40
 8006f3c:	d141      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3314      	adds	r3, #20
 8006f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1d9      	bne.n	8006f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f96:	4a8a      	ldr	r2, [pc, #552]	@ (80071c0 <HAL_UART_IRQHandler+0x410>)
 8006f98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fd fa8d 	bl	80044be <HAL_DMA_Abort_IT>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb8:	e00e      	b.n	8006fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f9ac 	bl	8007318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	e00a      	b.n	8006fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9a8 	bl	8007318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc8:	e006      	b.n	8006fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9a4 	bl	8007318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006fd6:	e18d      	b.n	80072f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	bf00      	nop
    return;
 8006fda:	e18b      	b.n	80072f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	f040 8167 	bne.w	80072b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8160 	beq.w	80072b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8159 	beq.w	80072b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007002:	2300      	movs	r3, #0
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	60bb      	str	r3, [r7, #8]
 8007016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	f040 80ce 	bne.w	80071c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a9 	beq.w	8007190 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007046:	429a      	cmp	r2, r3
 8007048:	f080 80a2 	bcs.w	8007190 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007052:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	f000 8088 	beq.w	8007172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800707c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800708e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800709a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1d9      	bne.n	8007062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3314      	adds	r3, #20
 80070b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e1      	bne.n	80070ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800710e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800711c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007142:	f023 0310 	bic.w	r3, r3, #16
 8007146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007154:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007156:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800715a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e3      	bne.n	8007130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716c:	4618      	mov	r0, r3
 800716e:	f7fd f936 	bl	80043de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007180:	b29b      	uxth	r3, r3
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	b29b      	uxth	r3, r3
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f8cf 	bl	800732c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800718e:	e0b3      	b.n	80072f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007198:	429a      	cmp	r2, r3
 800719a:	f040 80ad 	bne.w	80072f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a8:	f040 80a6 	bne.w	80072f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8b7 	bl	800732c <HAL_UARTEx_RxEventCallback>
      return;
 80071be:	e09b      	b.n	80072f8 <HAL_UART_IRQHandler+0x548>
 80071c0:	08007531 	.word	0x08007531
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 808e 	beq.w	80072fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80071e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8089 	beq.w	80072fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800720e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800721c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e3      	bne.n	80071ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	623b      	str	r3, [r7, #32]
   return(result);
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007246:	633a      	str	r2, [r7, #48]	@ 0x30
 8007248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800724c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e3      	bne.n	8007222 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	60fb      	str	r3, [r7, #12]
   return(result);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800728c:	61fa      	str	r2, [r7, #28]
 800728e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	69b9      	ldr	r1, [r7, #24]
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	617b      	str	r3, [r7, #20]
   return(result);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e3      	bne.n	8007268 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f83d 	bl	800732c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072b2:	e023      	b.n	80072fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_UART_IRQHandler+0x524>
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f940 	bl	8007552 <UART_Transmit_IT>
    return;
 80072d2:	e014      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00e      	beq.n	80072fe <HAL_UART_IRQHandler+0x54e>
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f980 	bl	80075f2 <UART_EndTransmit_IT>
    return;
 80072f2:	e004      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
    return;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
      return;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
      return;
 80072fc:	bf00      	nop
  }
}
 80072fe:	37e8      	adds	r7, #232	@ 0xe8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007354:	e03b      	b.n	80073ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d037      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735e:	f7fc fefd 	bl	800415c <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	6a3a      	ldr	r2, [r7, #32]
 800736a:	429a      	cmp	r2, r3
 800736c:	d302      	bcc.n	8007374 <UART_WaitOnFlagUntilTimeout+0x30>
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e03a      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d023      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b80      	cmp	r3, #128	@ 0x80
 800738a:	d020      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b40      	cmp	r3, #64	@ 0x40
 8007390:	d01d      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b08      	cmp	r3, #8
 800739e:	d116      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f857 	bl	800746a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2208      	movs	r2, #8
 80073c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e00f      	b.n	80073ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4013      	ands	r3, r2
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	bf0c      	ite	eq
 80073de:	2301      	moveq	r3, #1
 80073e0:	2300      	movne	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d0b4      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	4613      	mov	r3, r2
 8007402:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	88fa      	ldrh	r2, [r7, #6]
 800740e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	88fa      	ldrh	r2, [r7, #6]
 8007414:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2222      	movs	r2, #34	@ 0x22
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800743a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0220 	orr.w	r2, r2, #32
 800745a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800746a:	b480      	push	{r7}
 800746c:	b095      	sub	sp, #84	@ 0x54
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007492:	643a      	str	r2, [r7, #64]	@ 0x40
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3314      	adds	r3, #20
 80074ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d119      	bne.n	8007516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	330c      	adds	r3, #12
 80074e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f023 0310 	bic.w	r3, r3, #16
 80074f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007502:	61ba      	str	r2, [r7, #24]
 8007504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	613b      	str	r3, [r7, #16]
   return(result);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007524:	bf00      	nop
 8007526:	3754      	adds	r7, #84	@ 0x54
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff fee7 	bl	8007318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b21      	cmp	r3, #33	@ 0x21
 8007564:	d13e      	bne.n	80075e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800756e:	d114      	bne.n	800759a <UART_Transmit_IT+0x48>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d110      	bne.n	800759a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800758c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	621a      	str	r2, [r3, #32]
 8007598:	e008      	b.n	80075ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	1c59      	adds	r1, r3, #1
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6211      	str	r1, [r2, #32]
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4619      	mov	r1, r3
 80075ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10f      	bne.n	80075e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fe76 	bl	8007304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b08c      	sub	sp, #48	@ 0x30
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b22      	cmp	r3, #34	@ 0x22
 800763c:	f040 80aa 	bne.w	8007794 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007648:	d115      	bne.n	8007676 <UART_Receive_IT+0x54>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d111      	bne.n	8007676 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007656:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007664:	b29a      	uxth	r2, r3
 8007666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	1c9a      	adds	r2, r3, #2
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	629a      	str	r2, [r3, #40]	@ 0x28
 8007674:	e024      	b.n	80076c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007684:	d007      	beq.n	8007696 <UART_Receive_IT+0x74>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <UART_Receive_IT+0x82>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	e008      	b.n	80076b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	4619      	mov	r1, r3
 80076ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d15d      	bne.n	8007790 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0220 	bic.w	r2, r2, #32
 80076e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695a      	ldr	r2, [r3, #20]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007716:	2b01      	cmp	r3, #1
 8007718:	d135      	bne.n	8007786 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	613b      	str	r3, [r7, #16]
   return(result);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f023 0310 	bic.w	r3, r3, #16
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007740:	623a      	str	r2, [r7, #32]
 8007742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	61bb      	str	r3, [r7, #24]
   return(result);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e5      	bne.n	8007720 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b10      	cmp	r3, #16
 8007760:	d10a      	bne.n	8007778 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff fdd4 	bl	800732c <HAL_UARTEx_RxEventCallback>
 8007784:	e002      	b.n	800778c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7f9 fbc6 	bl	8000f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e002      	b.n	8007796 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	e000      	b.n	8007796 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007794:	2302      	movs	r3, #2
  }
}
 8007796:	4618      	mov	r0, r3
 8007798:	3730      	adds	r7, #48	@ 0x30
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b0c0      	sub	sp, #256	@ 0x100
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077bc:	68d9      	ldr	r1, [r3, #12]
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	ea40 0301 	orr.w	r3, r0, r1
 80077c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	431a      	orrs	r2, r3
 80077e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077f8:	f021 010c 	bic.w	r1, r1, #12
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007806:	430b      	orrs	r3, r1
 8007808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781a:	6999      	ldr	r1, [r3, #24]
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	ea40 0301 	orr.w	r3, r0, r1
 8007826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4b8f      	ldr	r3, [pc, #572]	@ (8007a6c <UART_SetConfig+0x2cc>)
 8007830:	429a      	cmp	r2, r3
 8007832:	d005      	beq.n	8007840 <UART_SetConfig+0xa0>
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a70 <UART_SetConfig+0x2d0>)
 800783c:	429a      	cmp	r2, r3
 800783e:	d104      	bne.n	800784a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007840:	f7fd f950 	bl	8004ae4 <HAL_RCC_GetPCLK2Freq>
 8007844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007848:	e003      	b.n	8007852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fd f937 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 800784e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800785c:	f040 810c 	bne.w	8007a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007864:	2200      	movs	r2, #0
 8007866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800786a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800786e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007872:	4622      	mov	r2, r4
 8007874:	462b      	mov	r3, r5
 8007876:	1891      	adds	r1, r2, r2
 8007878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800787a:	415b      	adcs	r3, r3
 800787c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800787e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007882:	4621      	mov	r1, r4
 8007884:	eb12 0801 	adds.w	r8, r2, r1
 8007888:	4629      	mov	r1, r5
 800788a:	eb43 0901 	adc.w	r9, r3, r1
 800788e:	f04f 0200 	mov.w	r2, #0
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800789a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800789e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078a2:	4690      	mov	r8, r2
 80078a4:	4699      	mov	r9, r3
 80078a6:	4623      	mov	r3, r4
 80078a8:	eb18 0303 	adds.w	r3, r8, r3
 80078ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078b0:	462b      	mov	r3, r5
 80078b2:	eb49 0303 	adc.w	r3, r9, r3
 80078b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80078ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80078ce:	460b      	mov	r3, r1
 80078d0:	18db      	adds	r3, r3, r3
 80078d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078d4:	4613      	mov	r3, r2
 80078d6:	eb42 0303 	adc.w	r3, r2, r3
 80078da:	657b      	str	r3, [r7, #84]	@ 0x54
 80078dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80078e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078e4:	f7f8 fcec 	bl	80002c0 <__aeabi_uldivmod>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4b61      	ldr	r3, [pc, #388]	@ (8007a74 <UART_SetConfig+0x2d4>)
 80078ee:	fba3 2302 	umull	r2, r3, r3, r2
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	011c      	lsls	r4, r3, #4
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	1891      	adds	r1, r2, r2
 800790e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007910:	415b      	adcs	r3, r3
 8007912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007918:	4641      	mov	r1, r8
 800791a:	eb12 0a01 	adds.w	sl, r2, r1
 800791e:	4649      	mov	r1, r9
 8007920:	eb43 0b01 	adc.w	fp, r3, r1
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007938:	4692      	mov	sl, r2
 800793a:	469b      	mov	fp, r3
 800793c:	4643      	mov	r3, r8
 800793e:	eb1a 0303 	adds.w	r3, sl, r3
 8007942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007946:	464b      	mov	r3, r9
 8007948:	eb4b 0303 	adc.w	r3, fp, r3
 800794c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800795c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007964:	460b      	mov	r3, r1
 8007966:	18db      	adds	r3, r3, r3
 8007968:	643b      	str	r3, [r7, #64]	@ 0x40
 800796a:	4613      	mov	r3, r2
 800796c:	eb42 0303 	adc.w	r3, r2, r3
 8007970:	647b      	str	r3, [r7, #68]	@ 0x44
 8007972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800797a:	f7f8 fca1 	bl	80002c0 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4611      	mov	r1, r2
 8007984:	4b3b      	ldr	r3, [pc, #236]	@ (8007a74 <UART_SetConfig+0x2d4>)
 8007986:	fba3 2301 	umull	r2, r3, r3, r1
 800798a:	095b      	lsrs	r3, r3, #5
 800798c:	2264      	movs	r2, #100	@ 0x64
 800798e:	fb02 f303 	mul.w	r3, r2, r3
 8007992:	1acb      	subs	r3, r1, r3
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800799a:	4b36      	ldr	r3, [pc, #216]	@ (8007a74 <UART_SetConfig+0x2d4>)
 800799c:	fba3 2302 	umull	r2, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80079a8:	441c      	add	r4, r3
 80079aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80079b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	1891      	adds	r1, r2, r2
 80079c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80079c4:	415b      	adcs	r3, r3
 80079c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079cc:	4641      	mov	r1, r8
 80079ce:	1851      	adds	r1, r2, r1
 80079d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80079d2:	4649      	mov	r1, r9
 80079d4:	414b      	adcs	r3, r1
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079e4:	4659      	mov	r1, fp
 80079e6:	00cb      	lsls	r3, r1, #3
 80079e8:	4651      	mov	r1, sl
 80079ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ee:	4651      	mov	r1, sl
 80079f0:	00ca      	lsls	r2, r1, #3
 80079f2:	4610      	mov	r0, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	4642      	mov	r2, r8
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a00:	464b      	mov	r3, r9
 8007a02:	460a      	mov	r2, r1
 8007a04:	eb42 0303 	adc.w	r3, r2, r3
 8007a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a20:	460b      	mov	r3, r1
 8007a22:	18db      	adds	r3, r3, r3
 8007a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a26:	4613      	mov	r3, r2
 8007a28:	eb42 0303 	adc.w	r3, r2, r3
 8007a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a36:	f7f8 fc43 	bl	80002c0 <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <UART_SetConfig+0x2d4>)
 8007a40:	fba3 1302 	umull	r1, r3, r3, r2
 8007a44:	095b      	lsrs	r3, r3, #5
 8007a46:	2164      	movs	r1, #100	@ 0x64
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	3332      	adds	r3, #50	@ 0x32
 8007a52:	4a08      	ldr	r2, [pc, #32]	@ (8007a74 <UART_SetConfig+0x2d4>)
 8007a54:	fba2 2303 	umull	r2, r3, r2, r3
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	f003 0207 	and.w	r2, r3, #7
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4422      	add	r2, r4
 8007a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a68:	e106      	b.n	8007c78 <UART_SetConfig+0x4d8>
 8007a6a:	bf00      	nop
 8007a6c:	40011000 	.word	0x40011000
 8007a70:	40011400 	.word	0x40011400
 8007a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a8a:	4642      	mov	r2, r8
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	1891      	adds	r1, r2, r2
 8007a90:	6239      	str	r1, [r7, #32]
 8007a92:	415b      	adcs	r3, r3
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	1854      	adds	r4, r2, r1
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	eb43 0501 	adc.w	r5, r3, r1
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	00eb      	lsls	r3, r5, #3
 8007aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ab2:	00e2      	lsls	r2, r4, #3
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	4643      	mov	r3, r8
 8007aba:	18e3      	adds	r3, r4, r3
 8007abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	eb45 0303 	adc.w	r3, r5, r3
 8007ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	008b      	lsls	r3, r1, #2
 8007aea:	4621      	mov	r1, r4
 8007aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007af0:	4621      	mov	r1, r4
 8007af2:	008a      	lsls	r2, r1, #2
 8007af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007af8:	f7f8 fbe2 	bl	80002c0 <__aeabi_uldivmod>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4b60      	ldr	r3, [pc, #384]	@ (8007c84 <UART_SetConfig+0x4e4>)
 8007b02:	fba3 2302 	umull	r2, r3, r3, r2
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	011c      	lsls	r4, r3, #4
 8007b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	1891      	adds	r1, r2, r2
 8007b22:	61b9      	str	r1, [r7, #24]
 8007b24:	415b      	adcs	r3, r3
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	1851      	adds	r1, r2, r1
 8007b30:	6139      	str	r1, [r7, #16]
 8007b32:	4649      	mov	r1, r9
 8007b34:	414b      	adcs	r3, r1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b44:	4659      	mov	r1, fp
 8007b46:	00cb      	lsls	r3, r1, #3
 8007b48:	4651      	mov	r1, sl
 8007b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b4e:	4651      	mov	r1, sl
 8007b50:	00ca      	lsls	r2, r1, #3
 8007b52:	4610      	mov	r0, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	4642      	mov	r2, r8
 8007b5a:	189b      	adds	r3, r3, r2
 8007b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b60:	464b      	mov	r3, r9
 8007b62:	460a      	mov	r2, r1
 8007b64:	eb42 0303 	adc.w	r3, r2, r3
 8007b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b84:	4649      	mov	r1, r9
 8007b86:	008b      	lsls	r3, r1, #2
 8007b88:	4641      	mov	r1, r8
 8007b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b8e:	4641      	mov	r1, r8
 8007b90:	008a      	lsls	r2, r1, #2
 8007b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b96:	f7f8 fb93 	bl	80002c0 <__aeabi_uldivmod>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4b38      	ldr	r3, [pc, #224]	@ (8007c84 <UART_SetConfig+0x4e4>)
 8007ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2264      	movs	r2, #100	@ 0x64
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	1acb      	subs	r3, r1, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	@ 0x32
 8007bb4:	4a33      	ldr	r2, [pc, #204]	@ (8007c84 <UART_SetConfig+0x4e4>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bc0:	441c      	add	r4, r3
 8007bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8007bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	1891      	adds	r1, r2, r2
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	415b      	adcs	r3, r3
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007be0:	4641      	mov	r1, r8
 8007be2:	1851      	adds	r1, r2, r1
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	4649      	mov	r1, r9
 8007be8:	414b      	adcs	r3, r1
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	f04f 0300 	mov.w	r3, #0
 8007bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bf8:	4659      	mov	r1, fp
 8007bfa:	00cb      	lsls	r3, r1, #3
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c02:	4651      	mov	r1, sl
 8007c04:	00ca      	lsls	r2, r1, #3
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4642      	mov	r2, r8
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c12:	464b      	mov	r3, r9
 8007c14:	460a      	mov	r2, r1
 8007c16:	eb42 0303 	adc.w	r3, r2, r3
 8007c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c34:	4649      	mov	r1, r9
 8007c36:	008b      	lsls	r3, r1, #2
 8007c38:	4641      	mov	r1, r8
 8007c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c3e:	4641      	mov	r1, r8
 8007c40:	008a      	lsls	r2, r1, #2
 8007c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c46:	f7f8 fb3b 	bl	80002c0 <__aeabi_uldivmod>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <UART_SetConfig+0x4e4>)
 8007c50:	fba3 1302 	umull	r1, r3, r3, r2
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	2164      	movs	r1, #100	@ 0x64
 8007c58:	fb01 f303 	mul.w	r3, r1, r3
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	3332      	adds	r3, #50	@ 0x32
 8007c62:	4a08      	ldr	r2, [pc, #32]	@ (8007c84 <UART_SetConfig+0x4e4>)
 8007c64:	fba2 2303 	umull	r2, r3, r2, r3
 8007c68:	095b      	lsrs	r3, r3, #5
 8007c6a:	f003 020f 	and.w	r2, r3, #15
 8007c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4422      	add	r2, r4
 8007c76:	609a      	str	r2, [r3, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c84:	51eb851f 	.word	0x51eb851f

08007c88 <sniprintf>:
 8007c88:	b40c      	push	{r2, r3}
 8007c8a:	b530      	push	{r4, r5, lr}
 8007c8c:	4b18      	ldr	r3, [pc, #96]	@ (8007cf0 <sniprintf+0x68>)
 8007c8e:	1e0c      	subs	r4, r1, #0
 8007c90:	681d      	ldr	r5, [r3, #0]
 8007c92:	b09d      	sub	sp, #116	@ 0x74
 8007c94:	da08      	bge.n	8007ca8 <sniprintf+0x20>
 8007c96:	238b      	movs	r3, #139	@ 0x8b
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	b01d      	add	sp, #116	@ 0x74
 8007ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ca4:	b002      	add	sp, #8
 8007ca6:	4770      	bx	lr
 8007ca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007cac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007cb6:	bf14      	ite	ne
 8007cb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cbc:	4623      	moveq	r3, r4
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007cc6:	9002      	str	r0, [sp, #8]
 8007cc8:	9006      	str	r0, [sp, #24]
 8007cca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007cce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007cd0:	ab21      	add	r3, sp, #132	@ 0x84
 8007cd2:	a902      	add	r1, sp, #8
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	f000 f9f8 	bl	80080cc <_svfiprintf_r>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	bfbc      	itt	lt
 8007ce0:	238b      	movlt	r3, #139	@ 0x8b
 8007ce2:	602b      	strlt	r3, [r5, #0]
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	d0da      	beq.n	8007c9e <sniprintf+0x16>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e7d6      	b.n	8007c9e <sniprintf+0x16>
 8007cf0:	20000170 	.word	0x20000170

08007cf4 <siscanf>:
 8007cf4:	b40e      	push	{r1, r2, r3}
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	b09d      	sub	sp, #116	@ 0x74
 8007cfa:	ac21      	add	r4, sp, #132	@ 0x84
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007d02:	f854 6b04 	ldr.w	r6, [r4], #4
 8007d06:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d0a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007d0c:	9002      	str	r0, [sp, #8]
 8007d0e:	9006      	str	r0, [sp, #24]
 8007d10:	f7f8 fa7e 	bl	8000210 <strlen>
 8007d14:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <siscanf+0x50>)
 8007d16:	9003      	str	r0, [sp, #12]
 8007d18:	9007      	str	r0, [sp, #28]
 8007d1a:	480b      	ldr	r0, [pc, #44]	@ (8007d48 <siscanf+0x54>)
 8007d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d26:	4632      	mov	r2, r6
 8007d28:	4623      	mov	r3, r4
 8007d2a:	a902      	add	r1, sp, #8
 8007d2c:	6800      	ldr	r0, [r0, #0]
 8007d2e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007d30:	9514      	str	r5, [sp, #80]	@ 0x50
 8007d32:	9401      	str	r4, [sp, #4]
 8007d34:	f000 fb20 	bl	8008378 <__ssvfiscanf_r>
 8007d38:	b01d      	add	sp, #116	@ 0x74
 8007d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d3e:	b003      	add	sp, #12
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	08007d4d 	.word	0x08007d4d
 8007d48:	20000170 	.word	0x20000170

08007d4c <__seofread>:
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	4770      	bx	lr

08007d50 <memset>:
 8007d50:	4402      	add	r2, r0
 8007d52:	4603      	mov	r3, r0
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d100      	bne.n	8007d5a <memset+0xa>
 8007d58:	4770      	bx	lr
 8007d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5e:	e7f9      	b.n	8007d54 <memset+0x4>

08007d60 <strncmp>:
 8007d60:	b510      	push	{r4, lr}
 8007d62:	b16a      	cbz	r2, 8007d80 <strncmp+0x20>
 8007d64:	3901      	subs	r1, #1
 8007d66:	1884      	adds	r4, r0, r2
 8007d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d103      	bne.n	8007d7c <strncmp+0x1c>
 8007d74:	42a0      	cmp	r0, r4
 8007d76:	d001      	beq.n	8007d7c <strncmp+0x1c>
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d1f5      	bne.n	8007d68 <strncmp+0x8>
 8007d7c:	1ad0      	subs	r0, r2, r3
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	4610      	mov	r0, r2
 8007d82:	e7fc      	b.n	8007d7e <strncmp+0x1e>

08007d84 <strstr>:
 8007d84:	780a      	ldrb	r2, [r1, #0]
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	b96a      	cbnz	r2, 8007da6 <strstr+0x22>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d109      	bne.n	8007da4 <strstr+0x20>
 8007d90:	460c      	mov	r4, r1
 8007d92:	4605      	mov	r5, r0
 8007d94:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0f6      	beq.n	8007d8a <strstr+0x6>
 8007d9c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007da0:	429e      	cmp	r6, r3
 8007da2:	d0f7      	beq.n	8007d94 <strstr+0x10>
 8007da4:	3001      	adds	r0, #1
 8007da6:	7803      	ldrb	r3, [r0, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1ef      	bne.n	8007d8c <strstr+0x8>
 8007dac:	4618      	mov	r0, r3
 8007dae:	e7ec      	b.n	8007d8a <strstr+0x6>

08007db0 <__errno>:
 8007db0:	4b01      	ldr	r3, [pc, #4]	@ (8007db8 <__errno+0x8>)
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20000170 	.word	0x20000170

08007dbc <__libc_init_array>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8007df4 <__libc_init_array+0x38>)
 8007dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8007df8 <__libc_init_array+0x3c>)
 8007dc2:	1b64      	subs	r4, r4, r5
 8007dc4:	10a4      	asrs	r4, r4, #2
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	42a6      	cmp	r6, r4
 8007dca:	d109      	bne.n	8007de0 <__libc_init_array+0x24>
 8007dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8007dfc <__libc_init_array+0x40>)
 8007dce:	4c0c      	ldr	r4, [pc, #48]	@ (8007e00 <__libc_init_array+0x44>)
 8007dd0:	f001 f8e2 	bl	8008f98 <_init>
 8007dd4:	1b64      	subs	r4, r4, r5
 8007dd6:	10a4      	asrs	r4, r4, #2
 8007dd8:	2600      	movs	r6, #0
 8007dda:	42a6      	cmp	r6, r4
 8007ddc:	d105      	bne.n	8007dea <__libc_init_array+0x2e>
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de4:	4798      	blx	r3
 8007de6:	3601      	adds	r6, #1
 8007de8:	e7ee      	b.n	8007dc8 <__libc_init_array+0xc>
 8007dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dee:	4798      	blx	r3
 8007df0:	3601      	adds	r6, #1
 8007df2:	e7f2      	b.n	8007dda <__libc_init_array+0x1e>
 8007df4:	080093c4 	.word	0x080093c4
 8007df8:	080093c4 	.word	0x080093c4
 8007dfc:	080093c4 	.word	0x080093c4
 8007e00:	080093c8 	.word	0x080093c8

08007e04 <__retarget_lock_acquire_recursive>:
 8007e04:	4770      	bx	lr

08007e06 <__retarget_lock_release_recursive>:
 8007e06:	4770      	bx	lr

08007e08 <memcpy>:
 8007e08:	440a      	add	r2, r1
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e10:	d100      	bne.n	8007e14 <memcpy+0xc>
 8007e12:	4770      	bx	lr
 8007e14:	b510      	push	{r4, lr}
 8007e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	d1f9      	bne.n	8007e16 <memcpy+0xe>
 8007e22:	bd10      	pop	{r4, pc}

08007e24 <_free_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4605      	mov	r5, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d041      	beq.n	8007eb0 <_free_r+0x8c>
 8007e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e30:	1f0c      	subs	r4, r1, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfb8      	it	lt
 8007e36:	18e4      	addlt	r4, r4, r3
 8007e38:	f000 f8e0 	bl	8007ffc <__malloc_lock>
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb4 <_free_r+0x90>)
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	b933      	cbnz	r3, 8007e50 <_free_r+0x2c>
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	6014      	str	r4, [r2, #0]
 8007e46:	4628      	mov	r0, r5
 8007e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4c:	f000 b8dc 	b.w	8008008 <__malloc_unlock>
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d908      	bls.n	8007e66 <_free_r+0x42>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	1821      	adds	r1, r4, r0
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf01      	itttt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	1809      	addeq	r1, r1, r0
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	e7ed      	b.n	8007e42 <_free_r+0x1e>
 8007e66:	461a      	mov	r2, r3
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	b10b      	cbz	r3, 8007e70 <_free_r+0x4c>
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	d9fa      	bls.n	8007e66 <_free_r+0x42>
 8007e70:	6811      	ldr	r1, [r2, #0]
 8007e72:	1850      	adds	r0, r2, r1
 8007e74:	42a0      	cmp	r0, r4
 8007e76:	d10b      	bne.n	8007e90 <_free_r+0x6c>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	4401      	add	r1, r0
 8007e7c:	1850      	adds	r0, r2, r1
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	d1e0      	bne.n	8007e46 <_free_r+0x22>
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	6053      	str	r3, [r2, #4]
 8007e8a:	4408      	add	r0, r1
 8007e8c:	6010      	str	r0, [r2, #0]
 8007e8e:	e7da      	b.n	8007e46 <_free_r+0x22>
 8007e90:	d902      	bls.n	8007e98 <_free_r+0x74>
 8007e92:	230c      	movs	r3, #12
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	e7d6      	b.n	8007e46 <_free_r+0x22>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	1821      	adds	r1, r4, r0
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf04      	itt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	6063      	str	r3, [r4, #4]
 8007ea6:	bf04      	itt	eq
 8007ea8:	1809      	addeq	r1, r1, r0
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	6054      	str	r4, [r2, #4]
 8007eae:	e7ca      	b.n	8007e46 <_free_r+0x22>
 8007eb0:	bd38      	pop	{r3, r4, r5, pc}
 8007eb2:	bf00      	nop
 8007eb4:	2000067c 	.word	0x2000067c

08007eb8 <sbrk_aligned>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef8 <sbrk_aligned+0x40>)
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	6831      	ldr	r1, [r6, #0]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b911      	cbnz	r1, 8007eca <sbrk_aligned+0x12>
 8007ec4:	f000 ff36 	bl	8008d34 <_sbrk_r>
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 ff31 	bl	8008d34 <_sbrk_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d103      	bne.n	8007ede <sbrk_aligned+0x26>
 8007ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eda:	4620      	mov	r0, r4
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d0f8      	beq.n	8007eda <sbrk_aligned+0x22>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 ff22 	bl	8008d34 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d1f2      	bne.n	8007eda <sbrk_aligned+0x22>
 8007ef4:	e7ef      	b.n	8007ed6 <sbrk_aligned+0x1e>
 8007ef6:	bf00      	nop
 8007ef8:	20000678 	.word	0x20000678

08007efc <_malloc_r>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	1ccd      	adds	r5, r1, #3
 8007f02:	f025 0503 	bic.w	r5, r5, #3
 8007f06:	3508      	adds	r5, #8
 8007f08:	2d0c      	cmp	r5, #12
 8007f0a:	bf38      	it	cc
 8007f0c:	250c      	movcc	r5, #12
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	4606      	mov	r6, r0
 8007f12:	db01      	blt.n	8007f18 <_malloc_r+0x1c>
 8007f14:	42a9      	cmp	r1, r5
 8007f16:	d904      	bls.n	8007f22 <_malloc_r+0x26>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff8 <_malloc_r+0xfc>
 8007f26:	f000 f869 	bl	8007ffc <__malloc_lock>
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	461c      	mov	r4, r3
 8007f30:	bb44      	cbnz	r4, 8007f84 <_malloc_r+0x88>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4630      	mov	r0, r6
 8007f36:	f7ff ffbf 	bl	8007eb8 <sbrk_aligned>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	d158      	bne.n	8007ff2 <_malloc_r+0xf6>
 8007f40:	f8d8 4000 	ldr.w	r4, [r8]
 8007f44:	4627      	mov	r7, r4
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	d143      	bne.n	8007fd2 <_malloc_r+0xd6>
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	d04b      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	4639      	mov	r1, r7
 8007f52:	4630      	mov	r0, r6
 8007f54:	eb04 0903 	add.w	r9, r4, r3
 8007f58:	f000 feec 	bl	8008d34 <_sbrk_r>
 8007f5c:	4581      	cmp	r9, r0
 8007f5e:	d142      	bne.n	8007fe6 <_malloc_r+0xea>
 8007f60:	6821      	ldr	r1, [r4, #0]
 8007f62:	1a6d      	subs	r5, r5, r1
 8007f64:	4629      	mov	r1, r5
 8007f66:	4630      	mov	r0, r6
 8007f68:	f7ff ffa6 	bl	8007eb8 <sbrk_aligned>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d03a      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	442b      	add	r3, r5
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	bb62      	cbnz	r2, 8007fd8 <_malloc_r+0xdc>
 8007f7e:	f8c8 7000 	str.w	r7, [r8]
 8007f82:	e00f      	b.n	8007fa4 <_malloc_r+0xa8>
 8007f84:	6822      	ldr	r2, [r4, #0]
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	d420      	bmi.n	8007fcc <_malloc_r+0xd0>
 8007f8a:	2a0b      	cmp	r2, #11
 8007f8c:	d917      	bls.n	8007fbe <_malloc_r+0xc2>
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	bf18      	it	ne
 8007f96:	6059      	strne	r1, [r3, #4]
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	bf08      	it	eq
 8007f9c:	f8c8 1000 	streq.w	r1, [r8]
 8007fa0:	5162      	str	r2, [r4, r5]
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f82f 	bl	8008008 <__malloc_unlock>
 8007faa:	f104 000b 	add.w	r0, r4, #11
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	f020 0007 	bic.w	r0, r0, #7
 8007fb4:	1ac2      	subs	r2, r0, r3
 8007fb6:	bf1c      	itt	ne
 8007fb8:	1a1b      	subne	r3, r3, r0
 8007fba:	50a3      	strne	r3, [r4, r2]
 8007fbc:	e7af      	b.n	8007f1e <_malloc_r+0x22>
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	bf0c      	ite	eq
 8007fc4:	f8c8 2000 	streq.w	r2, [r8]
 8007fc8:	605a      	strne	r2, [r3, #4]
 8007fca:	e7eb      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fcc:	4623      	mov	r3, r4
 8007fce:	6864      	ldr	r4, [r4, #4]
 8007fd0:	e7ae      	b.n	8007f30 <_malloc_r+0x34>
 8007fd2:	463c      	mov	r4, r7
 8007fd4:	687f      	ldr	r7, [r7, #4]
 8007fd6:	e7b6      	b.n	8007f46 <_malloc_r+0x4a>
 8007fd8:	461a      	mov	r2, r3
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d1fb      	bne.n	8007fd8 <_malloc_r+0xdc>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6053      	str	r3, [r2, #4]
 8007fe4:	e7de      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	6033      	str	r3, [r6, #0]
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 f80c 	bl	8008008 <__malloc_unlock>
 8007ff0:	e794      	b.n	8007f1c <_malloc_r+0x20>
 8007ff2:	6005      	str	r5, [r0, #0]
 8007ff4:	e7d6      	b.n	8007fa4 <_malloc_r+0xa8>
 8007ff6:	bf00      	nop
 8007ff8:	2000067c 	.word	0x2000067c

08007ffc <__malloc_lock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__malloc_lock+0x8>)
 8007ffe:	f7ff bf01 	b.w	8007e04 <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20000674 	.word	0x20000674

08008008 <__malloc_unlock>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__malloc_unlock+0x8>)
 800800a:	f7ff befc 	b.w	8007e06 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20000674 	.word	0x20000674

08008014 <__ssputs_r>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	688e      	ldr	r6, [r1, #8]
 800801a:	461f      	mov	r7, r3
 800801c:	42be      	cmp	r6, r7
 800801e:	680b      	ldr	r3, [r1, #0]
 8008020:	4682      	mov	sl, r0
 8008022:	460c      	mov	r4, r1
 8008024:	4690      	mov	r8, r2
 8008026:	d82d      	bhi.n	8008084 <__ssputs_r+0x70>
 8008028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800802c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008030:	d026      	beq.n	8008080 <__ssputs_r+0x6c>
 8008032:	6965      	ldr	r5, [r4, #20]
 8008034:	6909      	ldr	r1, [r1, #16]
 8008036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800803a:	eba3 0901 	sub.w	r9, r3, r1
 800803e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008042:	1c7b      	adds	r3, r7, #1
 8008044:	444b      	add	r3, r9
 8008046:	106d      	asrs	r5, r5, #1
 8008048:	429d      	cmp	r5, r3
 800804a:	bf38      	it	cc
 800804c:	461d      	movcc	r5, r3
 800804e:	0553      	lsls	r3, r2, #21
 8008050:	d527      	bpl.n	80080a2 <__ssputs_r+0x8e>
 8008052:	4629      	mov	r1, r5
 8008054:	f7ff ff52 	bl	8007efc <_malloc_r>
 8008058:	4606      	mov	r6, r0
 800805a:	b360      	cbz	r0, 80080b6 <__ssputs_r+0xa2>
 800805c:	6921      	ldr	r1, [r4, #16]
 800805e:	464a      	mov	r2, r9
 8008060:	f7ff fed2 	bl	8007e08 <memcpy>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800806a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	6126      	str	r6, [r4, #16]
 8008072:	6165      	str	r5, [r4, #20]
 8008074:	444e      	add	r6, r9
 8008076:	eba5 0509 	sub.w	r5, r5, r9
 800807a:	6026      	str	r6, [r4, #0]
 800807c:	60a5      	str	r5, [r4, #8]
 800807e:	463e      	mov	r6, r7
 8008080:	42be      	cmp	r6, r7
 8008082:	d900      	bls.n	8008086 <__ssputs_r+0x72>
 8008084:	463e      	mov	r6, r7
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	4632      	mov	r2, r6
 800808a:	4641      	mov	r1, r8
 800808c:	f000 fe37 	bl	8008cfe <memmove>
 8008090:	68a3      	ldr	r3, [r4, #8]
 8008092:	1b9b      	subs	r3, r3, r6
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	4433      	add	r3, r6
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	2000      	movs	r0, #0
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	462a      	mov	r2, r5
 80080a4:	f000 fe56 	bl	8008d54 <_realloc_r>
 80080a8:	4606      	mov	r6, r0
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1e0      	bne.n	8008070 <__ssputs_r+0x5c>
 80080ae:	6921      	ldr	r1, [r4, #16]
 80080b0:	4650      	mov	r0, sl
 80080b2:	f7ff feb7 	bl	8007e24 <_free_r>
 80080b6:	230c      	movs	r3, #12
 80080b8:	f8ca 3000 	str.w	r3, [sl]
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	e7e9      	b.n	800809e <__ssputs_r+0x8a>
	...

080080cc <_svfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	4698      	mov	r8, r3
 80080d2:	898b      	ldrh	r3, [r1, #12]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	b09d      	sub	sp, #116	@ 0x74
 80080d8:	4607      	mov	r7, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	4614      	mov	r4, r2
 80080de:	d510      	bpl.n	8008102 <_svfiprintf_r+0x36>
 80080e0:	690b      	ldr	r3, [r1, #16]
 80080e2:	b973      	cbnz	r3, 8008102 <_svfiprintf_r+0x36>
 80080e4:	2140      	movs	r1, #64	@ 0x40
 80080e6:	f7ff ff09 	bl	8007efc <_malloc_r>
 80080ea:	6028      	str	r0, [r5, #0]
 80080ec:	6128      	str	r0, [r5, #16]
 80080ee:	b930      	cbnz	r0, 80080fe <_svfiprintf_r+0x32>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b01d      	add	sp, #116	@ 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	2340      	movs	r3, #64	@ 0x40
 8008100:	616b      	str	r3, [r5, #20]
 8008102:	2300      	movs	r3, #0
 8008104:	9309      	str	r3, [sp, #36]	@ 0x24
 8008106:	2320      	movs	r3, #32
 8008108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800810c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008110:	2330      	movs	r3, #48	@ 0x30
 8008112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082b0 <_svfiprintf_r+0x1e4>
 8008116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800811a:	f04f 0901 	mov.w	r9, #1
 800811e:	4623      	mov	r3, r4
 8008120:	469a      	mov	sl, r3
 8008122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008126:	b10a      	cbz	r2, 800812c <_svfiprintf_r+0x60>
 8008128:	2a25      	cmp	r2, #37	@ 0x25
 800812a:	d1f9      	bne.n	8008120 <_svfiprintf_r+0x54>
 800812c:	ebba 0b04 	subs.w	fp, sl, r4
 8008130:	d00b      	beq.n	800814a <_svfiprintf_r+0x7e>
 8008132:	465b      	mov	r3, fp
 8008134:	4622      	mov	r2, r4
 8008136:	4629      	mov	r1, r5
 8008138:	4638      	mov	r0, r7
 800813a:	f7ff ff6b 	bl	8008014 <__ssputs_r>
 800813e:	3001      	adds	r0, #1
 8008140:	f000 80a7 	beq.w	8008292 <_svfiprintf_r+0x1c6>
 8008144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008146:	445a      	add	r2, fp
 8008148:	9209      	str	r2, [sp, #36]	@ 0x24
 800814a:	f89a 3000 	ldrb.w	r3, [sl]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 809f 	beq.w	8008292 <_svfiprintf_r+0x1c6>
 8008154:	2300      	movs	r3, #0
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815e:	f10a 0a01 	add.w	sl, sl, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	9307      	str	r3, [sp, #28]
 8008166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800816a:	931a      	str	r3, [sp, #104]	@ 0x68
 800816c:	4654      	mov	r4, sl
 800816e:	2205      	movs	r2, #5
 8008170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008174:	484e      	ldr	r0, [pc, #312]	@ (80082b0 <_svfiprintf_r+0x1e4>)
 8008176:	f7f8 f853 	bl	8000220 <memchr>
 800817a:	9a04      	ldr	r2, [sp, #16]
 800817c:	b9d8      	cbnz	r0, 80081b6 <_svfiprintf_r+0xea>
 800817e:	06d0      	lsls	r0, r2, #27
 8008180:	bf44      	itt	mi
 8008182:	2320      	movmi	r3, #32
 8008184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008188:	0711      	lsls	r1, r2, #28
 800818a:	bf44      	itt	mi
 800818c:	232b      	movmi	r3, #43	@ 0x2b
 800818e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008192:	f89a 3000 	ldrb.w	r3, [sl]
 8008196:	2b2a      	cmp	r3, #42	@ 0x2a
 8008198:	d015      	beq.n	80081c6 <_svfiprintf_r+0xfa>
 800819a:	9a07      	ldr	r2, [sp, #28]
 800819c:	4654      	mov	r4, sl
 800819e:	2000      	movs	r0, #0
 80081a0:	f04f 0c0a 	mov.w	ip, #10
 80081a4:	4621      	mov	r1, r4
 80081a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081aa:	3b30      	subs	r3, #48	@ 0x30
 80081ac:	2b09      	cmp	r3, #9
 80081ae:	d94b      	bls.n	8008248 <_svfiprintf_r+0x17c>
 80081b0:	b1b0      	cbz	r0, 80081e0 <_svfiprintf_r+0x114>
 80081b2:	9207      	str	r2, [sp, #28]
 80081b4:	e014      	b.n	80081e0 <_svfiprintf_r+0x114>
 80081b6:	eba0 0308 	sub.w	r3, r0, r8
 80081ba:	fa09 f303 	lsl.w	r3, r9, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	46a2      	mov	sl, r4
 80081c4:	e7d2      	b.n	800816c <_svfiprintf_r+0xa0>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	1d19      	adds	r1, r3, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	9103      	str	r1, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfbb      	ittet	lt
 80081d2:	425b      	neglt	r3, r3
 80081d4:	f042 0202 	orrlt.w	r2, r2, #2
 80081d8:	9307      	strge	r3, [sp, #28]
 80081da:	9307      	strlt	r3, [sp, #28]
 80081dc:	bfb8      	it	lt
 80081de:	9204      	strlt	r2, [sp, #16]
 80081e0:	7823      	ldrb	r3, [r4, #0]
 80081e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081e4:	d10a      	bne.n	80081fc <_svfiprintf_r+0x130>
 80081e6:	7863      	ldrb	r3, [r4, #1]
 80081e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ea:	d132      	bne.n	8008252 <_svfiprintf_r+0x186>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081f8:	3402      	adds	r4, #2
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082c0 <_svfiprintf_r+0x1f4>
 8008200:	7821      	ldrb	r1, [r4, #0]
 8008202:	2203      	movs	r2, #3
 8008204:	4650      	mov	r0, sl
 8008206:	f7f8 f80b 	bl	8000220 <memchr>
 800820a:	b138      	cbz	r0, 800821c <_svfiprintf_r+0x150>
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	eba0 000a 	sub.w	r0, r0, sl
 8008212:	2240      	movs	r2, #64	@ 0x40
 8008214:	4082      	lsls	r2, r0
 8008216:	4313      	orrs	r3, r2
 8008218:	3401      	adds	r4, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008220:	4824      	ldr	r0, [pc, #144]	@ (80082b4 <_svfiprintf_r+0x1e8>)
 8008222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008226:	2206      	movs	r2, #6
 8008228:	f7f7 fffa 	bl	8000220 <memchr>
 800822c:	2800      	cmp	r0, #0
 800822e:	d036      	beq.n	800829e <_svfiprintf_r+0x1d2>
 8008230:	4b21      	ldr	r3, [pc, #132]	@ (80082b8 <_svfiprintf_r+0x1ec>)
 8008232:	bb1b      	cbnz	r3, 800827c <_svfiprintf_r+0x1b0>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	3307      	adds	r3, #7
 8008238:	f023 0307 	bic.w	r3, r3, #7
 800823c:	3308      	adds	r3, #8
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008242:	4433      	add	r3, r6
 8008244:	9309      	str	r3, [sp, #36]	@ 0x24
 8008246:	e76a      	b.n	800811e <_svfiprintf_r+0x52>
 8008248:	fb0c 3202 	mla	r2, ip, r2, r3
 800824c:	460c      	mov	r4, r1
 800824e:	2001      	movs	r0, #1
 8008250:	e7a8      	b.n	80081a4 <_svfiprintf_r+0xd8>
 8008252:	2300      	movs	r3, #0
 8008254:	3401      	adds	r4, #1
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	4619      	mov	r1, r3
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4620      	mov	r0, r4
 8008260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008264:	3a30      	subs	r2, #48	@ 0x30
 8008266:	2a09      	cmp	r2, #9
 8008268:	d903      	bls.n	8008272 <_svfiprintf_r+0x1a6>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0c6      	beq.n	80081fc <_svfiprintf_r+0x130>
 800826e:	9105      	str	r1, [sp, #20]
 8008270:	e7c4      	b.n	80081fc <_svfiprintf_r+0x130>
 8008272:	fb0c 2101 	mla	r1, ip, r1, r2
 8008276:	4604      	mov	r4, r0
 8008278:	2301      	movs	r3, #1
 800827a:	e7f0      	b.n	800825e <_svfiprintf_r+0x192>
 800827c:	ab03      	add	r3, sp, #12
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	462a      	mov	r2, r5
 8008282:	4b0e      	ldr	r3, [pc, #56]	@ (80082bc <_svfiprintf_r+0x1f0>)
 8008284:	a904      	add	r1, sp, #16
 8008286:	4638      	mov	r0, r7
 8008288:	f3af 8000 	nop.w
 800828c:	1c42      	adds	r2, r0, #1
 800828e:	4606      	mov	r6, r0
 8008290:	d1d6      	bne.n	8008240 <_svfiprintf_r+0x174>
 8008292:	89ab      	ldrh	r3, [r5, #12]
 8008294:	065b      	lsls	r3, r3, #25
 8008296:	f53f af2d 	bmi.w	80080f4 <_svfiprintf_r+0x28>
 800829a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800829c:	e72c      	b.n	80080f8 <_svfiprintf_r+0x2c>
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	462a      	mov	r2, r5
 80082a4:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <_svfiprintf_r+0x1f0>)
 80082a6:	a904      	add	r1, sp, #16
 80082a8:	4638      	mov	r0, r7
 80082aa:	f000 fa49 	bl	8008740 <_printf_i>
 80082ae:	e7ed      	b.n	800828c <_svfiprintf_r+0x1c0>
 80082b0:	0800926c 	.word	0x0800926c
 80082b4:	08009276 	.word	0x08009276
 80082b8:	00000000 	.word	0x00000000
 80082bc:	08008015 	.word	0x08008015
 80082c0:	08009272 	.word	0x08009272

080082c4 <_sungetc_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	1c4b      	adds	r3, r1, #1
 80082c8:	4614      	mov	r4, r2
 80082ca:	d103      	bne.n	80082d4 <_sungetc_r+0x10>
 80082cc:	f04f 35ff 	mov.w	r5, #4294967295
 80082d0:	4628      	mov	r0, r5
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	8993      	ldrh	r3, [r2, #12]
 80082d6:	f023 0320 	bic.w	r3, r3, #32
 80082da:	8193      	strh	r3, [r2, #12]
 80082dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082de:	6852      	ldr	r2, [r2, #4]
 80082e0:	b2cd      	uxtb	r5, r1
 80082e2:	b18b      	cbz	r3, 8008308 <_sungetc_r+0x44>
 80082e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082e6:	4293      	cmp	r3, r2
 80082e8:	dd08      	ble.n	80082fc <_sungetc_r+0x38>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	1e5a      	subs	r2, r3, #1
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80082f4:	6863      	ldr	r3, [r4, #4]
 80082f6:	3301      	adds	r3, #1
 80082f8:	6063      	str	r3, [r4, #4]
 80082fa:	e7e9      	b.n	80082d0 <_sungetc_r+0xc>
 80082fc:	4621      	mov	r1, r4
 80082fe:	f000 fcc4 	bl	8008c8a <__submore>
 8008302:	2800      	cmp	r0, #0
 8008304:	d0f1      	beq.n	80082ea <_sungetc_r+0x26>
 8008306:	e7e1      	b.n	80082cc <_sungetc_r+0x8>
 8008308:	6921      	ldr	r1, [r4, #16]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	b151      	cbz	r1, 8008324 <_sungetc_r+0x60>
 800830e:	4299      	cmp	r1, r3
 8008310:	d208      	bcs.n	8008324 <_sungetc_r+0x60>
 8008312:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008316:	42a9      	cmp	r1, r5
 8008318:	d104      	bne.n	8008324 <_sungetc_r+0x60>
 800831a:	3b01      	subs	r3, #1
 800831c:	3201      	adds	r2, #1
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	6062      	str	r2, [r4, #4]
 8008322:	e7d5      	b.n	80082d0 <_sungetc_r+0xc>
 8008324:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800832c:	6363      	str	r3, [r4, #52]	@ 0x34
 800832e:	2303      	movs	r3, #3
 8008330:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008332:	4623      	mov	r3, r4
 8008334:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	2301      	movs	r3, #1
 800833c:	e7dc      	b.n	80082f8 <_sungetc_r+0x34>

0800833e <__ssrefill_r>:
 800833e:	b510      	push	{r4, lr}
 8008340:	460c      	mov	r4, r1
 8008342:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008344:	b169      	cbz	r1, 8008362 <__ssrefill_r+0x24>
 8008346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800834a:	4299      	cmp	r1, r3
 800834c:	d001      	beq.n	8008352 <__ssrefill_r+0x14>
 800834e:	f7ff fd69 	bl	8007e24 <_free_r>
 8008352:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	2000      	movs	r0, #0
 8008358:	6360      	str	r0, [r4, #52]	@ 0x34
 800835a:	b113      	cbz	r3, 8008362 <__ssrefill_r+0x24>
 800835c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	bd10      	pop	{r4, pc}
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	2300      	movs	r3, #0
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f043 0320 	orr.w	r3, r3, #32
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	e7f3      	b.n	8008360 <__ssrefill_r+0x22>

08008378 <__ssvfiscanf_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	460c      	mov	r4, r1
 800837e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8008382:	2100      	movs	r1, #0
 8008384:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008388:	49a6      	ldr	r1, [pc, #664]	@ (8008624 <__ssvfiscanf_r+0x2ac>)
 800838a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800838c:	f10d 0804 	add.w	r8, sp, #4
 8008390:	49a5      	ldr	r1, [pc, #660]	@ (8008628 <__ssvfiscanf_r+0x2b0>)
 8008392:	4fa6      	ldr	r7, [pc, #664]	@ (800862c <__ssvfiscanf_r+0x2b4>)
 8008394:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008398:	4606      	mov	r6, r0
 800839a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	f892 9000 	ldrb.w	r9, [r2]
 80083a2:	f1b9 0f00 	cmp.w	r9, #0
 80083a6:	f000 8158 	beq.w	800865a <__ssvfiscanf_r+0x2e2>
 80083aa:	f817 3009 	ldrb.w	r3, [r7, r9]
 80083ae:	f013 0308 	ands.w	r3, r3, #8
 80083b2:	f102 0501 	add.w	r5, r2, #1
 80083b6:	d019      	beq.n	80083ec <__ssvfiscanf_r+0x74>
 80083b8:	6863      	ldr	r3, [r4, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dd0f      	ble.n	80083de <__ssvfiscanf_r+0x66>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	5cba      	ldrb	r2, [r7, r2]
 80083c4:	0712      	lsls	r2, r2, #28
 80083c6:	d401      	bmi.n	80083cc <__ssvfiscanf_r+0x54>
 80083c8:	462a      	mov	r2, r5
 80083ca:	e7e8      	b.n	800839e <__ssvfiscanf_r+0x26>
 80083cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80083ce:	3201      	adds	r2, #1
 80083d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80083d2:	6862      	ldr	r2, [r4, #4]
 80083d4:	3301      	adds	r3, #1
 80083d6:	3a01      	subs	r2, #1
 80083d8:	6062      	str	r2, [r4, #4]
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	e7ec      	b.n	80083b8 <__ssvfiscanf_r+0x40>
 80083de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80083e0:	4621      	mov	r1, r4
 80083e2:	4630      	mov	r0, r6
 80083e4:	4798      	blx	r3
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0e9      	beq.n	80083be <__ssvfiscanf_r+0x46>
 80083ea:	e7ed      	b.n	80083c8 <__ssvfiscanf_r+0x50>
 80083ec:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80083f0:	f040 8085 	bne.w	80084fe <__ssvfiscanf_r+0x186>
 80083f4:	9341      	str	r3, [sp, #260]	@ 0x104
 80083f6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80083f8:	7853      	ldrb	r3, [r2, #1]
 80083fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80083fc:	bf02      	ittt	eq
 80083fe:	2310      	moveq	r3, #16
 8008400:	1c95      	addeq	r5, r2, #2
 8008402:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008404:	220a      	movs	r2, #10
 8008406:	46aa      	mov	sl, r5
 8008408:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800840c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008410:	2b09      	cmp	r3, #9
 8008412:	d91e      	bls.n	8008452 <__ssvfiscanf_r+0xda>
 8008414:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8008630 <__ssvfiscanf_r+0x2b8>
 8008418:	2203      	movs	r2, #3
 800841a:	4658      	mov	r0, fp
 800841c:	f7f7 ff00 	bl	8000220 <memchr>
 8008420:	b138      	cbz	r0, 8008432 <__ssvfiscanf_r+0xba>
 8008422:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008424:	eba0 000b 	sub.w	r0, r0, fp
 8008428:	2301      	movs	r3, #1
 800842a:	4083      	lsls	r3, r0
 800842c:	4313      	orrs	r3, r2
 800842e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008430:	4655      	mov	r5, sl
 8008432:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008436:	2b78      	cmp	r3, #120	@ 0x78
 8008438:	d806      	bhi.n	8008448 <__ssvfiscanf_r+0xd0>
 800843a:	2b57      	cmp	r3, #87	@ 0x57
 800843c:	d810      	bhi.n	8008460 <__ssvfiscanf_r+0xe8>
 800843e:	2b25      	cmp	r3, #37	@ 0x25
 8008440:	d05d      	beq.n	80084fe <__ssvfiscanf_r+0x186>
 8008442:	d857      	bhi.n	80084f4 <__ssvfiscanf_r+0x17c>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d075      	beq.n	8008534 <__ssvfiscanf_r+0x1bc>
 8008448:	2303      	movs	r3, #3
 800844a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800844c:	230a      	movs	r3, #10
 800844e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008450:	e088      	b.n	8008564 <__ssvfiscanf_r+0x1ec>
 8008452:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008454:	fb02 1103 	mla	r1, r2, r3, r1
 8008458:	3930      	subs	r1, #48	@ 0x30
 800845a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800845c:	4655      	mov	r5, sl
 800845e:	e7d2      	b.n	8008406 <__ssvfiscanf_r+0x8e>
 8008460:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008464:	2a20      	cmp	r2, #32
 8008466:	d8ef      	bhi.n	8008448 <__ssvfiscanf_r+0xd0>
 8008468:	a101      	add	r1, pc, #4	@ (adr r1, 8008470 <__ssvfiscanf_r+0xf8>)
 800846a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008543 	.word	0x08008543
 8008474:	08008449 	.word	0x08008449
 8008478:	08008449 	.word	0x08008449
 800847c:	0800859d 	.word	0x0800859d
 8008480:	08008449 	.word	0x08008449
 8008484:	08008449 	.word	0x08008449
 8008488:	08008449 	.word	0x08008449
 800848c:	08008449 	.word	0x08008449
 8008490:	08008449 	.word	0x08008449
 8008494:	08008449 	.word	0x08008449
 8008498:	08008449 	.word	0x08008449
 800849c:	080085b3 	.word	0x080085b3
 80084a0:	08008599 	.word	0x08008599
 80084a4:	080084fb 	.word	0x080084fb
 80084a8:	080084fb 	.word	0x080084fb
 80084ac:	080084fb 	.word	0x080084fb
 80084b0:	08008449 	.word	0x08008449
 80084b4:	08008555 	.word	0x08008555
 80084b8:	08008449 	.word	0x08008449
 80084bc:	08008449 	.word	0x08008449
 80084c0:	08008449 	.word	0x08008449
 80084c4:	08008449 	.word	0x08008449
 80084c8:	080085c3 	.word	0x080085c3
 80084cc:	0800855d 	.word	0x0800855d
 80084d0:	0800853b 	.word	0x0800853b
 80084d4:	08008449 	.word	0x08008449
 80084d8:	08008449 	.word	0x08008449
 80084dc:	080085bf 	.word	0x080085bf
 80084e0:	08008449 	.word	0x08008449
 80084e4:	08008599 	.word	0x08008599
 80084e8:	08008449 	.word	0x08008449
 80084ec:	08008449 	.word	0x08008449
 80084f0:	08008543 	.word	0x08008543
 80084f4:	3b45      	subs	r3, #69	@ 0x45
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d8a6      	bhi.n	8008448 <__ssvfiscanf_r+0xd0>
 80084fa:	2305      	movs	r3, #5
 80084fc:	e031      	b.n	8008562 <__ssvfiscanf_r+0x1ea>
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd0d      	ble.n	8008520 <__ssvfiscanf_r+0x1a8>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	454a      	cmp	r2, r9
 800850a:	f040 80a6 	bne.w	800865a <__ssvfiscanf_r+0x2e2>
 800850e:	3301      	adds	r3, #1
 8008510:	6862      	ldr	r2, [r4, #4]
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008516:	3a01      	subs	r2, #1
 8008518:	3301      	adds	r3, #1
 800851a:	6062      	str	r2, [r4, #4]
 800851c:	9345      	str	r3, [sp, #276]	@ 0x114
 800851e:	e753      	b.n	80083c8 <__ssvfiscanf_r+0x50>
 8008520:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008522:	4621      	mov	r1, r4
 8008524:	4630      	mov	r0, r6
 8008526:	4798      	blx	r3
 8008528:	2800      	cmp	r0, #0
 800852a:	d0eb      	beq.n	8008504 <__ssvfiscanf_r+0x18c>
 800852c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800852e:	2800      	cmp	r0, #0
 8008530:	f040 808b 	bne.w	800864a <__ssvfiscanf_r+0x2d2>
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e08b      	b.n	8008652 <__ssvfiscanf_r+0x2da>
 800853a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800853c:	f042 0220 	orr.w	r2, r2, #32
 8008540:	9241      	str	r2, [sp, #260]	@ 0x104
 8008542:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008548:	9241      	str	r2, [sp, #260]	@ 0x104
 800854a:	2210      	movs	r2, #16
 800854c:	2b6e      	cmp	r3, #110	@ 0x6e
 800854e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008550:	d902      	bls.n	8008558 <__ssvfiscanf_r+0x1e0>
 8008552:	e005      	b.n	8008560 <__ssvfiscanf_r+0x1e8>
 8008554:	2300      	movs	r3, #0
 8008556:	9342      	str	r3, [sp, #264]	@ 0x108
 8008558:	2303      	movs	r3, #3
 800855a:	e002      	b.n	8008562 <__ssvfiscanf_r+0x1ea>
 800855c:	2308      	movs	r3, #8
 800855e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008560:	2304      	movs	r3, #4
 8008562:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	dd39      	ble.n	80085de <__ssvfiscanf_r+0x266>
 800856a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800856c:	0659      	lsls	r1, r3, #25
 800856e:	d404      	bmi.n	800857a <__ssvfiscanf_r+0x202>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	781a      	ldrb	r2, [r3, #0]
 8008574:	5cba      	ldrb	r2, [r7, r2]
 8008576:	0712      	lsls	r2, r2, #28
 8008578:	d438      	bmi.n	80085ec <__ssvfiscanf_r+0x274>
 800857a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800857c:	2b02      	cmp	r3, #2
 800857e:	dc47      	bgt.n	8008610 <__ssvfiscanf_r+0x298>
 8008580:	466b      	mov	r3, sp
 8008582:	4622      	mov	r2, r4
 8008584:	a941      	add	r1, sp, #260	@ 0x104
 8008586:	4630      	mov	r0, r6
 8008588:	f000 f9f8 	bl	800897c <_scanf_chars>
 800858c:	2801      	cmp	r0, #1
 800858e:	d064      	beq.n	800865a <__ssvfiscanf_r+0x2e2>
 8008590:	2802      	cmp	r0, #2
 8008592:	f47f af19 	bne.w	80083c8 <__ssvfiscanf_r+0x50>
 8008596:	e7c9      	b.n	800852c <__ssvfiscanf_r+0x1b4>
 8008598:	220a      	movs	r2, #10
 800859a:	e7d7      	b.n	800854c <__ssvfiscanf_r+0x1d4>
 800859c:	4629      	mov	r1, r5
 800859e:	4640      	mov	r0, r8
 80085a0:	f000 fb3a 	bl	8008c18 <__sccl>
 80085a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80085a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80085ac:	4605      	mov	r5, r0
 80085ae:	2301      	movs	r3, #1
 80085b0:	e7d7      	b.n	8008562 <__ssvfiscanf_r+0x1ea>
 80085b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80085b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80085ba:	2300      	movs	r3, #0
 80085bc:	e7d1      	b.n	8008562 <__ssvfiscanf_r+0x1ea>
 80085be:	2302      	movs	r3, #2
 80085c0:	e7cf      	b.n	8008562 <__ssvfiscanf_r+0x1ea>
 80085c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80085c4:	06c3      	lsls	r3, r0, #27
 80085c6:	f53f aeff 	bmi.w	80083c8 <__ssvfiscanf_r+0x50>
 80085ca:	9b00      	ldr	r3, [sp, #0]
 80085cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80085ce:	1d19      	adds	r1, r3, #4
 80085d0:	9100      	str	r1, [sp, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	07c0      	lsls	r0, r0, #31
 80085d6:	bf4c      	ite	mi
 80085d8:	801a      	strhmi	r2, [r3, #0]
 80085da:	601a      	strpl	r2, [r3, #0]
 80085dc:	e6f4      	b.n	80083c8 <__ssvfiscanf_r+0x50>
 80085de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80085e0:	4621      	mov	r1, r4
 80085e2:	4630      	mov	r0, r6
 80085e4:	4798      	blx	r3
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d0bf      	beq.n	800856a <__ssvfiscanf_r+0x1f2>
 80085ea:	e79f      	b.n	800852c <__ssvfiscanf_r+0x1b4>
 80085ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80085ee:	3201      	adds	r2, #1
 80085f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80085f2:	6862      	ldr	r2, [r4, #4]
 80085f4:	3a01      	subs	r2, #1
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	6062      	str	r2, [r4, #4]
 80085fa:	dd02      	ble.n	8008602 <__ssvfiscanf_r+0x28a>
 80085fc:	3301      	adds	r3, #1
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	e7b6      	b.n	8008570 <__ssvfiscanf_r+0x1f8>
 8008602:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008604:	4621      	mov	r1, r4
 8008606:	4630      	mov	r0, r6
 8008608:	4798      	blx	r3
 800860a:	2800      	cmp	r0, #0
 800860c:	d0b0      	beq.n	8008570 <__ssvfiscanf_r+0x1f8>
 800860e:	e78d      	b.n	800852c <__ssvfiscanf_r+0x1b4>
 8008610:	2b04      	cmp	r3, #4
 8008612:	dc0f      	bgt.n	8008634 <__ssvfiscanf_r+0x2bc>
 8008614:	466b      	mov	r3, sp
 8008616:	4622      	mov	r2, r4
 8008618:	a941      	add	r1, sp, #260	@ 0x104
 800861a:	4630      	mov	r0, r6
 800861c:	f000 fa08 	bl	8008a30 <_scanf_i>
 8008620:	e7b4      	b.n	800858c <__ssvfiscanf_r+0x214>
 8008622:	bf00      	nop
 8008624:	080082c5 	.word	0x080082c5
 8008628:	0800833f 	.word	0x0800833f
 800862c:	080092bb 	.word	0x080092bb
 8008630:	08009272 	.word	0x08009272
 8008634:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <__ssvfiscanf_r+0x2e8>)
 8008636:	2b00      	cmp	r3, #0
 8008638:	f43f aec6 	beq.w	80083c8 <__ssvfiscanf_r+0x50>
 800863c:	466b      	mov	r3, sp
 800863e:	4622      	mov	r2, r4
 8008640:	a941      	add	r1, sp, #260	@ 0x104
 8008642:	4630      	mov	r0, r6
 8008644:	f3af 8000 	nop.w
 8008648:	e7a0      	b.n	800858c <__ssvfiscanf_r+0x214>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	065b      	lsls	r3, r3, #25
 800864e:	f53f af71 	bmi.w	8008534 <__ssvfiscanf_r+0x1bc>
 8008652:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800865c:	e7f9      	b.n	8008652 <__ssvfiscanf_r+0x2da>
 800865e:	bf00      	nop
 8008660:	00000000 	.word	0x00000000

08008664 <_printf_common>:
 8008664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008668:	4616      	mov	r6, r2
 800866a:	4698      	mov	r8, r3
 800866c:	688a      	ldr	r2, [r1, #8]
 800866e:	690b      	ldr	r3, [r1, #16]
 8008670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008674:	4293      	cmp	r3, r2
 8008676:	bfb8      	it	lt
 8008678:	4613      	movlt	r3, r2
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008680:	4607      	mov	r7, r0
 8008682:	460c      	mov	r4, r1
 8008684:	b10a      	cbz	r2, 800868a <_printf_common+0x26>
 8008686:	3301      	adds	r3, #1
 8008688:	6033      	str	r3, [r6, #0]
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	0699      	lsls	r1, r3, #26
 800868e:	bf42      	ittt	mi
 8008690:	6833      	ldrmi	r3, [r6, #0]
 8008692:	3302      	addmi	r3, #2
 8008694:	6033      	strmi	r3, [r6, #0]
 8008696:	6825      	ldr	r5, [r4, #0]
 8008698:	f015 0506 	ands.w	r5, r5, #6
 800869c:	d106      	bne.n	80086ac <_printf_common+0x48>
 800869e:	f104 0a19 	add.w	sl, r4, #25
 80086a2:	68e3      	ldr	r3, [r4, #12]
 80086a4:	6832      	ldr	r2, [r6, #0]
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	dc26      	bgt.n	80086fa <_printf_common+0x96>
 80086ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086b0:	6822      	ldr	r2, [r4, #0]
 80086b2:	3b00      	subs	r3, #0
 80086b4:	bf18      	it	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	0692      	lsls	r2, r2, #26
 80086ba:	d42b      	bmi.n	8008714 <_printf_common+0xb0>
 80086bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086c0:	4641      	mov	r1, r8
 80086c2:	4638      	mov	r0, r7
 80086c4:	47c8      	blx	r9
 80086c6:	3001      	adds	r0, #1
 80086c8:	d01e      	beq.n	8008708 <_printf_common+0xa4>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6922      	ldr	r2, [r4, #16]
 80086ce:	f003 0306 	and.w	r3, r3, #6
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	bf02      	ittt	eq
 80086d6:	68e5      	ldreq	r5, [r4, #12]
 80086d8:	6833      	ldreq	r3, [r6, #0]
 80086da:	1aed      	subeq	r5, r5, r3
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	bf0c      	ite	eq
 80086e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e4:	2500      	movne	r5, #0
 80086e6:	4293      	cmp	r3, r2
 80086e8:	bfc4      	itt	gt
 80086ea:	1a9b      	subgt	r3, r3, r2
 80086ec:	18ed      	addgt	r5, r5, r3
 80086ee:	2600      	movs	r6, #0
 80086f0:	341a      	adds	r4, #26
 80086f2:	42b5      	cmp	r5, r6
 80086f4:	d11a      	bne.n	800872c <_printf_common+0xc8>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e008      	b.n	800870c <_printf_common+0xa8>
 80086fa:	2301      	movs	r3, #1
 80086fc:	4652      	mov	r2, sl
 80086fe:	4641      	mov	r1, r8
 8008700:	4638      	mov	r0, r7
 8008702:	47c8      	blx	r9
 8008704:	3001      	adds	r0, #1
 8008706:	d103      	bne.n	8008710 <_printf_common+0xac>
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008710:	3501      	adds	r5, #1
 8008712:	e7c6      	b.n	80086a2 <_printf_common+0x3e>
 8008714:	18e1      	adds	r1, r4, r3
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	2030      	movs	r0, #48	@ 0x30
 800871a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800871e:	4422      	add	r2, r4
 8008720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008728:	3302      	adds	r3, #2
 800872a:	e7c7      	b.n	80086bc <_printf_common+0x58>
 800872c:	2301      	movs	r3, #1
 800872e:	4622      	mov	r2, r4
 8008730:	4641      	mov	r1, r8
 8008732:	4638      	mov	r0, r7
 8008734:	47c8      	blx	r9
 8008736:	3001      	adds	r0, #1
 8008738:	d0e6      	beq.n	8008708 <_printf_common+0xa4>
 800873a:	3601      	adds	r6, #1
 800873c:	e7d9      	b.n	80086f2 <_printf_common+0x8e>
	...

08008740 <_printf_i>:
 8008740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	7e0f      	ldrb	r7, [r1, #24]
 8008746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008748:	2f78      	cmp	r7, #120	@ 0x78
 800874a:	4691      	mov	r9, r2
 800874c:	4680      	mov	r8, r0
 800874e:	460c      	mov	r4, r1
 8008750:	469a      	mov	sl, r3
 8008752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008756:	d807      	bhi.n	8008768 <_printf_i+0x28>
 8008758:	2f62      	cmp	r7, #98	@ 0x62
 800875a:	d80a      	bhi.n	8008772 <_printf_i+0x32>
 800875c:	2f00      	cmp	r7, #0
 800875e:	f000 80d1 	beq.w	8008904 <_printf_i+0x1c4>
 8008762:	2f58      	cmp	r7, #88	@ 0x58
 8008764:	f000 80b8 	beq.w	80088d8 <_printf_i+0x198>
 8008768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800876c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008770:	e03a      	b.n	80087e8 <_printf_i+0xa8>
 8008772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008776:	2b15      	cmp	r3, #21
 8008778:	d8f6      	bhi.n	8008768 <_printf_i+0x28>
 800877a:	a101      	add	r1, pc, #4	@ (adr r1, 8008780 <_printf_i+0x40>)
 800877c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087ed 	.word	0x080087ed
 8008788:	08008769 	.word	0x08008769
 800878c:	08008769 	.word	0x08008769
 8008790:	08008769 	.word	0x08008769
 8008794:	08008769 	.word	0x08008769
 8008798:	080087ed 	.word	0x080087ed
 800879c:	08008769 	.word	0x08008769
 80087a0:	08008769 	.word	0x08008769
 80087a4:	08008769 	.word	0x08008769
 80087a8:	08008769 	.word	0x08008769
 80087ac:	080088eb 	.word	0x080088eb
 80087b0:	08008817 	.word	0x08008817
 80087b4:	080088a5 	.word	0x080088a5
 80087b8:	08008769 	.word	0x08008769
 80087bc:	08008769 	.word	0x08008769
 80087c0:	0800890d 	.word	0x0800890d
 80087c4:	08008769 	.word	0x08008769
 80087c8:	08008817 	.word	0x08008817
 80087cc:	08008769 	.word	0x08008769
 80087d0:	08008769 	.word	0x08008769
 80087d4:	080088ad 	.word	0x080088ad
 80087d8:	6833      	ldr	r3, [r6, #0]
 80087da:	1d1a      	adds	r2, r3, #4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6032      	str	r2, [r6, #0]
 80087e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087e8:	2301      	movs	r3, #1
 80087ea:	e09c      	b.n	8008926 <_printf_i+0x1e6>
 80087ec:	6833      	ldr	r3, [r6, #0]
 80087ee:	6820      	ldr	r0, [r4, #0]
 80087f0:	1d19      	adds	r1, r3, #4
 80087f2:	6031      	str	r1, [r6, #0]
 80087f4:	0606      	lsls	r6, r0, #24
 80087f6:	d501      	bpl.n	80087fc <_printf_i+0xbc>
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	e003      	b.n	8008804 <_printf_i+0xc4>
 80087fc:	0645      	lsls	r5, r0, #25
 80087fe:	d5fb      	bpl.n	80087f8 <_printf_i+0xb8>
 8008800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008804:	2d00      	cmp	r5, #0
 8008806:	da03      	bge.n	8008810 <_printf_i+0xd0>
 8008808:	232d      	movs	r3, #45	@ 0x2d
 800880a:	426d      	negs	r5, r5
 800880c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008810:	4858      	ldr	r0, [pc, #352]	@ (8008974 <_printf_i+0x234>)
 8008812:	230a      	movs	r3, #10
 8008814:	e011      	b.n	800883a <_printf_i+0xfa>
 8008816:	6821      	ldr	r1, [r4, #0]
 8008818:	6833      	ldr	r3, [r6, #0]
 800881a:	0608      	lsls	r0, r1, #24
 800881c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008820:	d402      	bmi.n	8008828 <_printf_i+0xe8>
 8008822:	0649      	lsls	r1, r1, #25
 8008824:	bf48      	it	mi
 8008826:	b2ad      	uxthmi	r5, r5
 8008828:	2f6f      	cmp	r7, #111	@ 0x6f
 800882a:	4852      	ldr	r0, [pc, #328]	@ (8008974 <_printf_i+0x234>)
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	bf14      	ite	ne
 8008830:	230a      	movne	r3, #10
 8008832:	2308      	moveq	r3, #8
 8008834:	2100      	movs	r1, #0
 8008836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800883a:	6866      	ldr	r6, [r4, #4]
 800883c:	60a6      	str	r6, [r4, #8]
 800883e:	2e00      	cmp	r6, #0
 8008840:	db05      	blt.n	800884e <_printf_i+0x10e>
 8008842:	6821      	ldr	r1, [r4, #0]
 8008844:	432e      	orrs	r6, r5
 8008846:	f021 0104 	bic.w	r1, r1, #4
 800884a:	6021      	str	r1, [r4, #0]
 800884c:	d04b      	beq.n	80088e6 <_printf_i+0x1a6>
 800884e:	4616      	mov	r6, r2
 8008850:	fbb5 f1f3 	udiv	r1, r5, r3
 8008854:	fb03 5711 	mls	r7, r3, r1, r5
 8008858:	5dc7      	ldrb	r7, [r0, r7]
 800885a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800885e:	462f      	mov	r7, r5
 8008860:	42bb      	cmp	r3, r7
 8008862:	460d      	mov	r5, r1
 8008864:	d9f4      	bls.n	8008850 <_printf_i+0x110>
 8008866:	2b08      	cmp	r3, #8
 8008868:	d10b      	bne.n	8008882 <_printf_i+0x142>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	07df      	lsls	r7, r3, #31
 800886e:	d508      	bpl.n	8008882 <_printf_i+0x142>
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	6861      	ldr	r1, [r4, #4]
 8008874:	4299      	cmp	r1, r3
 8008876:	bfde      	ittt	le
 8008878:	2330      	movle	r3, #48	@ 0x30
 800887a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800887e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008882:	1b92      	subs	r2, r2, r6
 8008884:	6122      	str	r2, [r4, #16]
 8008886:	f8cd a000 	str.w	sl, [sp]
 800888a:	464b      	mov	r3, r9
 800888c:	aa03      	add	r2, sp, #12
 800888e:	4621      	mov	r1, r4
 8008890:	4640      	mov	r0, r8
 8008892:	f7ff fee7 	bl	8008664 <_printf_common>
 8008896:	3001      	adds	r0, #1
 8008898:	d14a      	bne.n	8008930 <_printf_i+0x1f0>
 800889a:	f04f 30ff 	mov.w	r0, #4294967295
 800889e:	b004      	add	sp, #16
 80088a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	f043 0320 	orr.w	r3, r3, #32
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	4832      	ldr	r0, [pc, #200]	@ (8008978 <_printf_i+0x238>)
 80088ae:	2778      	movs	r7, #120	@ 0x78
 80088b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	6831      	ldr	r1, [r6, #0]
 80088b8:	061f      	lsls	r7, r3, #24
 80088ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80088be:	d402      	bmi.n	80088c6 <_printf_i+0x186>
 80088c0:	065f      	lsls	r7, r3, #25
 80088c2:	bf48      	it	mi
 80088c4:	b2ad      	uxthmi	r5, r5
 80088c6:	6031      	str	r1, [r6, #0]
 80088c8:	07d9      	lsls	r1, r3, #31
 80088ca:	bf44      	itt	mi
 80088cc:	f043 0320 	orrmi.w	r3, r3, #32
 80088d0:	6023      	strmi	r3, [r4, #0]
 80088d2:	b11d      	cbz	r5, 80088dc <_printf_i+0x19c>
 80088d4:	2310      	movs	r3, #16
 80088d6:	e7ad      	b.n	8008834 <_printf_i+0xf4>
 80088d8:	4826      	ldr	r0, [pc, #152]	@ (8008974 <_printf_i+0x234>)
 80088da:	e7e9      	b.n	80088b0 <_printf_i+0x170>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	f023 0320 	bic.w	r3, r3, #32
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	e7f6      	b.n	80088d4 <_printf_i+0x194>
 80088e6:	4616      	mov	r6, r2
 80088e8:	e7bd      	b.n	8008866 <_printf_i+0x126>
 80088ea:	6833      	ldr	r3, [r6, #0]
 80088ec:	6825      	ldr	r5, [r4, #0]
 80088ee:	6961      	ldr	r1, [r4, #20]
 80088f0:	1d18      	adds	r0, r3, #4
 80088f2:	6030      	str	r0, [r6, #0]
 80088f4:	062e      	lsls	r6, r5, #24
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	d501      	bpl.n	80088fe <_printf_i+0x1be>
 80088fa:	6019      	str	r1, [r3, #0]
 80088fc:	e002      	b.n	8008904 <_printf_i+0x1c4>
 80088fe:	0668      	lsls	r0, r5, #25
 8008900:	d5fb      	bpl.n	80088fa <_printf_i+0x1ba>
 8008902:	8019      	strh	r1, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	4616      	mov	r6, r2
 800890a:	e7bc      	b.n	8008886 <_printf_i+0x146>
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	1d1a      	adds	r2, r3, #4
 8008910:	6032      	str	r2, [r6, #0]
 8008912:	681e      	ldr	r6, [r3, #0]
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	2100      	movs	r1, #0
 8008918:	4630      	mov	r0, r6
 800891a:	f7f7 fc81 	bl	8000220 <memchr>
 800891e:	b108      	cbz	r0, 8008924 <_printf_i+0x1e4>
 8008920:	1b80      	subs	r0, r0, r6
 8008922:	6060      	str	r0, [r4, #4]
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	2300      	movs	r3, #0
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800892e:	e7aa      	b.n	8008886 <_printf_i+0x146>
 8008930:	6923      	ldr	r3, [r4, #16]
 8008932:	4632      	mov	r2, r6
 8008934:	4649      	mov	r1, r9
 8008936:	4640      	mov	r0, r8
 8008938:	47d0      	blx	sl
 800893a:	3001      	adds	r0, #1
 800893c:	d0ad      	beq.n	800889a <_printf_i+0x15a>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	079b      	lsls	r3, r3, #30
 8008942:	d413      	bmi.n	800896c <_printf_i+0x22c>
 8008944:	68e0      	ldr	r0, [r4, #12]
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	4298      	cmp	r0, r3
 800894a:	bfb8      	it	lt
 800894c:	4618      	movlt	r0, r3
 800894e:	e7a6      	b.n	800889e <_printf_i+0x15e>
 8008950:	2301      	movs	r3, #1
 8008952:	4632      	mov	r2, r6
 8008954:	4649      	mov	r1, r9
 8008956:	4640      	mov	r0, r8
 8008958:	47d0      	blx	sl
 800895a:	3001      	adds	r0, #1
 800895c:	d09d      	beq.n	800889a <_printf_i+0x15a>
 800895e:	3501      	adds	r5, #1
 8008960:	68e3      	ldr	r3, [r4, #12]
 8008962:	9903      	ldr	r1, [sp, #12]
 8008964:	1a5b      	subs	r3, r3, r1
 8008966:	42ab      	cmp	r3, r5
 8008968:	dcf2      	bgt.n	8008950 <_printf_i+0x210>
 800896a:	e7eb      	b.n	8008944 <_printf_i+0x204>
 800896c:	2500      	movs	r5, #0
 800896e:	f104 0619 	add.w	r6, r4, #25
 8008972:	e7f5      	b.n	8008960 <_printf_i+0x220>
 8008974:	0800927d 	.word	0x0800927d
 8008978:	0800928e 	.word	0x0800928e

0800897c <_scanf_chars>:
 800897c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008980:	4615      	mov	r5, r2
 8008982:	688a      	ldr	r2, [r1, #8]
 8008984:	4680      	mov	r8, r0
 8008986:	460c      	mov	r4, r1
 8008988:	b932      	cbnz	r2, 8008998 <_scanf_chars+0x1c>
 800898a:	698a      	ldr	r2, [r1, #24]
 800898c:	2a00      	cmp	r2, #0
 800898e:	bf14      	ite	ne
 8008990:	f04f 32ff 	movne.w	r2, #4294967295
 8008994:	2201      	moveq	r2, #1
 8008996:	608a      	str	r2, [r1, #8]
 8008998:	6822      	ldr	r2, [r4, #0]
 800899a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008a2c <_scanf_chars+0xb0>
 800899e:	06d1      	lsls	r1, r2, #27
 80089a0:	bf5f      	itttt	pl
 80089a2:	681a      	ldrpl	r2, [r3, #0]
 80089a4:	1d11      	addpl	r1, r2, #4
 80089a6:	6019      	strpl	r1, [r3, #0]
 80089a8:	6816      	ldrpl	r6, [r2, #0]
 80089aa:	2700      	movs	r7, #0
 80089ac:	69a0      	ldr	r0, [r4, #24]
 80089ae:	b188      	cbz	r0, 80089d4 <_scanf_chars+0x58>
 80089b0:	2801      	cmp	r0, #1
 80089b2:	d107      	bne.n	80089c4 <_scanf_chars+0x48>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	6963      	ldr	r3, [r4, #20]
 80089ba:	5c9b      	ldrb	r3, [r3, r2]
 80089bc:	b953      	cbnz	r3, 80089d4 <_scanf_chars+0x58>
 80089be:	2f00      	cmp	r7, #0
 80089c0:	d031      	beq.n	8008a26 <_scanf_chars+0xaa>
 80089c2:	e022      	b.n	8008a0a <_scanf_chars+0x8e>
 80089c4:	2802      	cmp	r0, #2
 80089c6:	d120      	bne.n	8008a0a <_scanf_chars+0x8e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80089d0:	071b      	lsls	r3, r3, #28
 80089d2:	d41a      	bmi.n	8008a0a <_scanf_chars+0x8e>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	06da      	lsls	r2, r3, #27
 80089d8:	bf5e      	ittt	pl
 80089da:	682b      	ldrpl	r3, [r5, #0]
 80089dc:	781b      	ldrbpl	r3, [r3, #0]
 80089de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80089e2:	682a      	ldr	r2, [r5, #0]
 80089e4:	686b      	ldr	r3, [r5, #4]
 80089e6:	3201      	adds	r2, #1
 80089e8:	602a      	str	r2, [r5, #0]
 80089ea:	68a2      	ldr	r2, [r4, #8]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	3a01      	subs	r2, #1
 80089f0:	606b      	str	r3, [r5, #4]
 80089f2:	3701      	adds	r7, #1
 80089f4:	60a2      	str	r2, [r4, #8]
 80089f6:	b142      	cbz	r2, 8008a0a <_scanf_chars+0x8e>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dcd7      	bgt.n	80089ac <_scanf_chars+0x30>
 80089fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a00:	4629      	mov	r1, r5
 8008a02:	4640      	mov	r0, r8
 8008a04:	4798      	blx	r3
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d0d0      	beq.n	80089ac <_scanf_chars+0x30>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	f013 0310 	ands.w	r3, r3, #16
 8008a10:	d105      	bne.n	8008a1e <_scanf_chars+0xa2>
 8008a12:	68e2      	ldr	r2, [r4, #12]
 8008a14:	3201      	adds	r2, #1
 8008a16:	60e2      	str	r2, [r4, #12]
 8008a18:	69a2      	ldr	r2, [r4, #24]
 8008a1a:	b102      	cbz	r2, 8008a1e <_scanf_chars+0xa2>
 8008a1c:	7033      	strb	r3, [r6, #0]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	443b      	add	r3, r7
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	2000      	movs	r0, #0
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	080092bb 	.word	0x080092bb

08008a30 <_scanf_i>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	4698      	mov	r8, r3
 8008a36:	4b74      	ldr	r3, [pc, #464]	@ (8008c08 <_scanf_i+0x1d8>)
 8008a38:	460c      	mov	r4, r1
 8008a3a:	4682      	mov	sl, r0
 8008a3c:	4616      	mov	r6, r2
 8008a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a42:	b087      	sub	sp, #28
 8008a44:	ab03      	add	r3, sp, #12
 8008a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a4a:	4b70      	ldr	r3, [pc, #448]	@ (8008c0c <_scanf_i+0x1dc>)
 8008a4c:	69a1      	ldr	r1, [r4, #24]
 8008a4e:	4a70      	ldr	r2, [pc, #448]	@ (8008c10 <_scanf_i+0x1e0>)
 8008a50:	2903      	cmp	r1, #3
 8008a52:	bf08      	it	eq
 8008a54:	461a      	moveq	r2, r3
 8008a56:	68a3      	ldr	r3, [r4, #8]
 8008a58:	9201      	str	r2, [sp, #4]
 8008a5a:	1e5a      	subs	r2, r3, #1
 8008a5c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a60:	bf88      	it	hi
 8008a62:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a66:	4627      	mov	r7, r4
 8008a68:	bf82      	ittt	hi
 8008a6a:	eb03 0905 	addhi.w	r9, r3, r5
 8008a6e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a72:	60a3      	strhi	r3, [r4, #8]
 8008a74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008a78:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008a7c:	bf98      	it	ls
 8008a7e:	f04f 0900 	movls.w	r9, #0
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	463d      	mov	r5, r7
 8008a86:	f04f 0b00 	mov.w	fp, #0
 8008a8a:	6831      	ldr	r1, [r6, #0]
 8008a8c:	ab03      	add	r3, sp, #12
 8008a8e:	7809      	ldrb	r1, [r1, #0]
 8008a90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a94:	2202      	movs	r2, #2
 8008a96:	f7f7 fbc3 	bl	8000220 <memchr>
 8008a9a:	b328      	cbz	r0, 8008ae8 <_scanf_i+0xb8>
 8008a9c:	f1bb 0f01 	cmp.w	fp, #1
 8008aa0:	d159      	bne.n	8008b56 <_scanf_i+0x126>
 8008aa2:	6862      	ldr	r2, [r4, #4]
 8008aa4:	b92a      	cbnz	r2, 8008ab2 <_scanf_i+0x82>
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	2108      	movs	r1, #8
 8008aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aae:	6061      	str	r1, [r4, #4]
 8008ab0:	6022      	str	r2, [r4, #0]
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008ab8:	6022      	str	r2, [r4, #0]
 8008aba:	68a2      	ldr	r2, [r4, #8]
 8008abc:	1e51      	subs	r1, r2, #1
 8008abe:	60a1      	str	r1, [r4, #8]
 8008ac0:	b192      	cbz	r2, 8008ae8 <_scanf_i+0xb8>
 8008ac2:	6832      	ldr	r2, [r6, #0]
 8008ac4:	1c51      	adds	r1, r2, #1
 8008ac6:	6031      	str	r1, [r6, #0]
 8008ac8:	7812      	ldrb	r2, [r2, #0]
 8008aca:	f805 2b01 	strb.w	r2, [r5], #1
 8008ace:	6872      	ldr	r2, [r6, #4]
 8008ad0:	3a01      	subs	r2, #1
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	6072      	str	r2, [r6, #4]
 8008ad6:	dc07      	bgt.n	8008ae8 <_scanf_i+0xb8>
 8008ad8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008adc:	4631      	mov	r1, r6
 8008ade:	4650      	mov	r0, sl
 8008ae0:	4790      	blx	r2
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	f040 8085 	bne.w	8008bf2 <_scanf_i+0x1c2>
 8008ae8:	f10b 0b01 	add.w	fp, fp, #1
 8008aec:	f1bb 0f03 	cmp.w	fp, #3
 8008af0:	d1cb      	bne.n	8008a8a <_scanf_i+0x5a>
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	b90b      	cbnz	r3, 8008afa <_scanf_i+0xca>
 8008af6:	230a      	movs	r3, #10
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6863      	ldr	r3, [r4, #4]
 8008afc:	4945      	ldr	r1, [pc, #276]	@ (8008c14 <_scanf_i+0x1e4>)
 8008afe:	6960      	ldr	r0, [r4, #20]
 8008b00:	1ac9      	subs	r1, r1, r3
 8008b02:	f000 f889 	bl	8008c18 <__sccl>
 8008b06:	f04f 0b00 	mov.w	fp, #0
 8008b0a:	68a3      	ldr	r3, [r4, #8]
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d03d      	beq.n	8008b8e <_scanf_i+0x15e>
 8008b12:	6831      	ldr	r1, [r6, #0]
 8008b14:	6960      	ldr	r0, [r4, #20]
 8008b16:	f891 c000 	ldrb.w	ip, [r1]
 8008b1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d035      	beq.n	8008b8e <_scanf_i+0x15e>
 8008b22:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008b26:	d124      	bne.n	8008b72 <_scanf_i+0x142>
 8008b28:	0510      	lsls	r0, r2, #20
 8008b2a:	d522      	bpl.n	8008b72 <_scanf_i+0x142>
 8008b2c:	f10b 0b01 	add.w	fp, fp, #1
 8008b30:	f1b9 0f00 	cmp.w	r9, #0
 8008b34:	d003      	beq.n	8008b3e <_scanf_i+0x10e>
 8008b36:	3301      	adds	r3, #1
 8008b38:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	6873      	ldr	r3, [r6, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	6073      	str	r3, [r6, #4]
 8008b46:	dd1b      	ble.n	8008b80 <_scanf_i+0x150>
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	60a3      	str	r3, [r4, #8]
 8008b54:	e7d9      	b.n	8008b0a <_scanf_i+0xda>
 8008b56:	f1bb 0f02 	cmp.w	fp, #2
 8008b5a:	d1ae      	bne.n	8008aba <_scanf_i+0x8a>
 8008b5c:	6822      	ldr	r2, [r4, #0]
 8008b5e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008b62:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008b66:	d1c4      	bne.n	8008af2 <_scanf_i+0xc2>
 8008b68:	2110      	movs	r1, #16
 8008b6a:	6061      	str	r1, [r4, #4]
 8008b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b70:	e7a2      	b.n	8008ab8 <_scanf_i+0x88>
 8008b72:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008b76:	6022      	str	r2, [r4, #0]
 8008b78:	780b      	ldrb	r3, [r1, #0]
 8008b7a:	f805 3b01 	strb.w	r3, [r5], #1
 8008b7e:	e7de      	b.n	8008b3e <_scanf_i+0x10e>
 8008b80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b84:	4631      	mov	r1, r6
 8008b86:	4650      	mov	r0, sl
 8008b88:	4798      	blx	r3
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0df      	beq.n	8008b4e <_scanf_i+0x11e>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	05d9      	lsls	r1, r3, #23
 8008b92:	d50d      	bpl.n	8008bb0 <_scanf_i+0x180>
 8008b94:	42bd      	cmp	r5, r7
 8008b96:	d909      	bls.n	8008bac <_scanf_i+0x17c>
 8008b98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	4798      	blx	r3
 8008ba6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008baa:	464d      	mov	r5, r9
 8008bac:	42bd      	cmp	r5, r7
 8008bae:	d028      	beq.n	8008c02 <_scanf_i+0x1d2>
 8008bb0:	6822      	ldr	r2, [r4, #0]
 8008bb2:	f012 0210 	ands.w	r2, r2, #16
 8008bb6:	d113      	bne.n	8008be0 <_scanf_i+0x1b0>
 8008bb8:	702a      	strb	r2, [r5, #0]
 8008bba:	6863      	ldr	r3, [r4, #4]
 8008bbc:	9e01      	ldr	r6, [sp, #4]
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	47b0      	blx	r6
 8008bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc8:	6821      	ldr	r1, [r4, #0]
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	f8c8 2000 	str.w	r2, [r8]
 8008bd0:	f011 0f20 	tst.w	r1, #32
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	d00f      	beq.n	8008bf8 <_scanf_i+0x1c8>
 8008bd8:	6018      	str	r0, [r3, #0]
 8008bda:	68e3      	ldr	r3, [r4, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	60e3      	str	r3, [r4, #12]
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	1bed      	subs	r5, r5, r7
 8008be4:	445d      	add	r5, fp
 8008be6:	442b      	add	r3, r5
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	2000      	movs	r0, #0
 8008bec:	b007      	add	sp, #28
 8008bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf2:	f04f 0b00 	mov.w	fp, #0
 8008bf6:	e7ca      	b.n	8008b8e <_scanf_i+0x15e>
 8008bf8:	07ca      	lsls	r2, r1, #31
 8008bfa:	bf4c      	ite	mi
 8008bfc:	8018      	strhmi	r0, [r3, #0]
 8008bfe:	6018      	strpl	r0, [r3, #0]
 8008c00:	e7eb      	b.n	8008bda <_scanf_i+0x1aa>
 8008c02:	2001      	movs	r0, #1
 8008c04:	e7f2      	b.n	8008bec <_scanf_i+0x1bc>
 8008c06:	bf00      	nop
 8008c08:	08009248 	.word	0x08009248
 8008c0c:	08008ea5 	.word	0x08008ea5
 8008c10:	08008f85 	.word	0x08008f85
 8008c14:	080092af 	.word	0x080092af

08008c18 <__sccl>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	780b      	ldrb	r3, [r1, #0]
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	2b5e      	cmp	r3, #94	@ 0x5e
 8008c20:	bf0b      	itete	eq
 8008c22:	784b      	ldrbeq	r3, [r1, #1]
 8008c24:	1c4a      	addne	r2, r1, #1
 8008c26:	1c8a      	addeq	r2, r1, #2
 8008c28:	2100      	movne	r1, #0
 8008c2a:	bf08      	it	eq
 8008c2c:	2101      	moveq	r1, #1
 8008c2e:	3801      	subs	r0, #1
 8008c30:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008c34:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008c38:	42a8      	cmp	r0, r5
 8008c3a:	d1fb      	bne.n	8008c34 <__sccl+0x1c>
 8008c3c:	b90b      	cbnz	r3, 8008c42 <__sccl+0x2a>
 8008c3e:	1e50      	subs	r0, r2, #1
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
 8008c42:	f081 0101 	eor.w	r1, r1, #1
 8008c46:	54e1      	strb	r1, [r4, r3]
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008c50:	2d2d      	cmp	r5, #45	@ 0x2d
 8008c52:	d005      	beq.n	8008c60 <__sccl+0x48>
 8008c54:	2d5d      	cmp	r5, #93	@ 0x5d
 8008c56:	d016      	beq.n	8008c86 <__sccl+0x6e>
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	d0f1      	beq.n	8008c40 <__sccl+0x28>
 8008c5c:	462b      	mov	r3, r5
 8008c5e:	e7f2      	b.n	8008c46 <__sccl+0x2e>
 8008c60:	7846      	ldrb	r6, [r0, #1]
 8008c62:	2e5d      	cmp	r6, #93	@ 0x5d
 8008c64:	d0fa      	beq.n	8008c5c <__sccl+0x44>
 8008c66:	42b3      	cmp	r3, r6
 8008c68:	dcf8      	bgt.n	8008c5c <__sccl+0x44>
 8008c6a:	3002      	adds	r0, #2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	3201      	adds	r2, #1
 8008c70:	4296      	cmp	r6, r2
 8008c72:	54a1      	strb	r1, [r4, r2]
 8008c74:	dcfb      	bgt.n	8008c6e <__sccl+0x56>
 8008c76:	1af2      	subs	r2, r6, r3
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	1c5d      	adds	r5, r3, #1
 8008c7c:	42b3      	cmp	r3, r6
 8008c7e:	bfa8      	it	ge
 8008c80:	2200      	movge	r2, #0
 8008c82:	18ab      	adds	r3, r5, r2
 8008c84:	e7e1      	b.n	8008c4a <__sccl+0x32>
 8008c86:	4610      	mov	r0, r2
 8008c88:	e7da      	b.n	8008c40 <__sccl+0x28>

08008c8a <__submore>:
 8008c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8e:	460c      	mov	r4, r1
 8008c90:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008c92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c96:	4299      	cmp	r1, r3
 8008c98:	d11d      	bne.n	8008cd6 <__submore+0x4c>
 8008c9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008c9e:	f7ff f92d 	bl	8007efc <_malloc_r>
 8008ca2:	b918      	cbnz	r0, 8008cac <__submore+0x22>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cb0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008cb2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008cb6:	6360      	str	r0, [r4, #52]	@ 0x34
 8008cb8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008cbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008cc0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008cc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008cc8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008ccc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008cd0:	6020      	str	r0, [r4, #0]
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e7e8      	b.n	8008ca8 <__submore+0x1e>
 8008cd6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008cd8:	0077      	lsls	r7, r6, #1
 8008cda:	463a      	mov	r2, r7
 8008cdc:	f000 f83a 	bl	8008d54 <_realloc_r>
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0de      	beq.n	8008ca4 <__submore+0x1a>
 8008ce6:	eb00 0806 	add.w	r8, r0, r6
 8008cea:	4601      	mov	r1, r0
 8008cec:	4632      	mov	r2, r6
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f7ff f88a 	bl	8007e08 <memcpy>
 8008cf4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008cf8:	f8c4 8000 	str.w	r8, [r4]
 8008cfc:	e7e9      	b.n	8008cd2 <__submore+0x48>

08008cfe <memmove>:
 8008cfe:	4288      	cmp	r0, r1
 8008d00:	b510      	push	{r4, lr}
 8008d02:	eb01 0402 	add.w	r4, r1, r2
 8008d06:	d902      	bls.n	8008d0e <memmove+0x10>
 8008d08:	4284      	cmp	r4, r0
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	d807      	bhi.n	8008d1e <memmove+0x20>
 8008d0e:	1e43      	subs	r3, r0, #1
 8008d10:	42a1      	cmp	r1, r4
 8008d12:	d008      	beq.n	8008d26 <memmove+0x28>
 8008d14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d1c:	e7f8      	b.n	8008d10 <memmove+0x12>
 8008d1e:	4402      	add	r2, r0
 8008d20:	4601      	mov	r1, r0
 8008d22:	428a      	cmp	r2, r1
 8008d24:	d100      	bne.n	8008d28 <memmove+0x2a>
 8008d26:	bd10      	pop	{r4, pc}
 8008d28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d30:	e7f7      	b.n	8008d22 <memmove+0x24>
	...

08008d34 <_sbrk_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d06      	ldr	r5, [pc, #24]	@ (8008d50 <_sbrk_r+0x1c>)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7fa fd14 	bl	800376c <_sbrk>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_sbrk_r+0x1a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_sbrk_r+0x1a>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000670 	.word	0x20000670

08008d54 <_realloc_r>:
 8008d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d58:	4607      	mov	r7, r0
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	b921      	cbnz	r1, 8008d6a <_realloc_r+0x16>
 8008d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d64:	4611      	mov	r1, r2
 8008d66:	f7ff b8c9 	b.w	8007efc <_malloc_r>
 8008d6a:	b92a      	cbnz	r2, 8008d78 <_realloc_r+0x24>
 8008d6c:	f7ff f85a 	bl	8007e24 <_free_r>
 8008d70:	4625      	mov	r5, r4
 8008d72:	4628      	mov	r0, r5
 8008d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d78:	f000 f906 	bl	8008f88 <_malloc_usable_size_r>
 8008d7c:	4284      	cmp	r4, r0
 8008d7e:	4606      	mov	r6, r0
 8008d80:	d802      	bhi.n	8008d88 <_realloc_r+0x34>
 8008d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d86:	d8f4      	bhi.n	8008d72 <_realloc_r+0x1e>
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f7ff f8b6 	bl	8007efc <_malloc_r>
 8008d90:	4680      	mov	r8, r0
 8008d92:	b908      	cbnz	r0, 8008d98 <_realloc_r+0x44>
 8008d94:	4645      	mov	r5, r8
 8008d96:	e7ec      	b.n	8008d72 <_realloc_r+0x1e>
 8008d98:	42b4      	cmp	r4, r6
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	bf28      	it	cs
 8008da0:	4632      	movcs	r2, r6
 8008da2:	f7ff f831 	bl	8007e08 <memcpy>
 8008da6:	4629      	mov	r1, r5
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7ff f83b 	bl	8007e24 <_free_r>
 8008dae:	e7f1      	b.n	8008d94 <_realloc_r+0x40>

08008db0 <_strtol_l.isra.0>:
 8008db0:	2b24      	cmp	r3, #36	@ 0x24
 8008db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db6:	4686      	mov	lr, r0
 8008db8:	4690      	mov	r8, r2
 8008dba:	d801      	bhi.n	8008dc0 <_strtol_l.isra.0+0x10>
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <_strtol_l.isra.0+0x1e>
 8008dc0:	f7fe fff6 	bl	8007db0 <__errno>
 8008dc4:	2316      	movs	r3, #22
 8008dc6:	6003      	str	r3, [r0, #0]
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dce:	4834      	ldr	r0, [pc, #208]	@ (8008ea0 <_strtol_l.isra.0+0xf0>)
 8008dd0:	460d      	mov	r5, r1
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dd8:	5d06      	ldrb	r6, [r0, r4]
 8008dda:	f016 0608 	ands.w	r6, r6, #8
 8008dde:	d1f8      	bne.n	8008dd2 <_strtol_l.isra.0+0x22>
 8008de0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008de2:	d110      	bne.n	8008e06 <_strtol_l.isra.0+0x56>
 8008de4:	782c      	ldrb	r4, [r5, #0]
 8008de6:	2601      	movs	r6, #1
 8008de8:	1c95      	adds	r5, r2, #2
 8008dea:	f033 0210 	bics.w	r2, r3, #16
 8008dee:	d115      	bne.n	8008e1c <_strtol_l.isra.0+0x6c>
 8008df0:	2c30      	cmp	r4, #48	@ 0x30
 8008df2:	d10d      	bne.n	8008e10 <_strtol_l.isra.0+0x60>
 8008df4:	782a      	ldrb	r2, [r5, #0]
 8008df6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008dfa:	2a58      	cmp	r2, #88	@ 0x58
 8008dfc:	d108      	bne.n	8008e10 <_strtol_l.isra.0+0x60>
 8008dfe:	786c      	ldrb	r4, [r5, #1]
 8008e00:	3502      	adds	r5, #2
 8008e02:	2310      	movs	r3, #16
 8008e04:	e00a      	b.n	8008e1c <_strtol_l.isra.0+0x6c>
 8008e06:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e08:	bf04      	itt	eq
 8008e0a:	782c      	ldrbeq	r4, [r5, #0]
 8008e0c:	1c95      	addeq	r5, r2, #2
 8008e0e:	e7ec      	b.n	8008dea <_strtol_l.isra.0+0x3a>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1f6      	bne.n	8008e02 <_strtol_l.isra.0+0x52>
 8008e14:	2c30      	cmp	r4, #48	@ 0x30
 8008e16:	bf14      	ite	ne
 8008e18:	230a      	movne	r3, #10
 8008e1a:	2308      	moveq	r3, #8
 8008e1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e24:	2200      	movs	r2, #0
 8008e26:	fbbc f9f3 	udiv	r9, ip, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e34:	2f09      	cmp	r7, #9
 8008e36:	d80f      	bhi.n	8008e58 <_strtol_l.isra.0+0xa8>
 8008e38:	463c      	mov	r4, r7
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	dd1b      	ble.n	8008e76 <_strtol_l.isra.0+0xc6>
 8008e3e:	1c57      	adds	r7, r2, #1
 8008e40:	d007      	beq.n	8008e52 <_strtol_l.isra.0+0xa2>
 8008e42:	4581      	cmp	r9, r0
 8008e44:	d314      	bcc.n	8008e70 <_strtol_l.isra.0+0xc0>
 8008e46:	d101      	bne.n	8008e4c <_strtol_l.isra.0+0x9c>
 8008e48:	45a2      	cmp	sl, r4
 8008e4a:	db11      	blt.n	8008e70 <_strtol_l.isra.0+0xc0>
 8008e4c:	fb00 4003 	mla	r0, r0, r3, r4
 8008e50:	2201      	movs	r2, #1
 8008e52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e56:	e7eb      	b.n	8008e30 <_strtol_l.isra.0+0x80>
 8008e58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e5c:	2f19      	cmp	r7, #25
 8008e5e:	d801      	bhi.n	8008e64 <_strtol_l.isra.0+0xb4>
 8008e60:	3c37      	subs	r4, #55	@ 0x37
 8008e62:	e7ea      	b.n	8008e3a <_strtol_l.isra.0+0x8a>
 8008e64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e68:	2f19      	cmp	r7, #25
 8008e6a:	d804      	bhi.n	8008e76 <_strtol_l.isra.0+0xc6>
 8008e6c:	3c57      	subs	r4, #87	@ 0x57
 8008e6e:	e7e4      	b.n	8008e3a <_strtol_l.isra.0+0x8a>
 8008e70:	f04f 32ff 	mov.w	r2, #4294967295
 8008e74:	e7ed      	b.n	8008e52 <_strtol_l.isra.0+0xa2>
 8008e76:	1c53      	adds	r3, r2, #1
 8008e78:	d108      	bne.n	8008e8c <_strtol_l.isra.0+0xdc>
 8008e7a:	2322      	movs	r3, #34	@ 0x22
 8008e7c:	f8ce 3000 	str.w	r3, [lr]
 8008e80:	4660      	mov	r0, ip
 8008e82:	f1b8 0f00 	cmp.w	r8, #0
 8008e86:	d0a0      	beq.n	8008dca <_strtol_l.isra.0+0x1a>
 8008e88:	1e69      	subs	r1, r5, #1
 8008e8a:	e006      	b.n	8008e9a <_strtol_l.isra.0+0xea>
 8008e8c:	b106      	cbz	r6, 8008e90 <_strtol_l.isra.0+0xe0>
 8008e8e:	4240      	negs	r0, r0
 8008e90:	f1b8 0f00 	cmp.w	r8, #0
 8008e94:	d099      	beq.n	8008dca <_strtol_l.isra.0+0x1a>
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	d1f6      	bne.n	8008e88 <_strtol_l.isra.0+0xd8>
 8008e9a:	f8c8 1000 	str.w	r1, [r8]
 8008e9e:	e794      	b.n	8008dca <_strtol_l.isra.0+0x1a>
 8008ea0:	080092bb 	.word	0x080092bb

08008ea4 <_strtol_r>:
 8008ea4:	f7ff bf84 	b.w	8008db0 <_strtol_l.isra.0>

08008ea8 <_strtoul_l.isra.0>:
 8008ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008eac:	4e34      	ldr	r6, [pc, #208]	@ (8008f80 <_strtoul_l.isra.0+0xd8>)
 8008eae:	4686      	mov	lr, r0
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eb8:	5d37      	ldrb	r7, [r6, r4]
 8008eba:	f017 0708 	ands.w	r7, r7, #8
 8008ebe:	d1f8      	bne.n	8008eb2 <_strtoul_l.isra.0+0xa>
 8008ec0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ec2:	d110      	bne.n	8008ee6 <_strtoul_l.isra.0+0x3e>
 8008ec4:	782c      	ldrb	r4, [r5, #0]
 8008ec6:	2701      	movs	r7, #1
 8008ec8:	1c85      	adds	r5, r0, #2
 8008eca:	f033 0010 	bics.w	r0, r3, #16
 8008ece:	d115      	bne.n	8008efc <_strtoul_l.isra.0+0x54>
 8008ed0:	2c30      	cmp	r4, #48	@ 0x30
 8008ed2:	d10d      	bne.n	8008ef0 <_strtoul_l.isra.0+0x48>
 8008ed4:	7828      	ldrb	r0, [r5, #0]
 8008ed6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008eda:	2858      	cmp	r0, #88	@ 0x58
 8008edc:	d108      	bne.n	8008ef0 <_strtoul_l.isra.0+0x48>
 8008ede:	786c      	ldrb	r4, [r5, #1]
 8008ee0:	3502      	adds	r5, #2
 8008ee2:	2310      	movs	r3, #16
 8008ee4:	e00a      	b.n	8008efc <_strtoul_l.isra.0+0x54>
 8008ee6:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ee8:	bf04      	itt	eq
 8008eea:	782c      	ldrbeq	r4, [r5, #0]
 8008eec:	1c85      	addeq	r5, r0, #2
 8008eee:	e7ec      	b.n	8008eca <_strtoul_l.isra.0+0x22>
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f6      	bne.n	8008ee2 <_strtoul_l.isra.0+0x3a>
 8008ef4:	2c30      	cmp	r4, #48	@ 0x30
 8008ef6:	bf14      	ite	ne
 8008ef8:	230a      	movne	r3, #10
 8008efa:	2308      	moveq	r3, #8
 8008efc:	f04f 38ff 	mov.w	r8, #4294967295
 8008f00:	2600      	movs	r6, #0
 8008f02:	fbb8 f8f3 	udiv	r8, r8, r3
 8008f06:	fb03 f908 	mul.w	r9, r3, r8
 8008f0a:	ea6f 0909 	mvn.w	r9, r9
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008f14:	f1bc 0f09 	cmp.w	ip, #9
 8008f18:	d810      	bhi.n	8008f3c <_strtoul_l.isra.0+0x94>
 8008f1a:	4664      	mov	r4, ip
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	dd1e      	ble.n	8008f5e <_strtoul_l.isra.0+0xb6>
 8008f20:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008f24:	d007      	beq.n	8008f36 <_strtoul_l.isra.0+0x8e>
 8008f26:	4580      	cmp	r8, r0
 8008f28:	d316      	bcc.n	8008f58 <_strtoul_l.isra.0+0xb0>
 8008f2a:	d101      	bne.n	8008f30 <_strtoul_l.isra.0+0x88>
 8008f2c:	45a1      	cmp	r9, r4
 8008f2e:	db13      	blt.n	8008f58 <_strtoul_l.isra.0+0xb0>
 8008f30:	fb00 4003 	mla	r0, r0, r3, r4
 8008f34:	2601      	movs	r6, #1
 8008f36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f3a:	e7e9      	b.n	8008f10 <_strtoul_l.isra.0+0x68>
 8008f3c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008f40:	f1bc 0f19 	cmp.w	ip, #25
 8008f44:	d801      	bhi.n	8008f4a <_strtoul_l.isra.0+0xa2>
 8008f46:	3c37      	subs	r4, #55	@ 0x37
 8008f48:	e7e8      	b.n	8008f1c <_strtoul_l.isra.0+0x74>
 8008f4a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008f4e:	f1bc 0f19 	cmp.w	ip, #25
 8008f52:	d804      	bhi.n	8008f5e <_strtoul_l.isra.0+0xb6>
 8008f54:	3c57      	subs	r4, #87	@ 0x57
 8008f56:	e7e1      	b.n	8008f1c <_strtoul_l.isra.0+0x74>
 8008f58:	f04f 36ff 	mov.w	r6, #4294967295
 8008f5c:	e7eb      	b.n	8008f36 <_strtoul_l.isra.0+0x8e>
 8008f5e:	1c73      	adds	r3, r6, #1
 8008f60:	d106      	bne.n	8008f70 <_strtoul_l.isra.0+0xc8>
 8008f62:	2322      	movs	r3, #34	@ 0x22
 8008f64:	f8ce 3000 	str.w	r3, [lr]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	b932      	cbnz	r2, 8008f7a <_strtoul_l.isra.0+0xd2>
 8008f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f70:	b107      	cbz	r7, 8008f74 <_strtoul_l.isra.0+0xcc>
 8008f72:	4240      	negs	r0, r0
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	d0f9      	beq.n	8008f6c <_strtoul_l.isra.0+0xc4>
 8008f78:	b106      	cbz	r6, 8008f7c <_strtoul_l.isra.0+0xd4>
 8008f7a:	1e69      	subs	r1, r5, #1
 8008f7c:	6011      	str	r1, [r2, #0]
 8008f7e:	e7f5      	b.n	8008f6c <_strtoul_l.isra.0+0xc4>
 8008f80:	080092bb 	.word	0x080092bb

08008f84 <_strtoul_r>:
 8008f84:	f7ff bf90 	b.w	8008ea8 <_strtoul_l.isra.0>

08008f88 <_malloc_usable_size_r>:
 8008f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8c:	1f18      	subs	r0, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfbc      	itt	lt
 8008f92:	580b      	ldrlt	r3, [r1, r0]
 8008f94:	18c0      	addlt	r0, r0, r3
 8008f96:	4770      	bx	lr

08008f98 <_init>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr

08008fa4 <_fini>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr
