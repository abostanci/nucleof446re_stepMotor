
f446re_step_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000672c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080068f0  080068f0  000078f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  00008170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006910  08006910  00008170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08006918  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000170  08006a88  00008170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006a88  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001457d  00000000  00000000  000081a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b8  00000000  00000000  0001c71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0001edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcd  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022088  00000000  00000000  000211f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013520  00000000  00000000  0004327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74a8  00000000  00000000  0005679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012dc45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056cc  00000000  00000000  0012dc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00133354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000170 	.word	0x20000170
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080068d8 	.word	0x080068d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000174 	.word	0x20000174
 8000200:	080068d8 	.word	0x080068d8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f003 f9e2 	bl	80038fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f82c 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f952 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f926 	bl	8000790 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000544:	f000 f894 	bl	8000670 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000548:	f000 f8c8 	bl	80006dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 2);
 800054c:	2102      	movs	r1, #2
 800054e:	2001      	movs	r0, #1
 8000550:	f003 f91c 	bl	800378c <BSP_MotorControl_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 8000554:	2100      	movs	r1, #0
 8000556:	2001      	movs	r0, #1
 8000558:	f003 f88e 	bl	8003678 <BSP_MotorControl_Init>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 800055c:	2100      	movs	r1, #0
 800055e:	2001      	movs	r0, #1
 8000560:	f003 f88a 	bl	8003678 <BSP_MotorControl_Init>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0x58>)
 8000566:	f003 f82d 	bl	80035c4 <BSP_MotorControl_AttachFlagInterrupt>
  BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x5c>)
 800056c:	f003 f848 	bl	8003600 <BSP_MotorControl_AttachBusyInterrupt>
  BSP_MotorControl_AttachErrorHandler(MyErrorHandler);
 8000570:	4807      	ldr	r0, [pc, #28]	@ (8000590 <main+0x60>)
 8000572:	f003 f809 	bl	8003588 <BSP_MotorControl_AttachErrorHandler>
  BSP_MotorControl_CmdResetPos(0);
 8000576:	2000      	movs	r0, #0
 8000578:	f003 f8e6 	bl	8003748 <BSP_MotorControl_CmdResetPos>
  BSP_MotorControl_CmdResetPos(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f003 f8e3 	bl	8003748 <BSP_MotorControl_CmdResetPos>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x52>
 8000586:	bf00      	nop
 8000588:	08000909 	.word	0x08000909
 800058c:	0800093d 	.word	0x0800093d
 8000590:	08000949 	.word	0x08000949

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	@ 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 f96c 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <SystemClock_Config+0xd4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a29      	ldr	r2, [pc, #164]	@ (8000668 <SystemClock_Config+0xd4>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <SystemClock_Config+0xd4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <SystemClock_Config+0xd8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <SystemClock_Config+0xd8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000608:	2310      	movs	r3, #16
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000610:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000612:	2304      	movs	r3, #4
 8000614:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4618      	mov	r0, r3
 8000624:	f004 f846 	bl	80046b4 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062e:	f000 f997 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2102      	movs	r1, #2
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fce6 	bl	8004020 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065a:	f000 f981 	bl	8000960 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2201      	movs	r2, #1
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2218      	movs	r2, #24
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f004 fa95 	bl	8004bf0 <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f948 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000018c 	.word	0x2000018c
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006fe:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_TIM3_Init+0xac>)
 8000700:	4a22      	ldr	r2, [pc, #136]	@ (800078c <MX_TIM3_Init+0xb0>)
 8000702:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_TIM3_Init+0xac>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_TIM3_Init+0xac>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000710:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_TIM3_Init+0xac>)
 8000712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000716:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_TIM3_Init+0xac>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_TIM3_Init+0xac>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000724:	4818      	ldr	r0, [pc, #96]	@ (8000788 <MX_TIM3_Init+0xac>)
 8000726:	f004 fd71 	bl	800520c <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f916 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4619      	mov	r1, r3
 8000742:	4811      	ldr	r0, [pc, #68]	@ (8000788 <MX_TIM3_Init+0xac>)
 8000744:	f005 fd48 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800074e:	f000 f907 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	@ 0x60
 8000754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2204      	movs	r2, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4807      	ldr	r0, [pc, #28]	@ (8000788 <MX_TIM3_Init+0xac>)
 800076a:	f005 f863 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000774:	f000 f8f4 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000778:	4803      	ldr	r0, [pc, #12]	@ (8000788 <MX_TIM3_Init+0xac>)
 800077a:	f002 fc21 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	@ 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001e4 	.word	0x200001e4
 800078c:	40000400 	.word	0x40000400

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c8:	f005 fd96 	bl	80062f8 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f8c5 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000022c 	.word	0x2000022c
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b3f      	ldr	r3, [pc, #252]	@ (80008fc <MX_GPIO_Init+0x118>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a3e      	ldr	r2, [pc, #248]	@ (80008fc <MX_GPIO_Init+0x118>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b3c      	ldr	r3, [pc, #240]	@ (80008fc <MX_GPIO_Init+0x118>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <MX_GPIO_Init+0x118>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a37      	ldr	r2, [pc, #220]	@ (80008fc <MX_GPIO_Init+0x118>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <MX_GPIO_Init+0x118>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b31      	ldr	r3, [pc, #196]	@ (80008fc <MX_GPIO_Init+0x118>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a30      	ldr	r2, [pc, #192]	@ (80008fc <MX_GPIO_Init+0x118>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <MX_GPIO_Init+0x118>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STBY_RESET_Pin_GPIO_Port, STBY_RESET_Pin_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	482a      	ldr	r0, [pc, #168]	@ (8000900 <MX_GPIO_Init+0x11c>)
 8000856:	f003 fba5 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_GPIO_Port, CS_Pin_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2140      	movs	r1, #64	@ 0x40
 800085e:	4829      	ldr	r0, [pc, #164]	@ (8000904 <MX_GPIO_Init+0x120>)
 8000860:	f003 fba0 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STBY_RESET_Pin_Pin */
  GPIO_InitStruct.Pin = STBY_RESET_Pin_Pin;
 8000864:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STBY_RESET_Pin_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4820      	ldr	r0, [pc, #128]	@ (8000900 <MX_GPIO_Init+0x11c>)
 800087e:	f003 f9e5 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLAG_Pin_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin_Pin;
 8000882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FLAG_Pin_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	@ (8000900 <MX_GPIO_Init+0x11c>)
 800089a:	f003 f9d7 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin_Pin;
 800089e:	2320      	movs	r3, #32
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUSY_Pin_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	4814      	ldr	r0, [pc, #80]	@ (8000904 <MX_GPIO_Init+0x120>)
 80008b4:	f003 f9ca 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin_Pin */
  GPIO_InitStruct.Pin = CS_Pin_Pin;
 80008b8:	2340      	movs	r3, #64	@ 0x40
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_Pin_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_GPIO_Init+0x120>)
 80008d0:	f003 f9bc 	bl	8003c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2017      	movs	r0, #23
 80008da:	f003 f980 	bl	8003bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008de:	2017      	movs	r0, #23
 80008e0:	f003 f999 	bl	8003c16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2028      	movs	r0, #40	@ 0x28
 80008ea:	f003 f978 	bl	8003bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ee:	2028      	movs	r0, #40	@ 0x28
 80008f0:	f003 f991 	bl	8003c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400

08000908 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
void MyFlagInterruptHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 800090e:	2000      	movs	r0, #0
 8000910:	f002 fed2 	bl	80036b8 <BSP_MotorControl_CmdGetStatus>
 8000914:	4603      	mov	r3, r0
 8000916:	80fb      	strh	r3, [r7, #6]
  }
  else
  {
    // FORWARD
  }
  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_STOPPED )
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <MyFlagInterruptHandler+0x2c>
  {
       // MOTOR STOPPED
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_ACCELERATION )
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000928:	2b20      	cmp	r3, #32
 800092a:	d003      	beq.n	8000934 <MyFlagInterruptHandler+0x2c>
  {
           // MOTOR ACCELERATION
  }
  else  if ((statusRegister & POWERSTEP01_STATUS_MOT_STATUS) == POWERSTEP01_STATUS_MOT_STATUS_DECELERATION )
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000932:	2b40      	cmp	r3, #64	@ 0x40
  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
  {
    //overcurrent detection
  }

}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <MyBusyInterruptHandler>:

void MyBusyInterruptHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

   if (BSP_MotorControl_CheckBusyHw())
 8000940:	f002 fee0 	bl	8003704 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {
     /* To be customized (for example Switch off a LED) */
   }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <MyErrorHandler>:

void MyErrorHandler(uint16_t error)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
  /* Backup error number */
  gLastError = error;
 8000952:	4a02      	ldr	r2, [pc, #8]	@ (800095c <MyErrorHandler+0x14>)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	8013      	strh	r3, [r2, #0]

  /* Infinite loop */
  while(1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MyErrorHandler+0x10>
 800095c:	20000274 	.word	0x20000274

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <Powerstep01_AttachErrorHandler+0x1c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000280 	.word	0x20000280

0800098c <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <Powerstep01_AttachFlagInterrupt+0x1c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2000027c 	.word	0x2000027c

080009ac <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <Powerstep01_AttachBusyInterrupt+0x1c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000278 	.word	0x20000278

080009cc <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <Powerstep01_ReadId+0x14>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200002a2 	.word	0x200002a2

080009e4 <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 80009ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <Powerstep01_Init+0x84>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fbde 	bl	80031b4 <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 80009f8:	f002 fd04 	bl	8003404 <Powerstep01_Board_SpiInit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 8000a02:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8000a06:	f001 f927 	bl	8001c58 <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8000a0a:	f002 fc69 	bl	80032e0 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <Powerstep01_Init+0x84>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fcd1 	bl	80033bc <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f002 fbac 	bl	8003178 <Powerstep01_Board_Delay>

  if (pInit == 0)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d106      	bne.n	8000a34 <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <Powerstep01_Init+0x84>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fa07 	bl	8001e40 <Powerstep01_SetRegisterToPredefinedValues>
 8000a32:	e006      	b.n	8000a42 <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <Powerstep01_Init+0x84>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fda7 	bl	8002590 <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <Powerstep01_Init+0x84>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fa0c 	bl	8000e66 <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8000a4e:	f000 fba1 	bl	8001194 <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <Powerstep01_Init+0x84>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <Powerstep01_Init+0x84>)
 8000a5c:	801a      	strh	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200002a2 	.word	0x200002a2

08000a6c <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8000a70:	f002 fd3a 	bl	80034e8 <Powerstep01_Board_BUSY_PIN_GetState>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 8000a7e:	2300      	movs	r3, #0
  }
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 8000a88:	f002 fd3a 	bl	8003500 <Powerstep01_Board_FLAG_PIN_GetState>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 8000a96:	2300      	movs	r3, #0
  }
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 8000aac:	4b6a      	ldr	r3, [pc, #424]	@ (8000c58 <Powerstep01_CmdGetParam+0x1bc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f080 80c9 	bcs.w	8000c4c <Powerstep01_CmdGetParam+0x1b0>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000abe:	4b66      	ldr	r3, [pc, #408]	@ (8000c58 <Powerstep01_CmdGetParam+0x1bc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	3b01      	subs	r3, #1
 8000acc:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8000ad2:	4b62      	ldr	r3, [pc, #392]	@ (8000c5c <Powerstep01_CmdGetParam+0x1c0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8000ade:	f002 fb5f 	bl	80031a0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	e030      	b.n	8000b4e <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8000aec:	4a5c      	ldr	r2, [pc, #368]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4413      	add	r3, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8000af6:	4a5a      	ldr	r2, [pc, #360]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4413      	add	r3, r2
 8000afc:	3303      	adds	r3, #3
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8000b02:	4a57      	ldr	r2, [pc, #348]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4413      	add	r3, r2
 8000b08:	3306      	adds	r3, #6
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8000b0e:	4a54      	ldr	r2, [pc, #336]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4413      	add	r3, r2
 8000b14:	3309      	adds	r3, #9
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 8000b1a:	4a52      	ldr	r2, [pc, #328]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4413      	add	r3, r2
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 8000b24:	4a4f      	ldr	r2, [pc, #316]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4413      	add	r3, r2
 8000b2a:	3303      	adds	r3, #3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8000b30:	4a4c      	ldr	r2, [pc, #304]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4413      	add	r3, r2
 8000b36:	3306      	adds	r3, #6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 8000b3c:	4a49      	ldr	r2, [pc, #292]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4413      	add	r3, r2
 8000b42:	3309      	adds	r3, #9
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b42      	ldr	r3, [pc, #264]	@ (8000c58 <Powerstep01_CmdGetParam+0x1bc>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d3c7      	bcc.n	8000aec <Powerstep01_CmdGetParam+0x50>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b1b      	cmp	r3, #27
 8000b60:	bf8c      	ite	hi
 8000b62:	2301      	movhi	r3, #1
 8000b64:	2300      	movls	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
      }
      switch (param)
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d12c      	bne.n	8000bc6 <Powerstep01_CmdGetParam+0x12a>
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	409a      	lsls	r2, r3
 8000b72:	4b3d      	ldr	r3, [pc, #244]	@ (8000c68 <Powerstep01_CmdGetParam+0x1cc>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d113      	bne.n	8000bac <Powerstep01_CmdGetParam+0x110>
 8000b84:	f002 031a 	and.w	r3, r2, #26
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d017      	beq.n	8000bc6 <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	f042 0220 	orr.w	r2, r2, #32
 8000ba0:	b2d1      	uxtb	r1, r2
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000ba4:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	73fb      	strb	r3, [r7, #15]
          break;
 8000baa:	e018      	b.n	8000bde <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	7b7b      	ldrb	r3, [r7, #13]
 8000bb2:	f042 0220 	orr.w	r2, r2, #32
 8000bb6:	b2d1      	uxtb	r1, r2
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000bba:	4413      	add	r3, r2
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8000bc4:	e00b      	b.n	8000bde <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	7b7b      	ldrb	r3, [r7, #13]
 8000bcc:	f042 0220 	orr.w	r2, r2, #32
 8000bd0:	b2d1      	uxtb	r1, r2
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000bd4:	4413      	add	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8000bde:	f002 fad6 	bl	800318e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <Powerstep01_CmdGetParam+0x1c0>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f47f af70 	bne.w	8000ad2 <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	f1c3 0303 	rsb	r3, r3, #3
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	e011      	b.n	8000c20 <Powerstep01_CmdGetParam+0x184>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <Powerstep01_CmdGetParam+0x1c4>)
 8000c06:	1898      	adds	r0, r3, r2
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000c12:	4413      	add	r3, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	f001 feb7 	bl	8002988 <Powerstep01_WriteBytes>
         loop++)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d9ea      	bls.n	8000bfc <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000c26:	7b7b      	ldrb	r3, [r7, #13]
 8000c28:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000c2a:	4413      	add	r3, r2
 8000c2c:	78db      	ldrb	r3, [r3, #3]
 8000c2e:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 8000c30:	7b7b      	ldrb	r3, [r7, #13]
 8000c32:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000c34:	440b      	add	r3, r1
 8000c36:	799b      	ldrb	r3, [r3, #6]
 8000c38:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000c3a:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 8000c3c:	7b7a      	ldrb	r2, [r7, #13]
 8000c3e:	4909      	ldr	r1, [pc, #36]	@ (8000c64 <Powerstep01_CmdGetParam+0x1c8>)
 8000c40:	440a      	add	r2, r1
 8000c42:	7a52      	ldrb	r2, [r2, #9]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000c44:	4313      	orrs	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8000c48:	f002 faaa 	bl	80031a0 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 8000c4c:	697b      	ldr	r3, [r7, #20]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000284 	.word	0x20000284
 8000c5c:	200002a0 	.word	0x200002a0
 8000c60:	20000288 	.word	0x20000288
 8000c64:	20000294 	.word	0x20000294
 8000c68:	0d2021e4 	.word	0x0d2021e4

08000c6c <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 8000c7a:	4b48      	ldr	r3, [pc, #288]	@ (8000d9c <Powerstep01_CmdGetStatus+0x130>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f080 8085 	bcs.w	8000d92 <Powerstep01_CmdGetStatus+0x126>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000c88:	4b44      	ldr	r3, [pc, #272]	@ (8000d9c <Powerstep01_CmdGetStatus+0x130>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	3b01      	subs	r3, #1
 8000c96:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 8000c9c:	4b40      	ldr	r3, [pc, #256]	@ (8000da0 <Powerstep01_CmdGetStatus+0x134>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <Powerstep01_CmdGetStatus+0x44>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8000ca8:	f002 fa7a 	bl	80031a0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	e030      	b.n	8000d18 <Powerstep01_CmdGetStatus+0xac>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8000cb6:	4a3b      	ldr	r2, [pc, #236]	@ (8000da4 <Powerstep01_CmdGetStatus+0x138>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8000cc0:	4a38      	ldr	r2, [pc, #224]	@ (8000da4 <Powerstep01_CmdGetStatus+0x138>)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8000ccc:	4a35      	ldr	r2, [pc, #212]	@ (8000da4 <Powerstep01_CmdGetStatus+0x138>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3306      	adds	r3, #6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8000cd8:	4a32      	ldr	r2, [pc, #200]	@ (8000da4 <Powerstep01_CmdGetStatus+0x138>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4413      	add	r3, r2
 8000cde:	3309      	adds	r3, #9
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 8000ce4:	4a30      	ldr	r2, [pc, #192]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4413      	add	r3, r2
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 8000cee:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3303      	adds	r3, #3
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 8000cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4413      	add	r3, r2
 8000d00:	3306      	adds	r3, #6
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 8000d06:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3309      	adds	r3, #9
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3301      	adds	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <Powerstep01_CmdGetStatus+0x130>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d3c7      	bcc.n	8000cb6 <Powerstep01_CmdGetStatus+0x4a>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <Powerstep01_CmdGetStatus+0x138>)
 8000d2a:	21d0      	movs	r1, #208	@ 0xd0
 8000d2c:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8000d2e:	f002 fa2e 	bl	800318e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <Powerstep01_CmdGetStatus+0x134>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1ad      	bne.n	8000c9c <Powerstep01_CmdGetStatus+0x30>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	e011      	b.n	8000d6a <Powerstep01_CmdGetStatus+0xfe>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <Powerstep01_CmdGetStatus+0x138>)
 8000d50:	1898      	adds	r0, r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a13      	ldr	r2, [pc, #76]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f001 fe12 	bl	8002988 <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3301      	adds	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d9ea      	bls.n	8000d46 <Powerstep01_CmdGetStatus+0xda>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000d74:	4413      	add	r3, r2
 8000d76:	78db      	ldrb	r3, [r3, #3]
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	4909      	ldr	r1, [pc, #36]	@ (8000da8 <Powerstep01_CmdGetStatus+0x13c>)
 8000d82:	440b      	add	r3, r1
 8000d84:	799b      	ldrb	r3, [r3, #6]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 8000d8e:	f002 fa07 	bl	80031a0 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 8000d92:	8afb      	ldrh	r3, [r7, #22]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000284 	.word	0x20000284
 8000da0:	200002a0 	.word	0x200002a0
 8000da4:	20000288 	.word	0x20000288
 8000da8:	20000294 	.word	0x20000294

08000dac <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2200      	movs	r2, #0
 8000dba:	2170      	movs	r1, #112	@ 0x70
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 ff77 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2178      	movs	r1, #120	@ 0x78
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 ff68 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2160      	movs	r1, #96	@ 0x60
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 ff58 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	603a      	str	r2, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	460b      	mov	r3, r1
 8000e16:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000e1e:	b2d9      	uxtb	r1, r3
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 ff43 	bl	8001cb0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 8000e46:	79ba      	ldrb	r2, [r7, #6]
 8000e48:	797b      	ldrb	r3, [r7, #5]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 8000e52:	b2d9      	uxtb	r1, r3
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 ff29 	bl	8001cb0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2200      	movs	r2, #0
 8000e74:	21a8      	movs	r1, #168	@ 0xa8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 ff1a 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2200      	movs	r2, #0
 8000e92:	21b8      	movs	r1, #184	@ 0xb8
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 ff0b 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	603a      	str	r2, [r7, #0]
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb8:	b2d9      	uxtb	r1, r3
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fef6 	bl	8001cb0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fee7 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	71bb      	strb	r3, [r7, #6]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 8000efc:	79ba      	ldrb	r2, [r7, #6]
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fece 	bl	8001cb0 <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	21c0      	movs	r1, #192	@ 0xc0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 febf 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2200      	movs	r2, #0
 8000f48:	21d8      	movs	r1, #216	@ 0xd8
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 feb0 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	603a      	str	r2, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	460b      	mov	r3, r1
 8000f66:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000f6e:	b2d9      	uxtb	r1, r3
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fe9b 	bl	8001cb0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 8000f92:	4b61      	ldr	r3, [pc, #388]	@ (8001118 <Powerstep01_CmdSetParam+0x194>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	f080 80b7 	bcs.w	800110e <Powerstep01_CmdSetParam+0x18a>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8001118 <Powerstep01_CmdSetParam+0x194>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8000fb8:	4b58      	ldr	r3, [pc, #352]	@ (800111c <Powerstep01_CmdSetParam+0x198>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8000fbe:	7cbb      	ldrb	r3, [r7, #18]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8000fc4:	f002 f8ec 	bl	80031a0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e019      	b.n	8001006 <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8000fd2:	4a53      	ldr	r2, [pc, #332]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8000fdc:	4a50      	ldr	r2, [pc, #320]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4413      	add	r3, r2
 8000fee:	3306      	adds	r3, #6
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3309      	adds	r3, #9
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	4b44      	ldr	r3, [pc, #272]	@ (8001118 <Powerstep01_CmdSetParam+0x194>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	4293      	cmp	r3, r2
 8001012:	d3de      	bcc.n	8000fd2 <Powerstep01_CmdSetParam+0x4e>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b1a      	cmp	r3, #26
 8001018:	bf8c      	ite	hi
 800101a:	2301      	movhi	r3, #1
 800101c:	2300      	movls	r3, #0
 800101e:	b2db      	uxtb	r3, r3
      }
      switch (param)
 8001020:	2b00      	cmp	r3, #0
 8001022:	d13e      	bne.n	80010a2 <Powerstep01_CmdSetParam+0x11e>
 8001024:	2201      	movs	r2, #1
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	409a      	lsls	r2, r3
 800102a:	4b3e      	ldr	r3, [pc, #248]	@ (8001124 <Powerstep01_CmdSetParam+0x1a0>)
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d120      	bne.n	800107e <Powerstep01_CmdSetParam+0xfa>
 800103c:	f002 030a 	and.w	r3, r2, #10
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d029      	beq.n	80010a2 <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800104e:	7c7b      	ldrb	r3, [r7, #17]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	b2d1      	uxtb	r1, r2
 8001054:	4a32      	ldr	r2, [pc, #200]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8001056:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0c1a      	lsrs	r2, r3, #16
 800105c:	7c7b      	ldrb	r3, [r7, #17]
 800105e:	b2d1      	uxtb	r1, r2
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8001062:	4413      	add	r3, r2
 8001064:	460a      	mov	r2, r1
 8001066:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0a1a      	lsrs	r2, r3, #8
 800106c:	7c7b      	ldrb	r3, [r7, #17]
 800106e:	b2d1      	uxtb	r1, r2
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8001072:	4413      	add	r3, r2
 8001074:	460a      	mov	r2, r1
 8001076:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 3;
 8001078:	2303      	movs	r3, #3
 800107a:	74fb      	strb	r3, [r7, #19]
          break;
 800107c:	e01a      	b.n	80010b4 <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 800107e:	7c7b      	ldrb	r3, [r7, #17]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	b2d1      	uxtb	r1, r2
 8001084:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8001086:	4413      	add	r3, r2
 8001088:	460a      	mov	r2, r1
 800108a:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0a1a      	lsrs	r2, r3, #8
 8001090:	7c7b      	ldrb	r3, [r7, #17]
 8001092:	b2d1      	uxtb	r1, r2
 8001094:	4a22      	ldr	r2, [pc, #136]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 8001096:	4413      	add	r3, r2
 8001098:	460a      	mov	r2, r1
 800109a:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	74fb      	strb	r3, [r7, #19]
          break;
 80010a0:	e008      	b.n	80010b4 <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 80010a2:	7c7b      	ldrb	r3, [r7, #17]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	b2d1      	uxtb	r1, r2
 80010a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 80010aa:	4413      	add	r3, r2
 80010ac:	460a      	mov	r2, r1
 80010ae:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80010b4:	7c7b      	ldrb	r3, [r7, #17]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	b2d1      	uxtb	r1, r2
 80010ba:	4a19      	ldr	r2, [pc, #100]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 80010bc:	4413      	add	r3, r2
 80010be:	460a      	mov	r2, r1
 80010c0:	725a      	strb	r2, [r3, #9]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80010c2:	f002 f864 	bl	800318e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <Powerstep01_CmdSetParam+0x198>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f af71 	bne.w	8000fb8 <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
 80010d8:	f1c3 0303 	rsb	r3, r3, #3
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e011      	b.n	8001104 <Powerstep01_CmdSetParam+0x180>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001120 <Powerstep01_CmdSetParam+0x19c>)
 80010ea:	1898      	adds	r0, r3, r2
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001128 <Powerstep01_CmdSetParam+0x1a4>)
 80010f6:	4413      	add	r3, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f001 fc45 	bl	8002988 <Powerstep01_WriteBytes>
         loop++)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d9ea      	bls.n	80010e0 <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 800110a:	f002 f849 	bl	80031a0 <Powerstep01_Board_EnableIrq>
  }
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000284 	.word	0x20000284
 800111c:	200002a0 	.word	0x200002a0
 8001120:	20000288 	.word	0x20000288
 8001124:	052021e4 	.word	0x052021e4
 8001128:	20000294 	.word	0x20000294

0800112c <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2200      	movs	r2, #0
 800113a:	21a0      	movs	r1, #160	@ 0xa0
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fdb7 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2200      	movs	r2, #0
 8001158:	21b0      	movs	r1, #176	@ 0xb0
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fda8 	bl	8001cb0 <Powerstep01_SendCommand>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 800117e:	b2d9      	uxtb	r1, r3
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2200      	movs	r2, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fd93 	bl	8001cb0 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e028      	b.n	80011f2 <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a25      	ldr	r2, [pc, #148]	@ (8001238 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80011a4:	21d0      	movs	r1, #208	@ 0xd0
 80011a6:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80011ac:	4413      	add	r3, r2
 80011ae:	2200      	movs	r2, #0
 80011b0:	70da      	strb	r2, [r3, #3]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a20      	ldr	r2, [pc, #128]	@ (8001238 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	719a      	strb	r2, [r3, #6]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80011c0:	4413      	add	r3, r2
 80011c2:	2200      	movs	r2, #0
 80011c4:	725a      	strb	r2, [r3, #9]
     spiRxBursts[0][loop] = 0;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a1a      	ldr	r2, [pc, #104]	@ (800123c <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80011d2:	4413      	add	r3, r2
 80011d4:	2200      	movs	r2, #0
 80011d6:	70da      	strb	r2, [r3, #3]
     spiRxBursts[2][loop] = 0;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	719a      	strb	r2, [r3, #6]
     spiRxBursts[3][loop] = 0;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a15      	ldr	r2, [pc, #84]	@ (800123c <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80011e6:	4413      	add	r3, r2
 80011e8:	2200      	movs	r2, #0
 80011ea:	725a      	strb	r2, [r3, #9]
  for (loop = 0; loop < numberOfDevices; loop++)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3301      	adds	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <Powerstep01_FetchAndClearAllStatus+0xac>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3d0      	bcc.n	80011a0 <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 80011fe:	2300      	movs	r3, #0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e011      	b.n	8001228 <Powerstep01_FetchAndClearAllStatus+0x94>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 800120e:	1898      	adds	r0, r3, r2
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	4a08      	ldr	r2, [pc, #32]	@ (800123c <Powerstep01_FetchAndClearAllStatus+0xa8>)
 800121a:	4413      	add	r3, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f001 fbb3 	bl	8002988 <Powerstep01_WriteBytes>
       loop++)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	3301      	adds	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d9ea      	bls.n	8001204 <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000288 	.word	0x20000288
 800123c:	20000294 	.word	0x20000294
 8001240:	20000284 	.word	0x20000284

08001244 <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <Powerstep01_GetFetchedStatus+0x58>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	429a      	cmp	r2, r3
 800125c:	d216      	bcs.n	800128c <Powerstep01_GetFetchedStatus+0x48>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <Powerstep01_GetFetchedStatus+0x58>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	3b01      	subs	r3, #1
 800126c:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 800126e:	7b7b      	ldrb	r3, [r7, #13]
 8001270:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <Powerstep01_GetFetchedStatus+0x5c>)
 8001272:	4413      	add	r3, r2
 8001274:	78db      	ldrb	r3, [r3, #3]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <Powerstep01_GetFetchedStatus+0x5c>)
 8001280:	440b      	add	r3, r1
 8001282:	799b      	ldrb	r3, [r3, #6]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 800128c:	89fb      	ldrh	r3, [r7, #14]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000284 	.word	0x20000284
 80012a0:	20000294 	.word	0x20000294

080012a4 <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <Powerstep01_GetMotorHandle+0x10>)
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20000000 	.word	0x20000000

080012b8 <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 80012bc:	4b02      	ldr	r3, [pc, #8]	@ (80012c8 <Powerstep01_GetFwVersion+0x10>)
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	00010500 	.word	0x00010500

080012cc <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2103      	movs	r1, #3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fbde 	bl	8000a9c <Powerstep01_CmdGetParam>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fc82 	bl	8001bec <Powerstep01_ConvertPosition>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <Powerstep01_GetNbDevices+0x14>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	20000284 	.word	0x20000284

0800130c <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2116      	movs	r1, #22
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbbd 	bl	8000a9c <Powerstep01_CmdGetParam>
 8001322:	4603      	mov	r3, r0
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fbaf 	bl	8000a9c <Powerstep01_CmdGetParam>
 800133e:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	2b14      	cmp	r3, #20
 8001346:	f200 8090 	bhi.w	800146a <Powerstep01_GetAnalogValue+0x15e>
 800134a:	a201      	add	r2, pc, #4	@ (adr r2, 8001350 <Powerstep01_GetAnalogValue+0x44>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	080013a5 	.word	0x080013a5
 8001354:	0800146b 	.word	0x0800146b
 8001358:	080013a5 	.word	0x080013a5
 800135c:	080013c5 	.word	0x080013c5
 8001360:	080013b9 	.word	0x080013b9
 8001364:	080013b9 	.word	0x080013b9
 8001368:	080013d1 	.word	0x080013d1
 800136c:	080013dd 	.word	0x080013dd
 8001370:	08001429 	.word	0x08001429
 8001374:	08001429 	.word	0x08001429
 8001378:	08001429 	.word	0x08001429
 800137c:	08001429 	.word	0x08001429
 8001380:	08001405 	.word	0x08001405
 8001384:	08001447 	.word	0x08001447
 8001388:	0800144d 	.word	0x0800144d
 800138c:	0800144d 	.word	0x0800144d
 8001390:	08001411 	.word	0x08001411
 8001394:	0800146b 	.word	0x0800146b
 8001398:	0800141d 	.word	0x0800141d
 800139c:	0800141d 	.word	0x0800141d
 80013a0:	080013f1 	.word	0x080013f1
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 fc21 	bl	8001bec <Powerstep01_ConvertPosition>
 80013aa:	ee07 0a90 	vmov	s15, r0
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 80013b6:	e061      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f001 fb27 	bl	8002a0c <Powerstep01_AccDec_RegVal_to_Steps_s2>
 80013be:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80013c2:	e05b      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f001 fca3 	bl	8002d10 <Powerstep01_Speed_RegVal_to_Steps_s>
 80013ca:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80013ce:	e055      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f001 fc55 	bl	8002c80 <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 80013d6:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80013da:	e04f      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e2:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f001 fc7d 	bl	8002ce4 <Powerstep01_MinSpd_RegVal_to_Steps_s>
 80013ea:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 80013ee:	e045      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f6:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f001 fb69 	bl	8002ad0 <Powerstep01_FSSpd_RegVal_to_Steps_s>
 80013fe:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001402:	e03b      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f001 fb9b 	bl	8002b40 <Powerstep01_IntSpd_RegVal_to_Steps_s>
 800140a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800140e:	e035      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f001 fbcd 	bl	8002bb0 <Powerstep01_KTherm_RegVal_to_Comp>
 8001416:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 800141a:	e02f      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f001 fcb1 	bl	8002d84 <Powerstep01_StallOcd_RegVal_to_Th>
 8001422:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001426:	e029      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 8001428:	7cfb      	ldrb	r3, [r7, #19]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <Powerstep01_GetAnalogValue+0x12e>
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f001 fbf6 	bl	8002c20 <Powerstep01_Kval_RegVal_to_Perc>
 8001434:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 8001438:	e020      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f001 fcde 	bl	8002dfc <Powerstep01_Tval_RegVal_to_RefVoltage>
 8001440:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001444:	e01a      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8001446:	7cfb      	ldrb	r3, [r7, #19]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d016      	beq.n	800147a <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 800144c:	7cfb      	ldrb	r3, [r7, #19]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <Powerstep01_GetAnalogValue+0x152>
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f001 fb0e 	bl	8002a74 <Powerstep01_BEMFslope_RegVal_to_Perc>
 8001458:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 800145c:	e00e      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 fd01 	bl	8002e66 <Powerstep01_Tmin_RegVal_to_Time>
 8001464:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001468:	e008      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	edc7 7a05 	vstr	s15, [r7, #20]
 8001478:	e000      	b.n	800147c <Powerstep01_GetAnalogValue+0x170>
        break;
 800147a:	bf00      	nop
  }
  return value;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	ee07 3a90 	vmov	s15, r3
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fafe 	bl	8000a9c <Powerstep01_CmdGetParam>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fba2 	bl	8001bec <Powerstep01_ConvertPosition>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fbd4 	bl	8000c6c <Powerstep01_CmdGetStatus>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 80014d2:	2300      	movs	r3, #0
  }
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	603a      	str	r2, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	460b      	mov	r3, r1
 80014ea:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80014ec:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <Powerstep01_QueueCommands+0xd8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d257      	bcs.n	80015a8 <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <Powerstep01_QueueCommands+0xd8>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 800150e:	2b8a      	cmp	r3, #138	@ 0x8a
 8001510:	d01a      	beq.n	8001548 <Powerstep01_QueueCommands+0x6c>
 8001512:	2b8a      	cmp	r3, #138	@ 0x8a
 8001514:	dc35      	bgt.n	8001582 <Powerstep01_QueueCommands+0xa6>
 8001516:	2b82      	cmp	r3, #130	@ 0x82
 8001518:	d016      	beq.n	8001548 <Powerstep01_QueueCommands+0x6c>
 800151a:	2b82      	cmp	r3, #130	@ 0x82
 800151c:	dc31      	bgt.n	8001582 <Powerstep01_QueueCommands+0xa6>
 800151e:	2b40      	cmp	r3, #64	@ 0x40
 8001520:	d012      	beq.n	8001548 <Powerstep01_QueueCommands+0x6c>
 8001522:	2b40      	cmp	r3, #64	@ 0x40
 8001524:	db2d      	blt.n	8001582 <Powerstep01_QueueCommands+0xa6>
 8001526:	2b68      	cmp	r3, #104	@ 0x68
 8001528:	dc2b      	bgt.n	8001582 <Powerstep01_QueueCommands+0xa6>
 800152a:	2b50      	cmp	r3, #80	@ 0x50
 800152c:	db29      	blt.n	8001582 <Powerstep01_QueueCommands+0xa6>
 800152e:	3b50      	subs	r3, #80	@ 0x50
 8001530:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <Powerstep01_QueueCommands+0xdc>)
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01c      	beq.n	8001582 <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	491c      	ldr	r1, [pc, #112]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 800154c:	79ba      	ldrb	r2, [r7, #6]
 800154e:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	141a      	asrs	r2, r3, #16
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	b2d1      	uxtb	r1, r2
 8001558:	4a18      	ldr	r2, [pc, #96]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 800155a:	4413      	add	r3, r2
 800155c:	460a      	mov	r2, r1
 800155e:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	121a      	asrs	r2, r3, #8
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	b2d1      	uxtb	r1, r2
 8001568:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	b2d1      	uxtb	r1, r2
 8001576:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	725a      	strb	r2, [r3, #9]
       break;
 800157e:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 8001580:	e012      	b.n	80015a8 <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 8001586:	2100      	movs	r1, #0
 8001588:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 800158e:	4413      	add	r3, r2
 8001590:	2200      	movs	r2, #0
 8001592:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 8001598:	4413      	add	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = command;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <Powerstep01_QueueCommands+0xe0>)
 80015a2:	4413      	add	r3, r2
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	725a      	strb	r2, [r3, #9]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20000284 	.word	0x20000284
 80015b8:	01010001 	.word	0x01010001
 80015bc:	20000288 	.word	0x20000288

080015c0 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	211b      	movs	r1, #27
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fa64 	bl	8000a9c <Powerstep01_CmdGetParam>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29b      	uxth	r3, r3
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fee5 	bl	80033bc <Powerstep01_Board_ReleaseReset>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f001 feea 	bl	80033e0 <Powerstep01_Board_Reset>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	460a      	mov	r2, r1
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	4613      	mov	r3, r2
 8001622:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	2b07      	cmp	r3, #7
 8001628:	d82a      	bhi.n	8001680 <Powerstep01_SelectStepMode+0x6c>
 800162a:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <Powerstep01_SelectStepMode+0x1c>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001651 	.word	0x08001651
 8001634:	08001657 	.word	0x08001657
 8001638:	0800165d 	.word	0x0800165d
 800163c:	08001663 	.word	0x08001663
 8001640:	08001669 	.word	0x08001669
 8001644:	0800166f 	.word	0x0800166f
 8001648:	08001675 	.word	0x08001675
 800164c:	0800167b 	.word	0x0800167b
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
      break;
 8001654:	e016      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
      break;    
 800165a:	e013      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 800165c:	2302      	movs	r3, #2
 800165e:	73fb      	strb	r3, [r7, #15]
      break;        
 8001660:	e010      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8001662:	2303      	movs	r3, #3
 8001664:	73fb      	strb	r3, [r7, #15]
      break;
 8001666:	e00d      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8001668:	2304      	movs	r3, #4
 800166a:	73fb      	strb	r3, [r7, #15]
      break;        
 800166c:	e00a      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 800166e:	2305      	movs	r3, #5
 8001670:	73fb      	strb	r3, [r7, #15]
      break;
 8001672:	e007      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8001674:	2306      	movs	r3, #6
 8001676:	73fb      	strb	r3, [r7, #15]
      break;
 8001678:	e004      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 800167a:	2307      	movs	r3, #7
 800167c:	73fb      	strb	r3, [r7, #15]
      break;
 800167e:	e001      	b.n	8001684 <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8001680:	2300      	movs	r3, #0
 8001682:	e01c      	b.n	80016be <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fbed 	bl	8000e66 <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2116      	movs	r1, #22
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fa03 	bl	8000a9c <Powerstep01_CmdGetParam>
 8001696:	4603      	mov	r3, r0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f023 0307 	bic.w	r3, r3, #7
 800169e:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 80016a0:	7bba      	ldrb	r2, [r7, #14]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2116      	movs	r1, #22
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fc68 	bl	8000f84 <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fc3f 	bl	8000f3a <Powerstep01_CmdResetPos>
  
  return TRUE;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	e011      	b.n	80016f8 <Powerstep01_SendQueuedCommands+0x30>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <Powerstep01_SendQueuedCommands+0x40>)
 80016de:	1898      	adds	r0, r3, r2
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	4a08      	ldr	r2, [pc, #32]	@ (800170c <Powerstep01_SendQueuedCommands+0x44>)
 80016ea:	4413      	add	r3, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f001 f94b 	bl	8002988 <Powerstep01_WriteBytes>
       loop++)
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3301      	adds	r3, #1
 80016f6:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d9ea      	bls.n	80016d4 <Powerstep01_SendQueuedCommands+0xc>
  }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000288 	.word	0x20000288
 800170c:	20000294 	.word	0x20000294

08001710 <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f9bb 	bl	8000a9c <Powerstep01_CmdGetParam>
 8001726:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	1ad2      	subs	r2, r2, r3
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2101      	movs	r1, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc26 	bl	8000f84 <Powerstep01_CmdSetParam>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2103      	movs	r1, #3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc16 	bl	8000f84 <Powerstep01_CmdSetParam>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d804      	bhi.n	800177a <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8001770:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <Powerstep01_SetNbDevices+0x28>)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 800177a:	2300      	movs	r3, #0
  }
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20000284 	.word	0x20000284

0800178c <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	ed87 0a01 	vstr	s0, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 800179c:	2301      	movs	r3, #1
 800179e:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2116      	movs	r1, #22
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff f979 	bl	8000a9c <Powerstep01_CmdGetParam>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 80017bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d507      	bpl.n	80017da <Powerstep01_SetAnalogValue+0x4e>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d004      	beq.n	80017da <Powerstep01_SetAnalogValue+0x4e>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d001      	beq.n	80017da <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	2b14      	cmp	r3, #20
 80017e0:	f200 8191 	bhi.w	8001b06 <Powerstep01_SetAnalogValue+0x37a>
 80017e4:	a201      	add	r2, pc, #4	@ (adr r2, 80017ec <Powerstep01_SetAnalogValue+0x60>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080018a7 	.word	0x080018a7
 80017f0:	08001841 	.word	0x08001841
 80017f4:	080018a7 	.word	0x080018a7
 80017f8:	08001b07 	.word	0x08001b07
 80017fc:	0800191b 	.word	0x0800191b
 8001800:	0800191b 	.word	0x0800191b
 8001804:	08001941 	.word	0x08001941
 8001808:	08001967 	.word	0x08001967
 800180c:	08001a5b 	.word	0x08001a5b
 8001810:	08001a5b 	.word	0x08001a5b
 8001814:	08001a5b 	.word	0x08001a5b
 8001818:	08001a5b 	.word	0x08001a5b
 800181c:	080019d7 	.word	0x080019d7
 8001820:	08001aa9 	.word	0x08001aa9
 8001824:	08001ab5 	.word	0x08001ab5
 8001828:	08001ab5 	.word	0x08001ab5
 800182c:	080019fd 	.word	0x080019fd
 8001830:	08001b07 	.word	0x08001b07
 8001834:	08001a35 	.word	0x08001a35
 8001838:	08001a35 	.word	0x08001a35
 800183c:	0800199f 	.word	0x0800199f
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8001840:	edd7 7a01 	vldr	s15, [r7, #4]
 8001844:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001b28 <Powerstep01_SetAnalogValue+0x39c>
 8001848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dc1c      	bgt.n	800188c <Powerstep01_SetAnalogValue+0x100>
 8001852:	edd7 7a01 	vldr	s15, [r7, #4]
 8001856:	eef5 7a40 	vcmp.f32	s15, #0.0
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	d018      	beq.n	8001892 <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8001860:	2116      	movs	r1, #22
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff f91a 	bl	8000a9c <Powerstep01_CmdGetParam>
 8001868:	4603      	mov	r3, r0
 800186a:	43db      	mvns	r3, r3
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	2201      	movs	r2, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d502      	bpl.n	8001892 <Powerstep01_SetAnalogValue+0x106>
 800188c:	2300      	movs	r3, #0
 800188e:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8001890:	e13b      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8001892:	edd7 7a01 	vldr	s15, [r7, #4]
 8001896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189a:	ee17 3a90 	vmov	r3, s15
 800189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a2:	617b      	str	r3, [r7, #20]
      break;        
 80018a4:	e131      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 80018a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80018aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	d51c      	bpl.n	80018ee <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 80018b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b8:	eef1 7a67 	vneg.f32	s15, s15
 80018bc:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 80018c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c8:	ee17 3a90 	vmov	r3, s15
 80018cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018d0:	d80a      	bhi.n	80018e8 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018da:	ee17 3a90 	vmov	r3, s15
 80018de:	425b      	negs	r3, r3
 80018e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80018e4:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 80018e6:	e110      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 80018e8:	2300      	movs	r3, #0
 80018ea:	74fb      	strb	r3, [r7, #19]
      break;
 80018ec:	e10d      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 80018ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f6:	ee17 3a90 	vmov	r3, s15
 80018fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018fe:	d209      	bcs.n	8001914 <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001900:	edd7 7a01 	vldr	s15, [r7, #4]
 8001904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001908:	ee17 3a90 	vmov	r3, s15
 800190c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001910:	617b      	str	r3, [r7, #20]
      break;
 8001912:	e0fa      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8001914:	2300      	movs	r3, #0
 8001916:	74fb      	strb	r3, [r7, #19]
      break;
 8001918:	e0f7      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 800191a:	edd7 7a01 	vldr	s15, [r7, #4]
 800191e:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001b2c <Powerstep01_SetAnalogValue+0x3a0>
 8001922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	dd02      	ble.n	8001932 <Powerstep01_SetAnalogValue+0x1a6>
 800192c:	2300      	movs	r3, #0
 800192e:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8001930:	e0eb      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8001932:	ed97 0a01 	vldr	s0, [r7, #4]
 8001936:	f001 f84d 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800193a:	4603      	mov	r3, r0
 800193c:	617b      	str	r3, [r7, #20]
      break;
 800193e:	e0e4      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8001940:	edd7 7a01 	vldr	s15, [r7, #4]
 8001944:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001b30 <Powerstep01_SetAnalogValue+0x3a4>
 8001948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	dd02      	ble.n	8001958 <Powerstep01_SetAnalogValue+0x1cc>
 8001952:	2300      	movs	r3, #0
 8001954:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8001956:	e0d8      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8001958:	ed97 0a01 	vldr	s0, [r7, #4]
 800195c:	f001 f974 	bl	8002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8001960:	4603      	mov	r3, r0
 8001962:	617b      	str	r3, [r7, #20]
      break;
 8001964:	e0d1      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8001966:	edd7 7a01 	vldr	s15, [r7, #4]
 800196a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001b34 <Powerstep01_SetAnalogValue+0x3a8>
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd02      	ble.n	800197e <Powerstep01_SetAnalogValue+0x1f2>
 8001978:	2300      	movs	r3, #0
 800197a:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 800197c:	e0c5      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f88a 	bl	8000a9c <Powerstep01_CmdGetParam>
 8001988:	4603      	mov	r3, r0
 800198a:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 800198e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001992:	f001 f98b 	bl	8002cac <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8001996:	4603      	mov	r3, r0
 8001998:	4323      	orrs	r3, r4
 800199a:	617b      	str	r3, [r7, #20]
      break;      
 800199c:	e0b5      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 800199e:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001b38 <Powerstep01_SetAnalogValue+0x3ac>
 80019a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	dd02      	ble.n	80019b6 <Powerstep01_SetAnalogValue+0x22a>
 80019b0:	2300      	movs	r3, #0
 80019b2:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 80019b4:	e0a9      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f86e 	bl	8000a9c <Powerstep01_CmdGetParam>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 80019c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80019ca:	f001 f869 	bl	8002aa0 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4323      	orrs	r3, r4
 80019d2:	617b      	str	r3, [r7, #20]
      break;
 80019d4:	e099      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 80019d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019da:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001b3c <Powerstep01_SetAnalogValue+0x3b0>
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	dd02      	ble.n	80019ee <Powerstep01_SetAnalogValue+0x262>
 80019e8:	2300      	movs	r3, #0
 80019ea:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 80019ec:	e08d      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 80019ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80019f2:	f001 f889 	bl	8002b08 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80019f6:	4603      	mov	r3, r0
 80019f8:	617b      	str	r3, [r7, #20]
      break;
 80019fa:	e086      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 80019fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d408      	bmi.n	8001a20 <Powerstep01_SetAnalogValue+0x294>
 8001a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a12:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001b40 <Powerstep01_SetAnalogValue+0x3b4>
 8001a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	dd02      	ble.n	8001a26 <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 8001a24:	e071      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 8001a26:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a2a:	f001 f89f 	bl	8002b6c <Powerstep01_KTherm_Comp_to_RegVal>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	617b      	str	r3, [r7, #20]
      break;
 8001a32:	e06a      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001b44 <Powerstep01_SetAnalogValue+0x3b8>
 8001a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a44:	dd02      	ble.n	8001a4c <Powerstep01_SetAnalogValue+0x2c0>
 8001a46:	2300      	movs	r3, #0
 8001a48:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8001a4a:	e05e      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8001a4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a50:	f001 f974 	bl	8002d3c <Powerstep01_StallOcd_Th_to_RegVal>
 8001a54:	4603      	mov	r3, r0
 8001a56:	617b      	str	r3, [r7, #20]
      break;
 8001a58:	e057      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8001a5a:	7cbb      	ldrb	r3, [r7, #18]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d112      	bne.n	8001a86 <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8001a60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a64:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001b44 <Powerstep01_SetAnalogValue+0x3b8>
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dd02      	ble.n	8001a78 <Powerstep01_SetAnalogValue+0x2ec>
 8001a72:	2300      	movs	r3, #0
 8001a74:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 8001a76:	e048      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 8001a78:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a7c:	f001 f99a 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8001a80:	4603      	mov	r3, r0
 8001a82:	617b      	str	r3, [r7, #20]
      break;
 8001a84:	e041      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 8001a86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	dd02      	ble.n	8001a9a <Powerstep01_SetAnalogValue+0x30e>
 8001a94:	2300      	movs	r3, #0
 8001a96:	74fb      	strb	r3, [r7, #19]
      break;
 8001a98:	e037      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 8001a9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a9e:	f001 f8a1 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	617b      	str	r3, [r7, #20]
      break;
 8001aa6:	e030      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8001aa8:	7cbb      	ldrb	r3, [r7, #18]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ab2:	e02a      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 8001ab4:	7cbb      	ldrb	r3, [r7, #18]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d112      	bne.n	8001ae0 <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 8001aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001abe:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b48 <Powerstep01_SetAnalogValue+0x3bc>
 8001ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	dd02      	ble.n	8001ad2 <Powerstep01_SetAnalogValue+0x346>
 8001acc:	2300      	movs	r3, #0
 8001ace:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 8001ad0:	e01b      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 8001ad2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ad6:	f001 f9a9 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 8001ada:	4603      	mov	r3, r0
 8001adc:	617b      	str	r3, [r7, #20]
      break;
 8001ade:	e014      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001b4c <Powerstep01_SetAnalogValue+0x3c0>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd02      	ble.n	8001af8 <Powerstep01_SetAnalogValue+0x36c>
 8001af2:	2300      	movs	r3, #0
 8001af4:	74fb      	strb	r3, [r7, #19]
      break;
 8001af6:	e008      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8001af8:	ed97 0a01 	vldr	s0, [r7, #4]
 8001afc:	f000 ff9c 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8001b00:	4603      	mov	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]
      break;
 8001b04:	e001      	b.n	8001b0a <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 8001b0a:	7cfb      	ldrb	r3, [r7, #19]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fa34 	bl	8000f84 <Powerstep01_CmdSetParam>
  }
  return result;
 8001b1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	43ff8000 	.word	0x43ff8000
 8001b2c:	4768c600 	.word	0x4768c600
 8001b30:	4673e800 	.word	0x4673e800
 8001b34:	44741333 	.word	0x44741333
 8001b38:	46742400 	.word	0x46742400
 8001b3c:	44742000 	.word	0x44742000
 8001b40:	3fbc0000 	.word	0x3fbc0000
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	42800000 	.word	0x42800000
 8001b4c:	3ecccccd 	.word	0x3ecccccd

08001b50 <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fbfd 	bl	800335c <Powerstep01_Board_StartStepClock>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 8001b6e:	f001 fc1b 	bl	80033a8 <Powerstep01_Board_StopStepClock>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 8001b82:	e016      	b.n	8001bb2 <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	71bb      	strb	r3, [r7, #6]
 8001b8c:	e00b      	b.n	8001ba6 <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc8e 	bl	80014b2 <Powerstep01_IsDeviceBusy>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	71bb      	strb	r3, [r7, #6]
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	79ba      	ldrb	r2, [r7, #6]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d3ed      	bcc.n	8001b8e <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e5      	bne.n	8001b84 <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000284 	.word	0x20000284

08001bc8 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 8001bd2:	bf00      	nop
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc6b 	bl	80014b2 <Powerstep01_IsDeviceBusy>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f8      	bne.n	8001bd4 <Powerstep01_WaitWhileActive+0xc>
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3301      	adds	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001c10:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	425b      	negs	r3, r3
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e001      	b.n	8001c1e <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <Powerstep01_BusyInterruptHandler+0x24>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <Powerstep01_BusyInterruptHandler+0x28>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <Powerstep01_BusyInterruptHandler+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8001c44:	4b03      	ldr	r3, [pc, #12]	@ (8001c54 <Powerstep01_BusyInterruptHandler+0x28>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000278 	.word	0x20000278
 8001c54:	200002a1 	.word	0x200002a1

08001c58 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <Powerstep01_ErrorHandler+0x28>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <Powerstep01_ErrorHandler+0x28>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	4610      	mov	r0, r2
 8001c72:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8001c74:	e000      	b.n	8001c78 <Powerstep01_ErrorHandler+0x20>
    while(1)
 8001c76:	e7fe      	b.n	8001c76 <Powerstep01_ErrorHandler+0x1e>
}
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000280 	.word	0x20000280

08001c84 <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <Powerstep01_FlagInterruptHandler+0x24>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <Powerstep01_FlagInterruptHandler+0x28>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <Powerstep01_FlagInterruptHandler+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <Powerstep01_FlagInterruptHandler+0x28>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000027c 	.word	0x2000027c
 8001cac:	200002a1 	.word	0x200002a1

08001cb0 <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	603a      	str	r2, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8001cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e30 <Powerstep01_SendCommand+0x180>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f080 80ad 	bcs.w	8001e28 <Powerstep01_SendCommand+0x178>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001cd2:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <Powerstep01_SendCommand+0x180>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 8001ce6:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <Powerstep01_SendCommand+0x184>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8001cf2:	f001 fa55 	bl	80031a0 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e019      	b.n	8001d34 <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8001d00:	4a4d      	ldr	r2, [pc, #308]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8001d0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	3303      	adds	r3, #3
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001d16:	4a48      	ldr	r2, [pc, #288]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3306      	adds	r3, #6
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 8001d22:	4a45      	ldr	r2, [pc, #276]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	3309      	adds	r3, #9
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <Powerstep01_SendCommand+0x180>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d3de      	bcc.n	8001d00 <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 8001d42:	79bb      	ldrb	r3, [r7, #6]
 8001d44:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8001d48:	2b8a      	cmp	r3, #138	@ 0x8a
 8001d4a:	d016      	beq.n	8001d7a <Powerstep01_SendCommand+0xca>
 8001d4c:	2b8a      	cmp	r3, #138	@ 0x8a
 8001d4e:	dc32      	bgt.n	8001db6 <Powerstep01_SendCommand+0x106>
 8001d50:	2b82      	cmp	r3, #130	@ 0x82
 8001d52:	d012      	beq.n	8001d7a <Powerstep01_SendCommand+0xca>
 8001d54:	2b82      	cmp	r3, #130	@ 0x82
 8001d56:	dc2e      	bgt.n	8001db6 <Powerstep01_SendCommand+0x106>
 8001d58:	2b68      	cmp	r3, #104	@ 0x68
 8001d5a:	d00a      	beq.n	8001d72 <Powerstep01_SendCommand+0xc2>
 8001d5c:	2b68      	cmp	r3, #104	@ 0x68
 8001d5e:	dc2a      	bgt.n	8001db6 <Powerstep01_SendCommand+0x106>
 8001d60:	2b60      	cmp	r3, #96	@ 0x60
 8001d62:	d006      	beq.n	8001d72 <Powerstep01_SendCommand+0xc2>
 8001d64:	2b60      	cmp	r3, #96	@ 0x60
 8001d66:	dc26      	bgt.n	8001db6 <Powerstep01_SendCommand+0x106>
 8001d68:	2b40      	cmp	r3, #64	@ 0x40
 8001d6a:	d006      	beq.n	8001d7a <Powerstep01_SendCommand+0xca>
 8001d6c:	2b50      	cmp	r3, #80	@ 0x50
 8001d6e:	d004      	beq.n	8001d7a <Powerstep01_SendCommand+0xca>
 8001d70:	e021      	b.n	8001db6 <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001d78:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 8001d7a:	7a7b      	ldrb	r3, [r7, #9]
 8001d7c:	492e      	ldr	r1, [pc, #184]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d7e:	79ba      	ldrb	r2, [r7, #6]
 8001d80:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	0c1a      	lsrs	r2, r3, #16
 8001d86:	7a7b      	ldrb	r3, [r7, #9]
 8001d88:	b2d1      	uxtb	r1, r2
 8001d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	460a      	mov	r2, r1
 8001d90:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	0a1a      	lsrs	r2, r3, #8
 8001d96:	7a7b      	ldrb	r3, [r7, #9]
 8001d98:	b2d1      	uxtb	r1, r2
 8001d9a:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001d9c:	4413      	add	r3, r2
 8001d9e:	460a      	mov	r2, r1
 8001da0:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001da2:	7a7b      	ldrb	r3, [r7, #9]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d1      	uxtb	r1, r2
 8001da8:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001daa:	4413      	add	r3, r2
 8001dac:	460a      	mov	r2, r1
 8001dae:	725a      	strb	r2, [r3, #9]
          maxArgumentNbBytes = 3;
 8001db0:	2303      	movs	r3, #3
 8001db2:	72fb      	strb	r3, [r7, #11]
          break;
 8001db4:	e012      	b.n	8001ddc <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8001db6:	7a7b      	ldrb	r3, [r7, #9]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8001dbe:	7a7b      	ldrb	r3, [r7, #9]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8001dc8:	7a7b      	ldrb	r3, [r7, #9]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = param;
 8001dd2:	7a7b      	ldrb	r3, [r7, #9]
 8001dd4:	4a18      	ldr	r2, [pc, #96]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	725a      	strb	r2, [r3, #9]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001ddc:	f001 f9d7 	bl	800318e <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <Powerstep01_SendCommand+0x184>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f47f af7b 	bne.w	8001ce6 <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f1c3 0303 	rsb	r3, r3, #3
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e011      	b.n	8001e1e <Powerstep01_SendCommand+0x16e>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <Powerstep01_SendCommand+0x188>)
 8001e04:	1898      	adds	r0, r3, r2
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <Powerstep01_SendCommand+0x18c>)
 8001e10:	4413      	add	r3, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f000 fdb8 	bl	8002988 <Powerstep01_WriteBytes>
         loop++)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d9ea      	bls.n	8001dfa <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8001e24:	f001 f9bc 	bl	80031a0 <Powerstep01_Board_EnableIrq>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000284 	.word	0x20000284
 8001e34:	200002a0 	.word	0x200002a0
 8001e38:	20000288 	.word	0x20000288
 8001e3c:	20000294 	.word	0x20000294

08001e40 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f897 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f891 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2103      	movs	r1, #3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f88b 	bl	8000f84 <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	f000 8263 	beq.w	800233c <Powerstep01_SetRegisterToPredefinedValues+0x4fc>
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	f300 8380 	bgt.w	800257c <Powerstep01_SetRegisterToPredefinedValues+0x73c>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <Powerstep01_SetRegisterToPredefinedValues+0x48>
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	f000 813b 	beq.w	80020fc <Powerstep01_SetRegisterToPredefinedValues+0x2bc>
      }
      break;
#endif
    default: ;
  }
}
 8001e86:	e379      	b.n	800257c <Powerstep01_SetRegisterToPredefinedValues+0x73c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8001e8c:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80020cc <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8001e90:	f000 fda0 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8001e94:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8001e96:	461a      	mov	r2, r3
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2105      	movs	r1, #5
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f871 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8001ea2:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80020cc <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8001ea6:	f000 fd95 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8001eaa:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8001eac:	461a      	mov	r2, r3
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	2106      	movs	r1, #6
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f866 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8001eb8:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80020d0 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 8001ebc:	f000 fec4 	bl	8002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8001ec0:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2107      	movs	r1, #7
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff f85b 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8001ece:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80020e8 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 8001ed2:	f000 feeb 	bl	8002cac <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8001ed6:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8001ed8:	461a      	mov	r2, r3
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2108      	movs	r1, #8
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f850 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8001ee4:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80020c8 <Powerstep01_SetRegisterToPredefinedValues+0x288>
 8001ee8:	f000 fdda 	bl	8002aa0 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8001eec:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8001eee:	461a      	mov	r2, r3
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	2115      	movs	r1, #21
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f845 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2208      	movs	r2, #8
 8001efe:	2113      	movs	r1, #19
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f83f 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	220c      	movs	r2, #12
 8001f0a:	2116      	movs	r1, #22
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f839 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	22ef      	movs	r2, #239	@ 0xef
 8001f16:	2117      	movs	r1, #23
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f833 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	22c3      	movs	r2, #195	@ 0xc3
 8001f22:	2118      	movs	r1, #24
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f82d 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2240      	movs	r2, #64	@ 0x40
 8001f2e:	2119      	movs	r1, #25
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f827 	bl	8000f84 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d175      	bne.n	8002028 <Powerstep01_SetRegisterToPredefinedValues+0x1e8>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 8001f3c:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 80020f0 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 8001f40:	f000 fde2 	bl	8002b08 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8001f44:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8001f46:	461a      	mov	r2, r3
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	210d      	movs	r1, #13
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f819 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 8001f52:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001f56:	f000 fe09 	bl	8002b6c <Powerstep01_KTherm_Comp_to_RegVal>
 8001f5a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2111      	movs	r1, #17
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f80e 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 8001f68:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80020f4 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8001f6c:	f000 fee6 	bl	8002d3c <Powerstep01_StallOcd_Th_to_RegVal>
 8001f70:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8001f72:	461a      	mov	r2, r3
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2114      	movs	r1, #20
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f803 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8001f7e:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8001f82:	f000 fe2f 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8001f86:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2109      	movs	r1, #9
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fff8 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8001f94:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8001f98:	f000 fe24 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8001f9c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	210a      	movs	r1, #10
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ffed 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8001faa:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8001fae:	f000 fe19 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8001fb2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	210b      	movs	r1, #11
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe ffe2 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8001fc0:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8001fc4:	f000 fe0e 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8001fc8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8001fca:	461a      	mov	r2, r3
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	210c      	movs	r1, #12
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe ffd7 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8001fd6:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 80020d4 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8001fda:	f000 fd2d 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8001fde:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	210e      	movs	r1, #14
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ffcc 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8001fec:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80020d8 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8001ff0:	f000 fd22 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8001ff4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe ffc1 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002002:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80020d8 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8002006:	f000 fd17 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800200a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 800200c:	461a      	mov	r2, r3
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2110      	movs	r1, #16
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe ffb6 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f642 6208 	movw	r2, #11784	@ 0x2e08
 800201e:	211a      	movs	r1, #26
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe ffaf 	bl	8000f84 <Powerstep01_CmdSetParam>
      break;
 8002026:	e2a9      	b.n	800257c <Powerstep01_SetRegisterToPredefinedValues+0x73c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002028:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 800202c:	f000 fec2 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002030:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002032:	461a      	mov	r2, r3
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	2109      	movs	r1, #9
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe ffa3 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800203e:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002042:	f000 feb7 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002046:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002048:	461a      	mov	r2, r3
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	210a      	movs	r1, #10
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe ff98 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002054:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002058:	f000 feac 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 800205c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 800205e:	461a      	mov	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	210b      	movs	r1, #11
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ff8d 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800206a:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 800206e:	f000 fea1 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002072:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002074:	461a      	mov	r2, r3
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	210c      	movs	r1, #12
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe ff82 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2235      	movs	r2, #53	@ 0x35
 8002084:	210e      	movs	r1, #14
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe ff7c 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800208c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002090:	f000 fecc 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 8002094:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002096:	461a      	mov	r2, r3
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	210f      	movs	r1, #15
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe ff71 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80020a2:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 80020a6:	f000 fec1 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 80020aa:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 80020ac:	461a      	mov	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2110      	movs	r1, #16
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe ff66 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f243 2208 	movw	r2, #12808	@ 0x3208
 80020be:	211a      	movs	r1, #26
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ff5f 	bl	8000f84 <Powerstep01_CmdSetParam>
      break;
 80020c6:	e259      	b.n	800257c <Powerstep01_SetRegisterToPredefinedValues+0x73c>
 80020c8:	437428f6 	.word	0x437428f6
 80020cc:	4168cccd 	.word	0x4168cccd
 80020d0:	41740000 	.word	0x41740000
 80020d4:	3d1c432d 	.word	0x3d1c432d
 80020d8:	3d801f75 	.word	0x3d801f75
 80020dc:	43a40f5c 	.word	0x43a40f5c
 80020e0:	44fb051f 	.word	0x44fb051f
 80020e4:	4477f47b 	.word	0x4477f47b
 80020e8:	00000000 	.word	0x00000000
 80020ec:	4414c5c3 	.word	0x4414c5c3
 80020f0:	42760c4a 	.word	0x42760c4a
 80020f4:	4404d000 	.word	0x4404d000
 80020f8:	418028f6 	.word	0x418028f6
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_1;
 80020fc:	2308      	movs	r3, #8
 80020fe:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002100:	ed1f 0a0e 	vldr	s0, [pc, #-56]	@ 80020cc <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8002104:	f000 fc66 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002108:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2105      	movs	r1, #5
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe ff37 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002116:	ed1f 0a13 	vldr	s0, [pc, #-76]	@ 80020cc <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 800211a:	f000 fc5b 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800211e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002120:	461a      	mov	r2, r3
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2106      	movs	r1, #6
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ff2c 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 800212c:	ed1f 0a18 	vldr	s0, [pc, #-96]	@ 80020d0 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 8002130:	f000 fd8a 	bl	8002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002134:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002136:	461a      	mov	r2, r3
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2107      	movs	r1, #7
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ff21 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8002142:	ed1f 0a17 	vldr	s0, [pc, #-92]	@ 80020e8 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 8002146:	f000 fdb1 	bl	8002cac <Powerstep01_MinSpd_Steps_s_to_RegVal>
 800214a:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 800214c:	461a      	mov	r2, r3
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2108      	movs	r1, #8
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff16 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8002158:	ed1f 0a1c 	vldr	s0, [pc, #-112]	@ 80020ec <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 800215c:	f000 fca0 	bl	8002aa0 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002160:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002162:	461a      	mov	r2, r3
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2115      	movs	r1, #21
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe ff0b 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2208      	movs	r2, #8
 8002172:	2113      	movs	r1, #19
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ff05 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	220c      	movs	r2, #12
 800217e:	2116      	movs	r1, #22
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe feff 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	22ef      	movs	r2, #239	@ 0xef
 800218a:	2117      	movs	r1, #23
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fef9 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	22c3      	movs	r2, #195	@ 0xc3
 8002196:	2118      	movs	r1, #24
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fef3 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2240      	movs	r2, #64	@ 0x40
 80021a2:	2119      	movs	r1, #25
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe feed 	bl	8000f84 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d175      	bne.n	800229c <Powerstep01_SetRegisterToPredefinedValues+0x45c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80021b0:	ed1f 0a31 	vldr	s0, [pc, #-196]	@ 80020f0 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 80021b4:	f000 fca8 	bl	8002b08 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80021b8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80021ba:	461a      	mov	r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	210d      	movs	r1, #13
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fedf 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 80021c6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80021ca:	f000 fccf 	bl	8002b6c <Powerstep01_KTherm_Comp_to_RegVal>
 80021ce:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 80021d0:	461a      	mov	r2, r3
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2111      	movs	r1, #17
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fed4 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 80021dc:	ed1f 0a3b 	vldr	s0, [pc, #-236]	@ 80020f4 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 80021e0:	f000 fdac 	bl	8002d3c <Powerstep01_StallOcd_Th_to_RegVal>
 80021e4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 80021e6:	461a      	mov	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	2114      	movs	r1, #20
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fec9 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80021f2:	ed1f 0a3f 	vldr	s0, [pc, #-252]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80021f6:	f000 fcf5 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 80021fa:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 80021fc:	461a      	mov	r2, r3
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2109      	movs	r1, #9
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe febe 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002208:	ed1f 0a45 	vldr	s0, [pc, #-276]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 800220c:	f000 fcea 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8002210:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	210a      	movs	r1, #10
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe feb3 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800221e:	ed1f 0a4a 	vldr	s0, [pc, #-296]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002222:	f000 fcdf 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8002226:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	210b      	movs	r1, #11
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fea8 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002234:	ed1f 0a50 	vldr	s0, [pc, #-320]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002238:	f000 fcd4 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 800223c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 800223e:	461a      	mov	r2, r3
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	210c      	movs	r1, #12
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe9d 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800224a:	ed1f 0a5e 	vldr	s0, [pc, #-376]	@ 80020d4 <Powerstep01_SetRegisterToPredefinedValues+0x294>
 800224e:	f000 fbf3 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002252:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002254:	461a      	mov	r2, r3
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	210e      	movs	r1, #14
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fe92 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002260:	ed1f 0a63 	vldr	s0, [pc, #-396]	@ 80020d8 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8002264:	f000 fbe8 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002268:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 800226a:	461a      	mov	r2, r3
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	210f      	movs	r1, #15
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe87 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002276:	ed1f 0a68 	vldr	s0, [pc, #-416]	@ 80020d8 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 800227a:	f000 fbdd 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800227e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002280:	461a      	mov	r2, r3
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2110      	movs	r1, #16
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fe7c 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002292:	211a      	movs	r1, #26
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fe75 	bl	8000f84 <Powerstep01_CmdSetParam>
      break;     
 800229a:	e16f      	b.n	800257c <Powerstep01_SetRegisterToPredefinedValues+0x73c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800229c:	ed1f 0a71 	vldr	s0, [pc, #-452]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80022a0:	f000 fd88 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80022a4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 80022a6:	461a      	mov	r2, r3
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	2109      	movs	r1, #9
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fe69 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80022b2:	ed1f 0a76 	vldr	s0, [pc, #-472]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80022b6:	f000 fd7d 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80022ba:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80022bc:	461a      	mov	r2, r3
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	210a      	movs	r1, #10
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fe5e 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80022c8:	ed1f 0a7c 	vldr	s0, [pc, #-496]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80022cc:	f000 fd72 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80022d0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	210b      	movs	r1, #11
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fe53 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80022de:	ed1f 0a81 	vldr	s0, [pc, #-516]	@ 80020dc <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80022e2:	f000 fd67 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80022e6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 80022e8:	461a      	mov	r2, r3
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	210c      	movs	r1, #12
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fe48 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2235      	movs	r2, #53	@ 0x35
 80022f8:	210e      	movs	r1, #14
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fe42 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002300:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002304:	f000 fd92 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 8002308:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 800230a:	461a      	mov	r2, r3
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	210f      	movs	r1, #15
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fe37 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002316:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 800231a:	f000 fd87 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 800231e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002320:	461a      	mov	r2, r3
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2110      	movs	r1, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fe2c 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002332:	211a      	movs	r1, #26
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fe25 	bl	8000f84 <Powerstep01_CmdSetParam>
      break;     
 800233a:	e11f      	b.n	800257c <Powerstep01_SetRegisterToPredefinedValues+0x73c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_2;
 800233c:	2308      	movs	r3, #8
 800233e:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002340:	ed1f 0a99 	vldr	s0, [pc, #-612]	@ 80020e0 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002344:	f000 fb46 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002348:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 800234a:	461a      	mov	r2, r3
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	2105      	movs	r1, #5
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fe17 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002356:	ed1f 0a9e 	vldr	s0, [pc, #-632]	@ 80020e0 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800235a:	f000 fb3b 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 800235e:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2106      	movs	r1, #6
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fe0c 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 800236c:	ed1f 0aa3 	vldr	s0, [pc, #-652]	@ 80020e4 <Powerstep01_SetRegisterToPredefinedValues+0x2a4>
 8002370:	f000 fc6a 	bl	8002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002374:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	2107      	movs	r1, #7
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fe01 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 8002382:	ed1f 0aa7 	vldr	s0, [pc, #-668]	@ 80020e8 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 8002386:	f000 fc91 	bl	8002cac <Powerstep01_MinSpd_Steps_s_to_RegVal>
 800238a:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 800238c:	461a      	mov	r2, r3
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2108      	movs	r1, #8
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fdf6 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8002398:	ed1f 0aac 	vldr	s0, [pc, #-688]	@ 80020ec <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 800239c:	f000 fb80 	bl	8002aa0 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 80023a0:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 80023a2:	461a      	mov	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2115      	movs	r1, #21
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fdeb 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2208      	movs	r2, #8
 80023b2:	2113      	movs	r1, #19
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fde5 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	220c      	movs	r2, #12
 80023be:	2116      	movs	r1, #22
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fddf 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	22ef      	movs	r2, #239	@ 0xef
 80023ca:	2117      	movs	r1, #23
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fdd9 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	22c3      	movs	r2, #195	@ 0xc3
 80023d6:	2118      	movs	r1, #24
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fdd3 	bl	8000f84 <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2240      	movs	r2, #64	@ 0x40
 80023e2:	2119      	movs	r1, #25
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fdcd 	bl	8000f84 <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d175      	bne.n	80024dc <Powerstep01_SetRegisterToPredefinedValues+0x69c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80023f0:	ed1f 0ac1 	vldr	s0, [pc, #-772]	@ 80020f0 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 80023f4:	f000 fb88 	bl	8002b08 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80023f8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	210d      	movs	r1, #13
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fdbf 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 8002406:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800240a:	f000 fbaf 	bl	8002b6c <Powerstep01_KTherm_Comp_to_RegVal>
 800240e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002410:	461a      	mov	r2, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2111      	movs	r1, #17
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fdb4 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 800241c:	ed1f 0acb 	vldr	s0, [pc, #-812]	@ 80020f4 <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8002420:	f000 fc8c 	bl	8002d3c <Powerstep01_StallOcd_Th_to_RegVal>
 8002424:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002426:	461a      	mov	r2, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	2114      	movs	r1, #20
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fda9 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002432:	ed1f 0acf 	vldr	s0, [pc, #-828]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002436:	f000 fbd5 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 800243a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 800243c:	461a      	mov	r2, r3
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2109      	movs	r1, #9
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fd9e 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002448:	ed1f 0ad5 	vldr	s0, [pc, #-852]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 800244c:	f000 fbca 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8002450:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	210a      	movs	r1, #10
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fd93 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800245e:	ed1f 0ada 	vldr	s0, [pc, #-872]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002462:	f000 fbbf 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8002466:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002468:	461a      	mov	r2, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	210b      	movs	r1, #11
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fd88 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002474:	ed1f 0ae0 	vldr	s0, [pc, #-896]	@ 80020f8 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002478:	f000 fbb4 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 800247c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 800247e:	461a      	mov	r2, r3
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	210c      	movs	r1, #12
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fd7d 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800248a:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8002584 <Powerstep01_SetRegisterToPredefinedValues+0x744>
 800248e:	f000 fad3 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002492:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	210e      	movs	r1, #14
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fd72 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80024a0:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8002588 <Powerstep01_SetRegisterToPredefinedValues+0x748>
 80024a4:	f000 fac8 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80024a8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80024aa:	461a      	mov	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	210f      	movs	r1, #15
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fd67 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80024b6:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8002588 <Powerstep01_SetRegisterToPredefinedValues+0x748>
 80024ba:	f000 fabd 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80024be:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 80024c0:	461a      	mov	r2, r3
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2110      	movs	r1, #16
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd5c 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f642 6208 	movw	r2, #11784	@ 0x2e08
 80024d2:	211a      	movs	r1, #26
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fd55 	bl	8000f84 <Powerstep01_CmdSetParam>
      break;
 80024da:	e04e      	b.n	800257a <Powerstep01_SetRegisterToPredefinedValues+0x73a>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80024dc:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800258c <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 80024e0:	f000 fc68 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80024e4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 80024e6:	461a      	mov	r2, r3
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2109      	movs	r1, #9
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fd49 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80024f2:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800258c <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 80024f6:	f000 fc5d 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80024fa:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80024fc:	461a      	mov	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	210a      	movs	r1, #10
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fd3e 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002508:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 800258c <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 800250c:	f000 fc52 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002510:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002512:	461a      	mov	r2, r3
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	210b      	movs	r1, #11
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fd33 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800251e:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800258c <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002522:	f000 fc47 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002526:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002528:	461a      	mov	r2, r3
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	210c      	movs	r1, #12
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fd28 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2235      	movs	r2, #53	@ 0x35
 8002538:	210e      	movs	r1, #14
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fd22 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002540:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002544:	f000 fc72 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 8002548:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 800254a:	461a      	mov	r2, r3
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	210f      	movs	r1, #15
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd17 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002556:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 800255a:	f000 fc67 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 800255e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002560:	461a      	mov	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2110      	movs	r1, #16
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fd0c 	bl	8000f84 <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002572:	211a      	movs	r1, #26
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fd05 	bl	8000f84 <Powerstep01_CmdSetParam>
      break;
 800257a:	bf00      	nop
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	3d1c432d 	.word	0x3d1c432d
 8002588:	3d801f75 	.word	0x3d801f75
 800258c:	43a40f5c 	.word	0x43a40f5c

08002590 <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2200      	movs	r2, #0
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fcee 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fce8 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2103      	movs	r1, #3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fce2 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	f000 fa03 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80025ce:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2105      	movs	r1, #5
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fcd4 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	edd3 7a02 	vldr	s15, [r3, #8]
 80025e2:	eeb0 0a67 	vmov.f32	s0, s15
 80025e6:	f000 f9f5 	bl	80029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80025ea:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 80025ec:	461a      	mov	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2106      	movs	r1, #6
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fcc6 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	f000 fb21 	bl	8002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002606:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002608:	461a      	mov	r2, r3
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2107      	movs	r1, #7
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fcb8 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	edd3 7a04 	vldr	s15, [r3, #16]
 800261e:	eeb0 0a67 	vmov.f32	s0, s15
 8002622:	f000 fb11 	bl	8002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002626:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002628:	4323      	orrs	r3, r4
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	2108      	movs	r1, #8
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fca6 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	f000 fa2b 	bl	8002aa0 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 800264a:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 800264c:	4323      	orrs	r3, r4
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2115      	movs	r1, #21
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fc94 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002662:	eeb0 0a67 	vmov.f32	s0, s15
 8002666:	f000 fb69 	bl	8002d3c <Powerstep01_StallOcd_Th_to_RegVal>
 800266a:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2113      	movs	r1, #19
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fc86 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002682:	4313      	orrs	r3, r2
 8002684:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 800268c:	4313      	orrs	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2116      	movs	r1, #22
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc74 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80026a2:	461a      	mov	r2, r3
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2117      	movs	r1, #23
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fc6b 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 80026c4:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 80026ca:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2118      	movs	r1, #24
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fc56 	bl	8000f84 <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2119      	movs	r1, #25
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fc48 	bl	8000f84 <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 80b6 	bne.w	800286a <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	f000 f9fe 	bl	8002b08 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 800270c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	210d      	movs	r1, #13
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fc35 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002720:	eeb0 0a67 	vmov.f32	s0, s15
 8002724:	f000 fa22 	bl	8002b6c <Powerstep01_KTherm_Comp_to_RegVal>
 8002728:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 800272a:	461a      	mov	r2, r3
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2111      	movs	r1, #17
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fc27 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800273c:	eeb0 0a67 	vmov.f32	s0, s15
 8002740:	f000 fafc 	bl	8002d3c <Powerstep01_StallOcd_Th_to_RegVal>
 8002744:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002746:	461a      	mov	r2, r3
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	2114      	movs	r1, #20
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fc19 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002758:	eeb0 0a67 	vmov.f32	s0, s15
 800275c:	f000 fa42 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8002760:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002762:	461a      	mov	r2, r3
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	2109      	movs	r1, #9
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fc0b 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	f000 fa34 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 800277c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 800277e:	461a      	mov	r2, r3
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	210a      	movs	r1, #10
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fbfd 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002790:	eeb0 0a67 	vmov.f32	s0, s15
 8002794:	f000 fa26 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 8002798:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 800279a:	461a      	mov	r2, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	210b      	movs	r1, #11
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fbef 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80027ac:	eeb0 0a67 	vmov.f32	s0, s15
 80027b0:	f000 fa18 	bl	8002be4 <Powerstep01_Kval_Perc_to_RegVal>
 80027b4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 80027b6:	461a      	mov	r2, r3
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	210c      	movs	r1, #12
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fbe1 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80027c8:	eeb0 0a67 	vmov.f32	s0, s15
 80027cc:	f000 f934 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80027d0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 80027d2:	461a      	mov	r2, r3
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	210e      	movs	r1, #14
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fbd3 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	f000 f926 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80027ec:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 80027ee:	461a      	mov	r2, r3
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	210f      	movs	r1, #15
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fbc5 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002800:	eeb0 0a67 	vmov.f32	s0, s15
 8002804:	f000 f918 	bl	8002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002808:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 800280a:	461a      	mov	r2, r3
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2110      	movs	r1, #16
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fbb7 	bl	8000f84 <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 8002822:	4313      	orrs	r3, r2
 8002824:	b2da      	uxtb	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800282c:	4313      	orrs	r3, r2
 800282e:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 8002836:	4313      	orrs	r3, r2
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 8002842:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 800284a:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 8002852:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 800285a:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 800285c:	461a      	mov	r2, r3
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	211a      	movs	r1, #26
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb8e 	bl	8000f84 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 8002868:	e08a      	b.n	8002980 <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	f000 fa9e 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002878:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 800287a:	461a      	mov	r2, r3
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2109      	movs	r1, #9
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fb7f 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800288c:	eeb0 0a67 	vmov.f32	s0, s15
 8002890:	f000 fa90 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002894:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002896:	461a      	mov	r2, r3
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	210a      	movs	r1, #10
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fb71 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80028a8:	eeb0 0a67 	vmov.f32	s0, s15
 80028ac:	f000 fa82 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028b0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80028b2:	461a      	mov	r2, r3
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	210b      	movs	r1, #11
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fb63 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80028c4:	eeb0 0a67 	vmov.f32	s0, s15
 80028c8:	f000 fa74 	bl	8002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028cc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	210c      	movs	r1, #12
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fb55 	bl	8000f84 <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	210e      	movs	r1, #14
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fb47 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80028fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002900:	f000 fa94 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 8002904:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002906:	461a      	mov	r2, r3
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	210f      	movs	r1, #15
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fb39 	bl	8000f84 <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002918:	eeb0 0a67 	vmov.f32	s0, s15
 800291c:	f000 fa86 	bl	8002e2c <Powerstep01_Tmin_Time_to_RegVal>
 8002920:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002922:	461a      	mov	r2, r3
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2110      	movs	r1, #16
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fb2b 	bl	8000f84 <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 800293a:	4313      	orrs	r3, r2
 800293c:	b2da      	uxtb	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002944:	4313      	orrs	r3, r2
 8002946:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 800294e:	4313      	orrs	r3, r2
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 800295a:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 8002962:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 800296a:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 8002972:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002974:	461a      	mov	r2, r3
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	211a      	movs	r1, #26
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fb02 	bl	8000f84 <Powerstep01_CmdSetParam>
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <Powerstep01_WriteBytes+0x40>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fd69 	bl	8003474 <Powerstep01_Board_SpiWriteBytes>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 80029a8:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80029ac:	f7ff f954 	bl	8001c58 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <Powerstep01_WriteBytes+0x44>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <Powerstep01_WriteBytes+0x48>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
  }
}                     
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000284 	.word	0x20000284
 80029cc:	200002a1 	.word	0x200002a1
 80029d0:	200002a0 	.word	0x200002a0

080029d4 <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 80029de:	edd7 7a01 	vldr	s15, [r7, #4]
 80029e2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a08 <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 80029e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80029ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f6:	ee17 3a90 	vmov	r3, s15
 80029fa:	b29b      	uxth	r3, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	3d8cbccc 	.word	0x3d8cbccc

08002a0c <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002a34 <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 8002a22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a26:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	4168d4a5 	.word	0x4168d4a5

08002a38 <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 8002a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a46:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002a70 <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 8002a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5a:	edc7 7a00 	vstr	s15, [r7]
 8002a5e:	783b      	ldrb	r3, [r7, #0]
 8002a60:	b2db      	uxtb	r3, r3
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	441f6000 	.word	0x441f6000

08002a74 <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a86:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002a9c <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	3acd9a67 	.word	0x3acd9a67

08002aa0 <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 8002aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aae:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002acc <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aba:	ee17 3a90 	vmov	r3, s15
 8002abe:	b29b      	uxth	r3, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	3d8637bd 	.word	0x3d8637bd

08002ad0 <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002b00 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 8002ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002aea:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002b04 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 8002aee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	3f7fbe77 	.word	0x3f7fbe77
 8002b04:	41742400 	.word	0x41742400

08002b08 <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 8002b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b16:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002b3c <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 8002b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2a:	ee17 3a90 	vmov	r3, s15
 8002b2e:	b29b      	uxth	r3, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	418637bd 	.word	0x418637bd

08002b40 <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b68 <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	3d7423d9 	.word	0x3d7423d9

08002b6c <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 8002b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b82:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002bac <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 8002b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b96:	edc7 7a00 	vstr	s15, [r7]
 8002b9a:	783b      	ldrb	r3, [r7, #0]
 8002b9c:	b2db      	uxtb	r3, r3
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	42000000 	.word	0x42000000

08002bb0 <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002be0 <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 8002bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bce:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	3d000000 	.word	0x3d000000

08002be4 <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 8002bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bf2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002c1c <Powerstep01_Kval_Perc_to_RegVal+0x38>
 8002bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002bfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c06:	edc7 7a00 	vstr	s15, [r7]
 8002c0a:	783b      	ldrb	r3, [r7, #0]
 8002c0c:	b2db      	uxtb	r3, r3
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	4023d70a 	.word	0x4023d70a

08002c20 <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 8002c36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 8002c52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c56:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002c7c <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 8002c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6a:	ee17 3a90 	vmov	r3, s15
 8002c6e:	b29b      	uxth	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	3d8637bd 	.word	0x3d8637bd

08002c80 <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c92:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ca8 <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	41742400 	.word	0x41742400

08002cac <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 8002cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cba:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ce0 <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 8002cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cce:	ee17 3a90 	vmov	r3, s15
 8002cd2:	b29b      	uxth	r3, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	408637bd 	.word	0x408637bd

08002ce4 <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002d0c <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 8002cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	3e742400 	.word	0x3e742400

08002d10 <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d22:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002d38 <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 8002d26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	3c742400 	.word	0x3c742400

08002d3c <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 8002d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002d7c <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 8002d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d52:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002d80 <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 8002d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d66:	edc7 7a00 	vstr	s15, [r7]
 8002d6a:	783b      	ldrb	r3, [r7, #0]
 8002d6c:	b2db      	uxtb	r3, r3
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	41fa0000 	.word	0x41fa0000
 8002d80:	3d03126f 	.word	0x3d03126f

08002d84 <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d98:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002db0 <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 8002d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002da0:	eeb0 0a67 	vmov.f32	s0, s15
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	41fa0000 	.word	0x41fa0000

08002db4 <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 8002dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002df4 <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 8002dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002df8 <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dde:	edc7 7a00 	vstr	s15, [r7]
 8002de2:	783b      	ldrb	r3, [r7, #0]
 8002de4:	b2db      	uxtb	r3, r3
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40fa0000 	.word	0x40fa0000
 8002df8:	3e03126f 	.word	0x3e03126f

08002dfc <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3301      	adds	r3, #1
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e10:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002e28 <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 8002e14:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e18:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40fa0000 	.word	0x40fa0000

08002e2c <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 8002e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e52:	edc7 7a00 	vstr	s15, [r7]
 8002e56:	783b      	ldrb	r3, [r7, #0]
 8002e58:	b2db      	uxtb	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3301      	adds	r3, #1
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e82:	eeb0 0a67 	vmov.f32	s0, s15
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_MspInit+0x4c>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <HAL_MspInit+0x4c>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_MspInit+0x4c>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ece:	2007      	movs	r0, #7
 8002ed0:	f000 fe7a 	bl	8003bc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <HAL_SPI_MspInit+0x84>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12b      	bne.n	8002f5a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <HAL_SPI_MspInit+0x88>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <HAL_SPI_MspInit+0x88>)
 8002f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f12:	4b15      	ldr	r3, [pc, #84]	@ (8002f68 <HAL_SPI_MspInit+0x88>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_SPI_MspInit+0x88>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a10      	ldr	r2, [pc, #64]	@ (8002f68 <HAL_SPI_MspInit+0x88>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <HAL_SPI_MspInit+0x88>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f3a:	23e0      	movs	r3, #224	@ 0xe0
 8002f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	4619      	mov	r1, r3
 8002f54:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <HAL_SPI_MspInit+0x8c>)
 8002f56:	f000 fe79 	bl	8003c4c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	@ 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40013000 	.word	0x40013000
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020000 	.word	0x40020000

08002f70 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb8 <HAL_TIM_PWM_MspInit+0x48>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d115      	bne.n	8002fae <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <HAL_TIM_PWM_MspInit+0x4c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002fbc <HAL_TIM_PWM_MspInit+0x4c>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <HAL_TIM_PWM_MspInit+0x4c>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	201d      	movs	r0, #29
 8002fa4:	f000 fe1b 	bl	8003bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fa8:	201d      	movs	r0, #29
 8002faa:	f000 fe34 	bl	8003c16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40023800 	.word	0x40023800

08002fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a12      	ldr	r2, [pc, #72]	@ (8003028 <HAL_TIM_MspPostInit+0x68>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d11d      	bne.n	800301e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_TIM_MspPostInit+0x6c>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a10      	ldr	r2, [pc, #64]	@ (800302c <HAL_TIM_MspPostInit+0x6c>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_TIM_MspPostInit+0x6c>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = STEP_CLOCK_Pin_Pin;
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800300e:	2302      	movs	r3, #2
 8003010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_CLOCK_Pin_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4619      	mov	r1, r3
 8003018:	4805      	ldr	r0, [pc, #20]	@ (8003030 <HAL_TIM_MspPostInit+0x70>)
 800301a:	f000 fe17 	bl	8003c4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800301e:	bf00      	nop
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40000400 	.word	0x40000400
 800302c:	40023800 	.word	0x40023800
 8003030:	40020800 	.word	0x40020800

08003034 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <HAL_UART_MspInit+0x84>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d12b      	bne.n	80030ae <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_UART_MspInit+0x88>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_UART_MspInit+0x88>)
 8003060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003064:	6413      	str	r3, [r2, #64]	@ 0x40
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_UART_MspInit+0x88>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <HAL_UART_MspInit+0x88>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a10      	ldr	r2, [pc, #64]	@ (80030bc <HAL_UART_MspInit+0x88>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <HAL_UART_MspInit+0x88>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800308e:	230c      	movs	r3, #12
 8003090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800309e:	2307      	movs	r3, #7
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <HAL_UART_MspInit+0x8c>)
 80030aa:	f000 fdcf 	bl	8003c4c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80030ae:	bf00      	nop
 80030b0:	3728      	adds	r7, #40	@ 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40004400 	.word	0x40004400
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020000 	.word	0x40020000

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <NMI_Handler+0x4>

080030cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <HardFault_Handler+0x4>

080030d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <MemManage_Handler+0x4>

080030dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e8:	bf00      	nop
 80030ea:	e7fd      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800311a:	f000 fc41 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}

08003122 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUSY_Pin_Pin);
 8003126:	2020      	movs	r0, #32
 8003128:	f000 ff56 	bl	8003fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}

08003130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003134:	4802      	ldr	r0, [pc, #8]	@ (8003140 <TIM3_IRQHandler+0x10>)
 8003136:	f002 fa8d 	bl	8005654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200001e4 	.word	0x200001e4

08003144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLAG_Pin_Pin);
 8003148:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800314c:	f000 ff44 	bl	8003fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}

08003154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <SystemInit+0x20>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	4a05      	ldr	r2, [pc, #20]	@ (8003174 <SystemInit+0x20>)
 8003160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fc2d 	bl	80039e0 <HAL_Delay>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003192:	b672      	cpsid	i
}
 8003194:	bf00      	nop
  __disable_irq();
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80031a4:	b662      	cpsie	i
}
 80031a6:	bf00      	nop
  __enable_irq();
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	@ 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8082 	bne.w	80032ca <Powerstep01_Board_GpioInit+0x116>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b42      	ldr	r3, [pc, #264]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	4a41      	ldr	r2, [pc, #260]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d6:	4b3f      	ldr	r3, [pc, #252]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	4a3a      	ldr	r2, [pc, #232]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f2:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a33      	ldr	r2, [pc, #204]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <Powerstep01_Board_GpioInit+0x120>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 800321a:	2320      	movs	r3, #32
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800321e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003224:	2301      	movs	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003228:	2301      	movs	r3, #1
 800322a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4829      	ldr	r0, [pc, #164]	@ (80032d8 <Powerstep01_Board_GpioInit+0x124>)
 8003234:	f000 fd0a 	bl	8003c4c <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2106      	movs	r1, #6
 800323c:	2017      	movs	r0, #23
 800323e:	f000 fcce 	bl	8003bde <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);    
 8003242:	2017      	movs	r0, #23
 8003244:	f000 fce7 	bl	8003c16 <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800324c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800324e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003254:	2301      	movs	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003258:	2301      	movs	r3, #1
 800325a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	481e      	ldr	r0, [pc, #120]	@ (80032dc <Powerstep01_Board_GpioInit+0x128>)
 8003264:	f000 fcf2 	bl	8003c4c <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2105      	movs	r1, #5
 800326c:	2028      	movs	r0, #40	@ 0x28
 800326e:	f000 fcb6 	bl	8003bde <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 8003272:	2028      	movs	r0, #40	@ 0x28
 8003274:	f000 fccf 	bl	8003c16 <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003278:	2340      	movs	r3, #64	@ 0x40
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327c:	2301      	movs	r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003284:	2301      	movs	r3, #1
 8003286:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4619      	mov	r1, r3
 800328e:	4812      	ldr	r0, [pc, #72]	@ (80032d8 <Powerstep01_Board_GpioInit+0x124>)
 8003290:	f000 fcdc 	bl	8003c4c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003294:	2201      	movs	r2, #1
 8003296:	2140      	movs	r1, #64	@ 0x40
 8003298:	480f      	ldr	r0, [pc, #60]	@ (80032d8 <Powerstep01_Board_GpioInit+0x124>)
 800329a:	f000 fe83 	bl	8003fa4 <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 800329e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032ac:	2301      	movs	r3, #1
 80032ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	4809      	ldr	r0, [pc, #36]	@ (80032dc <Powerstep01_Board_GpioInit+0x128>)
 80032b8:	f000 fcc8 	bl	8003c4c <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f88e 	bl	80033e0 <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7ff ff57 	bl	8003178 <Powerstep01_Board_Delay>
  }
}
 80032ca:	bf00      	nop
 80032cc:	3728      	adds	r7, #40	@ 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40020400 	.word	0x40020400
 80032dc:	40020000 	.word	0x40020000

080032e0 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	@ 0x38
 80032e4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 80032e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003358 <Powerstep01_Board_StepClockInit+0x78>)
 80032ea:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 80032ec:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 80032ee:	223f      	movs	r2, #63	@ 0x3f
 80032f0:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f2:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 80032f8:	4b16      	ldr	r3, [pc, #88]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 8003304:	4813      	ldr	r0, [pc, #76]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 8003306:	f001 ff81 	bl	800520c <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800330e:	607b      	str	r3, [r7, #4]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	4619      	mov	r1, r3
 8003314:	480f      	ldr	r0, [pc, #60]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 8003316:	f002 fb4f 	bl	80059b8 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331a:	2360      	movs	r3, #96	@ 0x60
 800331c:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	2204      	movs	r2, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4808      	ldr	r0, [pc, #32]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 8003334:	f002 fa7e 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4619      	mov	r1, r3
 8003346:	4803      	ldr	r0, [pc, #12]	@ (8003354 <Powerstep01_Board_StepClockInit+0x74>)
 8003348:	f002 ff46 	bl	80061d8 <HAL_TIMEx_MasterConfigSynchronization>
}
 800334c:	bf00      	nop
 800334e:	3738      	adds	r7, #56	@ 0x38
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	200002fc 	.word	0x200002fc
 8003358:	40000400 	.word	0x40000400

0800335c <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003366:	f000 ff75 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 800336a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	fbb3 f3f2 	udiv	r3, r3, r2
 8003378:	3b01      	subs	r3, #1
 800337a:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <Powerstep01_Board_StartStepClock+0x48>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003384:	4a07      	ldr	r2, [pc, #28]	@ (80033a4 <Powerstep01_Board_StartStepClock+0x48>)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <Powerstep01_Board_StartStepClock+0x48>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	0852      	lsrs	r2, r2, #1
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 8003394:	2104      	movs	r1, #4
 8003396:	4803      	ldr	r0, [pc, #12]	@ (80033a4 <Powerstep01_Board_StartStepClock+0x48>)
 8003398:	f001 ff88 	bl	80052ac <HAL_TIM_PWM_Start_IT>
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	200002fc 	.word	0x200002fc

080033a8 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80033ac:	2104      	movs	r1, #4
 80033ae:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <Powerstep01_Board_StopStepClock+0x10>)
 80033b0:	f002 f892 	bl	80054d8 <HAL_TIM_PWM_Stop_IT>
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200002fc 	.word	0x200002fc

080033bc <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET); 
 80033c6:	2201      	movs	r2, #1
 80033c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033cc:	4803      	ldr	r0, [pc, #12]	@ (80033dc <Powerstep01_Board_ReleaseReset+0x20>)
 80033ce:	f000 fde9 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40020000 	.word	0x40020000

080033e0 <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET); 
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033f0:	4803      	ldr	r0, [pc, #12]	@ (8003400 <Powerstep01_Board_Reset+0x20>)
 80033f2:	f000 fdd7 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40020000 	.word	0x40020000

08003404 <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800340a:	4b18      	ldr	r3, [pc, #96]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <Powerstep01_Board_SpiInit+0x6c>)
 800340e:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003410:	4b16      	ldr	r3, [pc, #88]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003412:	2220      	movs	r2, #32
 8003414:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003416:	4b15      	ldr	r3, [pc, #84]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 800341c:	4b13      	ldr	r3, [pc, #76]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 800341e:	2201      	movs	r2, #1
 8003420:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003424:	2202      	movs	r2, #2
 8003426:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003428:	4b10      	ldr	r3, [pc, #64]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 800342a:	2200      	movs	r2, #0
 800342c:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 800342e:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003430:	2207      	movs	r2, #7
 8003432:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003434:	4b0d      	ldr	r3, [pc, #52]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800343a:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003440:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003446:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 800344a:	2200      	movs	r2, #0
 800344c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800344e:	4b07      	ldr	r3, [pc, #28]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003450:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003454:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003456:	4805      	ldr	r0, [pc, #20]	@ (800346c <Powerstep01_Board_SpiInit+0x68>)
 8003458:	f001 fbca 	bl	8004bf0 <HAL_SPI_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8003460:	79fb      	ldrb	r3, [r7, #7]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200002a4 	.word	0x200002a4
 8003470:	40013000 	.word	0x40013000

08003474 <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8003482:	2200      	movs	r2, #0
 8003484:	2140      	movs	r1, #64	@ 0x40
 8003486:	4816      	ldr	r0, [pc, #88]	@ (80034e0 <Powerstep01_Board_SpiWriteBytes+0x6c>)
 8003488:	f000 fd8c 	bl	8003fa4 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e016      	b.n	80034c0 <Powerstep01_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8003492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2301      	movs	r3, #1
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	4811      	ldr	r0, [pc, #68]	@ (80034e4 <Powerstep01_Board_SpiWriteBytes+0x70>)
 80034a0:	f001 fc2f 	bl	8004d02 <HAL_SPI_TransmitReceive>
 80034a4:	4603      	mov	r3, r0
 80034a6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10d      	bne.n	80034ca <Powerstep01_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	3301      	adds	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3e4      	bcc.n	8003492 <Powerstep01_Board_SpiWriteBytes+0x1e>
 80034c8:	e000      	b.n	80034cc <Powerstep01_Board_SpiWriteBytes+0x58>
      break;
 80034ca:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80034cc:	2201      	movs	r2, #1
 80034ce:	2140      	movs	r1, #64	@ 0x40
 80034d0:	4803      	ldr	r0, [pc, #12]	@ (80034e0 <Powerstep01_Board_SpiWriteBytes+0x6c>)
 80034d2:	f000 fd67 	bl	8003fa4 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40020400 	.word	0x40020400
 80034e4:	200002a4 	.word	0x200002a4

080034e8 <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 80034ec:	2120      	movs	r1, #32
 80034ee:	4803      	ldr	r0, [pc, #12]	@ (80034fc <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 80034f0:	f000 fd40 	bl	8003f74 <HAL_GPIO_ReadPin>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40020400 	.word	0x40020400

08003500 <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8003504:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 800350a:	f000 fd33 	bl	8003f74 <HAL_GPIO_ReadPin>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40020000 	.word	0x40020000

08003518 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
 800351c:	2300      	movs	r3, #0
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
 800352c:	2300      	movs	r3, #0
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
 800353c:	2300      	movs	r3, #0
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
 800354c:	2300      	movs	r3, #0
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
 800355c:	2300      	movs	r3, #0
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
 800356c:	2300      	movs	r3, #0
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
 800357c:	2300      	movs	r3, #0
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <BSP_MotorControl_AttachErrorHandler+0x26>
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <BSP_MotorControl_AttachErrorHandler+0x38>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80035a2:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e004      	b.n	80035b8 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80035ae:	f640 0002 	movw	r0, #2050	@ 0x802
 80035b2:	f000 f843 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000344 	.word	0x20000344

080035c4 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <BSP_MotorControl_AttachFlagInterrupt+0x26>
 80035d4:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e004      	b.n	80035f4 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 80035ea:	f640 0003 	movw	r0, #2051	@ 0x803
 80035ee:	f000 f825 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }  
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000344 	.word	0x20000344

08003600 <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <BSP_MotorControl_AttachBusyInterrupt+0x26>
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
 8003624:	e004      	b.n	8003630 <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003626:	f640 0004 	movw	r0, #2052	@ 0x804
 800362a:	f000 f807 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }  
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000344 	.word	0x20000344

0800363c <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003646:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <BSP_MotorControl_ErrorHandler+0x38>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <BSP_MotorControl_ErrorHandler+0x2e>
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <BSP_MotorControl_ErrorHandler+0x38>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <BSP_MotorControl_ErrorHandler+0x38>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	4610      	mov	r0, r2
 8003666:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003668:	e000      	b.n	800366c <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 800366a:	e7fe      	b.n	800366a <BSP_MotorControl_ErrorHandler+0x2e>
}
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000344 	.word	0x20000344

08003678 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <BSP_MotorControl_Init+0x3c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <BSP_MotorControl_Init+0x2a>
 800368c:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <BSP_MotorControl_Init+0x3c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <BSP_MotorControl_Init+0x3c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	4798      	blx	r3
 80036a0:	e004      	b.n	80036ac <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 80036a2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036a6:	f7ff ffc9 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }  
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000344 	.word	0x20000344

080036b8 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 80036c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <BSP_MotorControl_CmdGetStatus+0x48>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00f      	beq.n	80036ee <BSP_MotorControl_CmdGetStatus+0x36>
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <BSP_MotorControl_CmdGetStatus+0x48>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 80036da:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <BSP_MotorControl_CmdGetStatus+0x48>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	79fa      	ldrb	r2, [r7, #7]
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
 80036e8:	4603      	mov	r3, r0
 80036ea:	81fb      	strh	r3, [r7, #14]
 80036ec:	e003      	b.n	80036f6 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80036ee:	f640 0022 	movw	r0, #2082	@ 0x822
 80036f2:	f7ff ffa3 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80036f6:	89fb      	ldrh	r3, [r7, #14]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000344 	.word	0x20000344

08003704 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <BSP_MotorControl_CheckBusyHw+0x2e>
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800372a:	4798      	blx	r3
 800372c:	4603      	mov	r3, r0
 800372e:	71fb      	strb	r3, [r7, #7]
 8003730:	e003      	b.n	800373a <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 8003732:	f640 002b 	movw	r0, #2091	@ 0x82b
 8003736:	f7ff ff81 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 800373a:	79fb      	ldrb	r3, [r7, #7]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000344 	.word	0x20000344

08003748 <BSP_MotorControl_CmdResetPos>:
 * @brief Issues Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdResetPos(uint8_t deviceId)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdResetPos != 0))
 8003752:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <BSP_MotorControl_CmdResetPos+0x40>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <BSP_MotorControl_CmdResetPos+0x2e>
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <BSP_MotorControl_CmdResetPos+0x40>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <BSP_MotorControl_CmdResetPos+0x2e>
  {
    motorDrvHandle->CmdResetPos(deviceId);
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <BSP_MotorControl_CmdResetPos+0x40>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800376e:	79fa      	ldrb	r2, [r7, #7]
 8003770:	4610      	mov	r0, r2
 8003772:	4798      	blx	r3
 8003774:	e004      	b.n	8003780 <BSP_MotorControl_CmdResetPos+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(49);
 8003776:	f640 0031 	movw	r0, #2097	@ 0x831
 800377a:	f7ff ff5f 	bl	800363c <BSP_MotorControl_ErrorHandler>
  }
}
 800377e:	bf00      	nop
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000344 	.word	0x20000344

0800378c <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	460a      	mov	r2, r1
 8003796:	80fb      	strh	r3, [r7, #6]
 8003798:	4613      	mov	r3, r2
 800379a:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 800379c:	4a40      	ldr	r2, [pc, #256]	@ (80038a0 <BSP_MotorControl_SetNbDevices+0x114>)
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	f641 124a 	movw	r2, #6474	@ 0x194a
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d105      	bne.n	80037bc <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80037b0:	f7ff feb2 	bl	8003518 <L6474_GetMotorHandle>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4a3b      	ldr	r2, [pc, #236]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e055      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80037c2:	f7fd fd6f 	bl	80012a4 <Powerstep01_GetMotorHandle>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4a36      	ldr	r2, [pc, #216]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e04c      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	f641 023e 	movw	r2, #6206	@ 0x183e
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d105      	bne.n	80037e4 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80037d8:	f7ff feb6 	bl	8003548 <L6206_GetMotorHandle>
 80037dc:	4603      	mov	r3, r0
 80037de:	4a31      	ldr	r2, [pc, #196]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e041      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 80037ea:	d105      	bne.n	80037f8 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80037ec:	f7ff feb4 	bl	8003558 <L6208_GetMotorHandle>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4a2c      	ldr	r2, [pc, #176]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e037      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	2bdc      	cmp	r3, #220	@ 0xdc
 80037fc:	d105      	bne.n	800380a <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 80037fe:	f7ff feb3 	bl	8003568 <Stspin220_GetMotorHandle>
 8003802:	4603      	mov	r3, r0
 8003804:	4a27      	ldr	r2, [pc, #156]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e02e      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	f641 1246 	movw	r2, #6470	@ 0x1946
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <BSP_MotorControl_SetNbDevices+0x92>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	f641 1248 	movw	r2, #6472	@ 0x1948
 800381a:	4293      	cmp	r3, r2
 800381c:	d105      	bne.n	800382a <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 800381e:	f7ff fe83 	bl	8003528 <l647x_GetMotorHandle>
 8003822:	4603      	mov	r3, r0
 8003824:	4a1f      	ldr	r2, [pc, #124]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e01e      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	f641 1250 	movw	r2, #6480	@ 0x1950
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <BSP_MotorControl_SetNbDevices+0xb2>
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	f641 1252 	movw	r2, #6482	@ 0x1952
 800383a:	4293      	cmp	r3, r2
 800383c:	d105      	bne.n	800384a <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 800383e:	f7ff fe7b 	bl	8003538 <l648x_GetMotorHandle>
 8003842:	4603      	mov	r3, r0
 8003844:	4a17      	ldr	r2, [pc, #92]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e00e      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	2bf0      	cmp	r3, #240	@ 0xf0
 800384e:	d002      	beq.n	8003856 <BSP_MotorControl_SetNbDevices+0xca>
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2bfa      	cmp	r3, #250	@ 0xfa
 8003854:	d105      	bne.n	8003862 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003856:	f7ff fe8f 	bl	8003578 <Stspin240_250_GetMotorHandle>
 800385a:	4603      	mov	r3, r0
 800385c:	4a11      	ldr	r2, [pc, #68]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e002      	b.n	8003868 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8003862:	4b10      	ldr	r3, [pc, #64]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8003868:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d011      	beq.n	8003894 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00b      	beq.n	8003894 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 800387c:	797b      	ldrb	r3, [r7, #5]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8003882:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <BSP_MotorControl_SetNbDevices+0x118>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800388a:	797a      	ldrb	r2, [r7, #5]
 800388c:	4610      	mov	r0, r2
 800388e:	4798      	blx	r3
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000348 	.word	0x20000348
 80038a4:	20000344 	.word	0x20000344

080038a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038ac:	f7ff fc52 	bl	8003154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038b0:	480c      	ldr	r0, [pc, #48]	@ (80038e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038b2:	490d      	ldr	r1, [pc, #52]	@ (80038e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038b4:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b8:	e002      	b.n	80038c0 <LoopCopyDataInit>

080038ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038be:	3304      	adds	r3, #4

080038c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038c4:	d3f9      	bcc.n	80038ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038c8:	4c0a      	ldr	r4, [pc, #40]	@ (80038f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038cc:	e001      	b.n	80038d2 <LoopFillZerobss>

080038ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038d0:	3204      	adds	r2, #4

080038d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038d4:	d3fb      	bcc.n	80038ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80038d6:	f002 ffdb 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038da:	f7fc fe29 	bl	8000530 <main>
  bx  lr    
 80038de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e8:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80038ec:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 80038f0:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80038f4:	20000350 	.word	0x20000350

080038f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f8:	e7fe      	b.n	80038f8 <ADC_IRQHandler>
	...

080038fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003900:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_Init+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0d      	ldr	r2, [pc, #52]	@ (800393c <HAL_Init+0x40>)
 8003906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800390a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_Init+0x40>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <HAL_Init+0x40>)
 8003912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003918:	4b08      	ldr	r3, [pc, #32]	@ (800393c <HAL_Init+0x40>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	@ (800393c <HAL_Init+0x40>)
 800391e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003924:	2003      	movs	r0, #3
 8003926:	f000 f94f 	bl	8003bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392a:	2000      	movs	r0, #0
 800392c:	f000 f808 	bl	8003940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003930:	f7ff faae 	bl	8002e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00

08003940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_InitTick+0x54>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_InitTick+0x58>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003956:	fbb3 f3f1 	udiv	r3, r3, r1
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f967 	bl	8003c32 <HAL_SYSTICK_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00e      	b.n	800398c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d80a      	bhi.n	800398a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003974:	2200      	movs	r2, #0
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	f000 f92f 	bl	8003bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003980:	4a06      	ldr	r2, [pc, #24]	@ (800399c <HAL_InitTick+0x5c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000164 	.word	0x20000164
 8003998:	2000016c 	.word	0x2000016c
 800399c:	20000168 	.word	0x20000168

080039a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a4:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <HAL_IncTick+0x20>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_IncTick+0x24>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	@ (80039c4 <HAL_IncTick+0x24>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	2000016c 	.word	0x2000016c
 80039c4:	2000034c 	.word	0x2000034c

080039c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <HAL_GetTick+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000034c 	.word	0x2000034c

080039e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff ffee 	bl	80039c8 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d005      	beq.n	8003a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <HAL_Delay+0x44>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a06:	bf00      	nop
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8f7      	bhi.n	8003a08 <HAL_Delay+0x28>
  {
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	2000016c 	.word	0x2000016c

08003a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <__NVIC_SetPriorityGrouping+0x44>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a5a:	4a04      	ldr	r2, [pc, #16]	@ (8003a6c <__NVIC_SetPriorityGrouping+0x44>)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	60d3      	str	r3, [r2, #12]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <__NVIC_GetPriorityGrouping+0x18>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0a1b      	lsrs	r3, r3, #8
 8003a7a:	f003 0307 	and.w	r3, r3, #7
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db0b      	blt.n	8003ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	4907      	ldr	r1, [pc, #28]	@ (8003ac4 <__NVIC_EnableIRQ+0x38>)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2001      	movs	r0, #1
 8003aae:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	e000e100 	.word	0xe000e100

08003ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	db0a      	blt.n	8003af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	490c      	ldr	r1, [pc, #48]	@ (8003b14 <__NVIC_SetPriority+0x4c>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	0112      	lsls	r2, r2, #4
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	440b      	add	r3, r1
 8003aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003af0:	e00a      	b.n	8003b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4908      	ldr	r1, [pc, #32]	@ (8003b18 <__NVIC_SetPriority+0x50>)
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	3b04      	subs	r3, #4
 8003b00:	0112      	lsls	r2, r2, #4
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	440b      	add	r3, r1
 8003b06:	761a      	strb	r2, [r3, #24]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000e100 	.word	0xe000e100
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	@ 0x24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f1c3 0307 	rsb	r3, r3, #7
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	bf28      	it	cs
 8003b3a:	2304      	movcs	r3, #4
 8003b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2b06      	cmp	r3, #6
 8003b44:	d902      	bls.n	8003b4c <NVIC_EncodePriority+0x30>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3b03      	subs	r3, #3
 8003b4a:	e000      	b.n	8003b4e <NVIC_EncodePriority+0x32>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	401a      	ands	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	43d9      	mvns	r1, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	4313      	orrs	r3, r2
         );
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3724      	adds	r7, #36	@ 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b94:	d301      	bcc.n	8003b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00f      	b.n	8003bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <SysTick_Config+0x40>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ba2:	210f      	movs	r1, #15
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	f7ff ff8e 	bl	8003ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <SysTick_Config+0x40>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bb2:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <SysTick_Config+0x40>)
 8003bb4:	2207      	movs	r2, #7
 8003bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	e000e010 	.word	0xe000e010

08003bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff29 	bl	8003a28 <__NVIC_SetPriorityGrouping>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	4603      	mov	r3, r0
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf0:	f7ff ff3e 	bl	8003a70 <__NVIC_GetPriorityGrouping>
 8003bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f7ff ff8e 	bl	8003b1c <NVIC_EncodePriority>
 8003c00:	4602      	mov	r2, r0
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff5d 	bl	8003ac8 <__NVIC_SetPriority>
}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff31 	bl	8003a8c <__NVIC_EnableIRQ>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ffa2 	bl	8003b84 <SysTick_Config>
 8003c40:	4603      	mov	r3, r0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e165      	b.n	8003f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c68:	2201      	movs	r2, #1
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	f040 8154 	bne.w	8003f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d005      	beq.n	8003c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d130      	bne.n	8003d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 0201 	and.w	r2, r3, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d017      	beq.n	8003d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d123      	bne.n	8003d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	08da      	lsrs	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3208      	adds	r2, #8
 8003d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	69b9      	ldr	r1, [r7, #24]
 8003d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80ae 	beq.w	8003f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f4c <HAL_GPIO_Init+0x300>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	4a5c      	ldr	r2, [pc, #368]	@ (8003f4c <HAL_GPIO_Init+0x300>)
 8003ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003de2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f4c <HAL_GPIO_Init+0x300>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dee:	4a58      	ldr	r2, [pc, #352]	@ (8003f50 <HAL_GPIO_Init+0x304>)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4f      	ldr	r2, [pc, #316]	@ (8003f54 <HAL_GPIO_Init+0x308>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d025      	beq.n	8003e66 <HAL_GPIO_Init+0x21a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f58 <HAL_GPIO_Init+0x30c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01f      	beq.n	8003e62 <HAL_GPIO_Init+0x216>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4d      	ldr	r2, [pc, #308]	@ (8003f5c <HAL_GPIO_Init+0x310>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d019      	beq.n	8003e5e <HAL_GPIO_Init+0x212>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003f60 <HAL_GPIO_Init+0x314>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_GPIO_Init+0x20e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4b      	ldr	r2, [pc, #300]	@ (8003f64 <HAL_GPIO_Init+0x318>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00d      	beq.n	8003e56 <HAL_GPIO_Init+0x20a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f68 <HAL_GPIO_Init+0x31c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <HAL_GPIO_Init+0x206>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a49      	ldr	r2, [pc, #292]	@ (8003f6c <HAL_GPIO_Init+0x320>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_GPIO_Init+0x202>
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e00c      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e4e:	2307      	movs	r3, #7
 8003e50:	e00a      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e52:	2305      	movs	r3, #5
 8003e54:	e008      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e006      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e004      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_GPIO_Init+0x21c>
 8003e66:	2300      	movs	r3, #0
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f002 0203 	and.w	r2, r2, #3
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	4093      	lsls	r3, r2
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e78:	4935      	ldr	r1, [pc, #212]	@ (8003f50 <HAL_GPIO_Init+0x304>)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e86:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eaa:	4a31      	ldr	r2, [pc, #196]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed4:	4a26      	ldr	r2, [pc, #152]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eda:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003efe:	4a1c      	ldr	r2, [pc, #112]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f04:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f28:	4a11      	ldr	r2, [pc, #68]	@ (8003f70 <HAL_GPIO_Init+0x324>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3301      	adds	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	f67f ae96 	bls.w	8003c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3724      	adds	r7, #36	@ 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40013800 	.word	0x40013800
 8003f54:	40020000 	.word	0x40020000
 8003f58:	40020400 	.word	0x40020400
 8003f5c:	40020800 	.word	0x40020800
 8003f60:	40020c00 	.word	0x40020c00
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40021400 	.word	0x40021400
 8003f6c:	40021800 	.word	0x40021800
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e001      	b.n	8003f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	041a      	lsls	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fe2:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fee:	4a05      	ldr	r2, [pc, #20]	@ (8004004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f806 	bl	8004008 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40013c00 	.word	0x40013c00

08004008 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0cc      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b68      	ldr	r3, [pc, #416]	@ (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d90c      	bls.n	800405c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b65      	ldr	r3, [pc, #404]	@ (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b63      	ldr	r3, [pc, #396]	@ (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004074:	4b59      	ldr	r3, [pc, #356]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a58      	ldr	r2, [pc, #352]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800407e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800408c:	4b53      	ldr	r3, [pc, #332]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a52      	ldr	r2, [pc, #328]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b50      	ldr	r3, [pc, #320]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	494d      	ldr	r1, [pc, #308]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d044      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b47      	ldr	r3, [pc, #284]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e07f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d003      	beq.n	80040de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040de:	4b3f      	ldr	r3, [pc, #252]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e067      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4934      	ldr	r1, [pc, #208]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7ff fc5a 	bl	80039c8 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7ff fc56 	bl	80039c8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e04f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b2b      	ldr	r3, [pc, #172]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b25      	ldr	r3, [pc, #148]	@ (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d20c      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b20      	ldr	r3, [pc, #128]	@ (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b19      	ldr	r3, [pc, #100]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4916      	ldr	r1, [pc, #88]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490e      	ldr	r1, [pc, #56]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041a6:	f000 f855 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	490a      	ldr	r1, [pc, #40]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	5ccb      	ldrb	r3, [r1, r3]
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	4a09      	ldr	r2, [pc, #36]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041c2:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fbba 	bl	8003940 <HAL_InitTick>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	080068f0 	.word	0x080068f0
 80041e4:	20000164 	.word	0x20000164
 80041e8:	20000168 	.word	0x20000168

080041ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000164 	.word	0x20000164

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004208:	f7ff fff0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0a9b      	lsrs	r3, r3, #10
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	08006900 	.word	0x08006900

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004230:	f7ff ffdc 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0b5b      	lsrs	r3, r3, #13
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	08006900 	.word	0x08006900

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b0ae      	sub	sp, #184	@ 0xb8
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800427a:	4bcb      	ldr	r3, [pc, #812]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b0c      	cmp	r3, #12
 8004284:	f200 8206 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x440>
 8004288:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <HAL_RCC_GetSysClockFreq+0x3c>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042c5 	.word	0x080042c5
 8004294:	08004695 	.word	0x08004695
 8004298:	08004695 	.word	0x08004695
 800429c:	08004695 	.word	0x08004695
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	08004695 	.word	0x08004695
 80042a8:	08004695 	.word	0x08004695
 80042ac:	08004695 	.word	0x08004695
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	08004695 	.word	0x08004695
 80042b8:	08004695 	.word	0x08004695
 80042bc:	08004695 	.word	0x08004695
 80042c0:	080044c5 	.word	0x080044c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4bb9      	ldr	r3, [pc, #740]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 80042c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042ca:	e1e7      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042cc:	4bb8      	ldr	r3, [pc, #736]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042d2:	e1e3      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4bb4      	ldr	r3, [pc, #720]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e0:	4bb1      	ldr	r3, [pc, #708]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d071      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ec:	4bae      	ldr	r3, [pc, #696]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	099b      	lsrs	r3, r3, #6
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80042fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004304:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800430e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	f04f 0000 	mov.w	r0, #0
 800431a:	f04f 0100 	mov.w	r1, #0
 800431e:	0159      	lsls	r1, r3, #5
 8004320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004324:	0150      	lsls	r0, r2, #5
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4621      	mov	r1, r4
 800432c:	1a51      	subs	r1, r2, r1
 800432e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004330:	4629      	mov	r1, r5
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	647b      	str	r3, [r7, #68]	@ 0x44
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004344:	4649      	mov	r1, r9
 8004346:	018b      	lsls	r3, r1, #6
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434e:	4641      	mov	r1, r8
 8004350:	018a      	lsls	r2, r1, #6
 8004352:	4641      	mov	r1, r8
 8004354:	1a51      	subs	r1, r2, r1
 8004356:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004358:	4649      	mov	r1, r9
 800435a:	eb63 0301 	sbc.w	r3, r3, r1
 800435e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800436c:	4649      	mov	r1, r9
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4641      	mov	r1, r8
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4641      	mov	r1, r8
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4622      	mov	r2, r4
 8004382:	189b      	adds	r3, r3, r2
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
 8004386:	462b      	mov	r3, r5
 8004388:	460a      	mov	r2, r1
 800438a:	eb42 0303 	adc.w	r3, r2, r3
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800439c:	4629      	mov	r1, r5
 800439e:	024b      	lsls	r3, r1, #9
 80043a0:	4621      	mov	r1, r4
 80043a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043a6:	4621      	mov	r1, r4
 80043a8:	024a      	lsls	r2, r1, #9
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043c0:	f7fb ff20 	bl	8000204 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043ce:	e067      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d0:	4b75      	ldr	r3, [pc, #468]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	099b      	lsrs	r3, r3, #6
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80043e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ea:	2300      	movs	r3, #0
 80043ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	f04f 0000 	mov.w	r0, #0
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	0159      	lsls	r1, r3, #5
 8004400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004404:	0150      	lsls	r0, r2, #5
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4621      	mov	r1, r4
 800440c:	1a51      	subs	r1, r2, r1
 800440e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004410:	4629      	mov	r1, r5
 8004412:	eb63 0301 	sbc.w	r3, r3, r1
 8004416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004424:	4649      	mov	r1, r9
 8004426:	018b      	lsls	r3, r1, #6
 8004428:	4641      	mov	r1, r8
 800442a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800442e:	4641      	mov	r1, r8
 8004430:	018a      	lsls	r2, r1, #6
 8004432:	4641      	mov	r1, r8
 8004434:	ebb2 0a01 	subs.w	sl, r2, r1
 8004438:	4649      	mov	r1, r9
 800443a:	eb63 0b01 	sbc.w	fp, r3, r1
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800444a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800444e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004452:	4692      	mov	sl, r2
 8004454:	469b      	mov	fp, r3
 8004456:	4623      	mov	r3, r4
 8004458:	eb1a 0303 	adds.w	r3, sl, r3
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	462b      	mov	r3, r5
 8004460:	eb4b 0303 	adc.w	r3, fp, r3
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004472:	4629      	mov	r1, r5
 8004474:	028b      	lsls	r3, r1, #10
 8004476:	4621      	mov	r1, r4
 8004478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800447c:	4621      	mov	r1, r4
 800447e:	028a      	lsls	r2, r1, #10
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004488:	2200      	movs	r2, #0
 800448a:	673b      	str	r3, [r7, #112]	@ 0x70
 800448c:	677a      	str	r2, [r7, #116]	@ 0x74
 800448e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004492:	f7fb feb7 	bl	8000204 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4613      	mov	r3, r2
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044a0:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	3301      	adds	r3, #1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80044b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044c2:	e0eb      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b38      	ldr	r3, [pc, #224]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d0:	4b35      	ldr	r3, [pc, #212]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d06b      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044dc:	4b32      	ldr	r3, [pc, #200]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	2200      	movs	r2, #0
 80044e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80044f0:	2300      	movs	r3, #0
 80044f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80044f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80044f8:	4622      	mov	r2, r4
 80044fa:	462b      	mov	r3, r5
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	0159      	lsls	r1, r3, #5
 8004506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450a:	0150      	lsls	r0, r2, #5
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4621      	mov	r1, r4
 8004512:	1a51      	subs	r1, r2, r1
 8004514:	61b9      	str	r1, [r7, #24]
 8004516:	4629      	mov	r1, r5
 8004518:	eb63 0301 	sbc.w	r3, r3, r1
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800452a:	4659      	mov	r1, fp
 800452c:	018b      	lsls	r3, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004534:	4651      	mov	r1, sl
 8004536:	018a      	lsls	r2, r1, #6
 8004538:	4651      	mov	r1, sl
 800453a:	ebb2 0801 	subs.w	r8, r2, r1
 800453e:	4659      	mov	r1, fp
 8004540:	eb63 0901 	sbc.w	r9, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004550:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004554:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004558:	4690      	mov	r8, r2
 800455a:	4699      	mov	r9, r3
 800455c:	4623      	mov	r3, r4
 800455e:	eb18 0303 	adds.w	r3, r8, r3
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	462b      	mov	r3, r5
 8004566:	eb49 0303 	adc.w	r3, r9, r3
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004578:	4629      	mov	r1, r5
 800457a:	024b      	lsls	r3, r1, #9
 800457c:	4621      	mov	r1, r4
 800457e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004582:	4621      	mov	r1, r4
 8004584:	024a      	lsls	r2, r1, #9
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800458e:	2200      	movs	r2, #0
 8004590:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004592:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004594:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004598:	f7fb fe34 	bl	8000204 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a6:	e065      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x420>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b4:	4b3d      	ldr	r3, [pc, #244]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x458>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	2200      	movs	r2, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	4611      	mov	r1, r2
 80045c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c6:	2300      	movs	r3, #0
 80045c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80045ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	0159      	lsls	r1, r3, #5
 80045dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e0:	0150      	lsls	r0, r2, #5
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4641      	mov	r1, r8
 80045e8:	1a51      	subs	r1, r2, r1
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	4649      	mov	r1, r9
 80045ee:	eb63 0301 	sbc.w	r3, r3, r1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004600:	4659      	mov	r1, fp
 8004602:	018b      	lsls	r3, r1, #6
 8004604:	4651      	mov	r1, sl
 8004606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800460a:	4651      	mov	r1, sl
 800460c:	018a      	lsls	r2, r1, #6
 800460e:	4651      	mov	r1, sl
 8004610:	1a54      	subs	r4, r2, r1
 8004612:	4659      	mov	r1, fp
 8004614:	eb63 0501 	sbc.w	r5, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	00eb      	lsls	r3, r5, #3
 8004622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004626:	00e2      	lsls	r2, r4, #3
 8004628:	4614      	mov	r4, r2
 800462a:	461d      	mov	r5, r3
 800462c:	4643      	mov	r3, r8
 800462e:	18e3      	adds	r3, r4, r3
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	464b      	mov	r3, r9
 8004634:	eb45 0303 	adc.w	r3, r5, r3
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004646:	4629      	mov	r1, r5
 8004648:	028b      	lsls	r3, r1, #10
 800464a:	4621      	mov	r1, r4
 800464c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004650:	4621      	mov	r1, r4
 8004652:	028a      	lsls	r2, r1, #10
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800465c:	2200      	movs	r2, #0
 800465e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004660:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004662:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004666:	f7fb fdcd 	bl	8000204 <__aeabi_uldivmod>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4613      	mov	r3, r2
 8004670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004674:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x458>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0f1b      	lsrs	r3, r3, #28
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004692:	e003      	b.n	800469c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800469a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	37b8      	adds	r7, #184	@ 0xb8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e28d      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8083 	beq.w	80047da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046d4:	4b94      	ldr	r3, [pc, #592]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d019      	beq.n	8004714 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046e0:	4b91      	ldr	r3, [pc, #580]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046f8:	d00c      	beq.n	8004714 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d112      	bne.n	800472c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b88      	ldr	r3, [pc, #544]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004712:	d10b      	bne.n	800472c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	4b84      	ldr	r3, [pc, #528]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d05b      	beq.n	80047d8 <HAL_RCC_OscConfig+0x124>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d157      	bne.n	80047d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e25a      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x90>
 8004736:	4b7c      	ldr	r3, [pc, #496]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7b      	ldr	r2, [pc, #492]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e01d      	b.n	8004780 <HAL_RCC_OscConfig+0xcc>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0xb4>
 800474e:	4b76      	ldr	r3, [pc, #472]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a75      	ldr	r2, [pc, #468]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b73      	ldr	r3, [pc, #460]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a72      	ldr	r2, [pc, #456]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0xcc>
 8004768:	4b6f      	ldr	r3, [pc, #444]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a6e      	ldr	r2, [pc, #440]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800476e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b6c      	ldr	r3, [pc, #432]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6b      	ldr	r2, [pc, #428]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7ff f91e 	bl	80039c8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7ff f91a 	bl	80039c8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	@ 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e21f      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b61      	ldr	r3, [pc, #388]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0xdc>
 80047ae:	e014      	b.n	80047da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7ff f90a 	bl	80039c8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7ff f906 	bl	80039c8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e20b      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ca:	4b57      	ldr	r3, [pc, #348]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x104>
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d06f      	beq.n	80048c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047e6:	4b50      	ldr	r3, [pc, #320]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d017      	beq.n	8004822 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d105      	bne.n	800480a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d11c      	bne.n	8004850 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b44      	ldr	r3, [pc, #272]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	4b41      	ldr	r3, [pc, #260]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCC_OscConfig+0x186>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1d3      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	4b3b      	ldr	r3, [pc, #236]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4937      	ldr	r1, [pc, #220]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	e03a      	b.n	80048c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	4b34      	ldr	r3, [pc, #208]	@ (800492c <HAL_RCC_OscConfig+0x278>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7ff f8b3 	bl	80039c8 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7ff f8af 	bl	80039c8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1b4      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4925      	ldr	r1, [pc, #148]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCC_OscConfig+0x278>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7ff f892 	bl	80039c8 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a8:	f7ff f88e 	bl	80039c8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e193      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d036      	beq.n	8004940 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <HAL_RCC_OscConfig+0x27c>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7ff f872 	bl	80039c8 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e8:	f7ff f86e 	bl	80039c8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e173      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_OscConfig+0x274>)
 80048fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x234>
 8004906:	e01b      	b.n	8004940 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004908:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_RCC_OscConfig+0x27c>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7ff f85b 	bl	80039c8 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	e00e      	b.n	8004934 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004916:	f7ff f857 	bl	80039c8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d907      	bls.n	8004934 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e15c      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
 8004928:	40023800 	.word	0x40023800
 800492c:	42470000 	.word	0x42470000
 8004930:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	4b8a      	ldr	r3, [pc, #552]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ea      	bne.n	8004916 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8097 	beq.w	8004a7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004952:	4b83      	ldr	r3, [pc, #524]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10f      	bne.n	800497e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	4b7f      	ldr	r3, [pc, #508]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	4a7e      	ldr	r2, [pc, #504]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496c:	6413      	str	r3, [r2, #64]	@ 0x40
 800496e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497e:	4b79      	ldr	r3, [pc, #484]	@ (8004b64 <HAL_RCC_OscConfig+0x4b0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d118      	bne.n	80049bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498a:	4b76      	ldr	r3, [pc, #472]	@ (8004b64 <HAL_RCC_OscConfig+0x4b0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a75      	ldr	r2, [pc, #468]	@ (8004b64 <HAL_RCC_OscConfig+0x4b0>)
 8004990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004996:	f7ff f817 	bl	80039c8 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7ff f813 	bl	80039c8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e118      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <HAL_RCC_OscConfig+0x4b0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x31e>
 80049c4:	4b66      	ldr	r3, [pc, #408]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	4a65      	ldr	r2, [pc, #404]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d0:	e01c      	b.n	8004a0c <HAL_RCC_OscConfig+0x358>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x340>
 80049da:	4b61      	ldr	r3, [pc, #388]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	4a60      	ldr	r2, [pc, #384]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	f043 0304 	orr.w	r3, r3, #4
 80049e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0x358>
 80049f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a59      	ldr	r2, [pc, #356]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a00:	4b57      	ldr	r3, [pc, #348]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a04:	4a56      	ldr	r2, [pc, #344]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	f023 0304 	bic.w	r3, r3, #4
 8004a0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d015      	beq.n	8004a40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fe ffd8 	bl	80039c8 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fe ffd4 	bl	80039c8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0d7      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a32:	4b4b      	ldr	r3, [pc, #300]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ee      	beq.n	8004a1c <HAL_RCC_OscConfig+0x368>
 8004a3e:	e014      	b.n	8004a6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fe ffc2 	bl	80039c8 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fe ffbe 	bl	80039c8 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0c1      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5e:	4b40      	ldr	r3, [pc, #256]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ee      	bne.n	8004a48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a70:	4b3b      	ldr	r3, [pc, #236]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	4a3a      	ldr	r2, [pc, #232]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80ad 	beq.w	8004be0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a86:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d060      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d145      	bne.n	8004b26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b33      	ldr	r3, [pc, #204]	@ (8004b68 <HAL_RCC_OscConfig+0x4b4>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fe ff92 	bl	80039c8 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fe ff8e 	bl	80039c8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e093      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	4b29      	ldr	r3, [pc, #164]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	491b      	ldr	r1, [pc, #108]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <HAL_RCC_OscConfig+0x4b4>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fe ff63 	bl	80039c8 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe ff5f 	bl	80039c8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e064      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x452>
 8004b24:	e05c      	b.n	8004be0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <HAL_RCC_OscConfig+0x4b4>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe ff4c 	bl	80039c8 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fe ff48 	bl	80039c8 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e04d      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <HAL_RCC_OscConfig+0x4ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x480>
 8004b52:	e045      	b.n	8004be0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e040      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40007000 	.word	0x40007000
 8004b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bec <HAL_RCC_OscConfig+0x538>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d030      	beq.n	8004bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d129      	bne.n	8004bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d122      	bne.n	8004bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d119      	bne.n	8004bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d10f      	bne.n	8004bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800

08004bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07b      	b.n	8004cfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c12:	d009      	beq.n	8004c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	61da      	str	r2, [r3, #28]
 8004c1a:	e005      	b.n	8004c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fe f94c 	bl	8002ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cac:	ea42 0103 	orr.w	r1, r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0104 	and.w	r1, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	f003 0210 	and.w	r2, r3, #16
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08a      	sub	sp, #40	@ 0x28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d10:	2301      	movs	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d14:	f7fe fe58 	bl	80039c8 <HAL_GetTick>
 8004d18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d2c:	7ffb      	ldrb	r3, [r7, #31]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d00c      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x4a>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d38:	d106      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x46>
 8004d42:	7ffb      	ldrb	r3, [r7, #31]
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d001      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e17f      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x5c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x5c>
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e174      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x6e>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e16d      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d003      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2205      	movs	r2, #5
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	887a      	ldrh	r2, [r7, #2]
 8004da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	887a      	ldrh	r2, [r7, #2]
 8004dae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d007      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de8:	d17e      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0xf6>
 8004df2:	8afb      	ldrh	r3, [r7, #22]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d16c      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	1c9a      	adds	r2, r3, #2
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1c:	e059      	b.n	8004ed2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d11b      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x162>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x162>
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d113      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	881a      	ldrh	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	1c9a      	adds	r2, r3, #2
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d119      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x1a4>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d014      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	b292      	uxth	r2, r2
 8004e88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ea6:	f7fe fd8f 	bl	80039c8 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d80d      	bhi.n	8004ed2 <HAL_SPI_TransmitReceive+0x1d0>
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d009      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0bc      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1a0      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x11c>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d19b      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x11c>
 8004ee6:	e082      	b.n	8004fee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x1f4>
 8004ef0:	8afb      	ldrh	r3, [r7, #22]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d171      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1c:	e05d      	b.n	8004fda <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d11c      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x264>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d017      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x264>
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d114      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d119      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x2a6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d014      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fa8:	f7fe fd0e 	bl	80039c8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d803      	bhi.n	8004fc0 <HAL_SPI_TransmitReceive+0x2be>
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d102      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x2c4>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e038      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d19c      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x21c>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d197      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fee:	6a3a      	ldr	r2, [r7, #32]
 8004ff0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f8b6 	bl	8005164 <SPI_EndRxTxTransaction>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e01d      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800504a:	2300      	movs	r3, #0
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3728      	adds	r7, #40	@ 0x28
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005064:	f7fe fcb0 	bl	80039c8 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005074:	f7fe fca8 	bl	80039c8 <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508a:	e055      	b.n	8005138 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d051      	beq.n	8005138 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005094:	f7fe fc98 	bl	80039c8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d902      	bls.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d13d      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c2:	d111      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d004      	beq.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d107      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f0:	d10f      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e018      	b.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e002      	b.n	8005138 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3b01      	subs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	429a      	cmp	r2, r3
 8005154:	d19a      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000164 	.word	0x20000164

08005164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2201      	movs	r2, #1
 8005178:	2102      	movs	r1, #2
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff6a 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e032      	b.n	80051fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005196:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <SPI_EndRxTxTransaction+0xa0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <SPI_EndRxTxTransaction+0xa4>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	0d5b      	lsrs	r3, r3, #21
 80051a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b4:	d112      	bne.n	80051dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ff47 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d016      	beq.n	80051fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e00f      	b.n	80051fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f2:	2b80      	cmp	r3, #128	@ 0x80
 80051f4:	d0f2      	beq.n	80051dc <SPI_EndRxTxTransaction+0x78>
 80051f6:	e000      	b.n	80051fa <SPI_EndRxTxTransaction+0x96>
        break;
 80051f8:	bf00      	nop
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000164 	.word	0x20000164
 8005208:	165e9f81 	.word	0x165e9f81

0800520c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e041      	b.n	80052a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fd fe9c 	bl	8002f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 fcae 	bl	8005bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_TIM_PWM_Start_IT+0x28>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e022      	b.n	800531a <HAL_TIM_PWM_Start_IT+0x6e>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d109      	bne.n	80052ee <HAL_TIM_PWM_Start_IT+0x42>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e015      	b.n	800531a <HAL_TIM_PWM_Start_IT+0x6e>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d109      	bne.n	8005308 <HAL_TIM_PWM_Start_IT+0x5c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e008      	b.n	800531a <HAL_TIM_PWM_Start_IT+0x6e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e0c7      	b.n	80054b2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start_IT+0x86>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005330:	e013      	b.n	800535a <HAL_TIM_PWM_Start_IT+0xae>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start_IT+0x96>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005340:	e00b      	b.n	800535a <HAL_TIM_PWM_Start_IT+0xae>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start_IT+0xa6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005350:	e003      	b.n	800535a <HAL_TIM_PWM_Start_IT+0xae>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d841      	bhi.n	80053e4 <HAL_TIM_PWM_Start_IT+0x138>
 8005360:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	0800539d 	.word	0x0800539d
 800536c:	080053e5 	.word	0x080053e5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	080053e5 	.word	0x080053e5
 8005378:	080053af 	.word	0x080053af
 800537c:	080053e5 	.word	0x080053e5
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080053e5 	.word	0x080053e5
 8005388:	080053c1 	.word	0x080053c1
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053d3 	.word	0x080053d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0202 	orr.w	r2, r2, #2
 80053aa:	60da      	str	r2, [r3, #12]
      break;
 80053ac:	e01d      	b.n	80053ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0204 	orr.w	r2, r2, #4
 80053bc:	60da      	str	r2, [r3, #12]
      break;
 80053be:	e014      	b.n	80053ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0208 	orr.w	r2, r2, #8
 80053ce:	60da      	str	r2, [r3, #12]
      break;
 80053d0:	e00b      	b.n	80053ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0210 	orr.w	r2, r2, #16
 80053e0:	60da      	str	r2, [r3, #12]
      break;
 80053e2:	e002      	b.n	80053ea <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
      break;
 80053e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d15f      	bne.n	80054b0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fec7 	bl	800618c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2e      	ldr	r2, [pc, #184]	@ (80054bc <HAL_TIM_PWM_Start_IT+0x210>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIM_PWM_Start_IT+0x166>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <HAL_TIM_PWM_Start_IT+0x214>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_Start_IT+0x16a>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <HAL_TIM_PWM_Start_IT+0x16c>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	@ (80054bc <HAL_TIM_PWM_Start_IT+0x210>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543e:	d01d      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <HAL_TIM_PWM_Start_IT+0x218>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1c      	ldr	r2, [pc, #112]	@ (80054cc <HAL_TIM_PWM_Start_IT+0x220>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <HAL_TIM_PWM_Start_IT+0x214>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <HAL_TIM_PWM_Start_IT+0x224>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIM_PWM_Start_IT+0x1d0>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a17      	ldr	r2, [pc, #92]	@ (80054d4 <HAL_TIM_PWM_Start_IT+0x228>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d111      	bne.n	80054a0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d010      	beq.n	80054b0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	e007      	b.n	80054b0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40001800 	.word	0x40001800

080054d8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d841      	bhi.n	8005570 <HAL_TIM_PWM_Stop_IT+0x98>
 80054ec:	a201      	add	r2, pc, #4	@ (adr r2, 80054f4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005529 	.word	0x08005529
 80054f8:	08005571 	.word	0x08005571
 80054fc:	08005571 	.word	0x08005571
 8005500:	08005571 	.word	0x08005571
 8005504:	0800553b 	.word	0x0800553b
 8005508:	08005571 	.word	0x08005571
 800550c:	08005571 	.word	0x08005571
 8005510:	08005571 	.word	0x08005571
 8005514:	0800554d 	.word	0x0800554d
 8005518:	08005571 	.word	0x08005571
 800551c:	08005571 	.word	0x08005571
 8005520:	08005571 	.word	0x08005571
 8005524:	0800555f 	.word	0x0800555f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0202 	bic.w	r2, r2, #2
 8005536:	60da      	str	r2, [r3, #12]
      break;
 8005538:	e01d      	b.n	8005576 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0204 	bic.w	r2, r2, #4
 8005548:	60da      	str	r2, [r3, #12]
      break;
 800554a:	e014      	b.n	8005576 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0208 	bic.w	r2, r2, #8
 800555a:	60da      	str	r2, [r3, #12]
      break;
 800555c:	e00b      	b.n	8005576 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0210 	bic.w	r2, r2, #16
 800556c:	60da      	str	r2, [r3, #12]
      break;
 800556e:	e002      	b.n	8005576 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
      break;
 8005574:	bf00      	nop
  }

  if (status == HAL_OK)
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d161      	bne.n	8005640 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fe01 	bl	800618c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <HAL_TIM_PWM_Stop_IT+0x174>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIM_PWM_Stop_IT+0xc6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2d      	ldr	r2, [pc, #180]	@ (8005650 <HAL_TIM_PWM_Stop_IT+0x178>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_PWM_Stop_IT+0xca>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d017      	beq.n	80055d8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10f      	bne.n	80055d8 <HAL_TIM_PWM_Stop_IT+0x100>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	f240 4344 	movw	r3, #1092	@ 0x444
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_PWM_Stop_IT+0x100>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10f      	bne.n	8005608 <HAL_TIM_PWM_Stop_IT+0x130>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d107      	bne.n	8005608 <HAL_TIM_PWM_Stop_IT+0x130>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <HAL_TIM_PWM_Stop_IT+0x140>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005616:	e013      	b.n	8005640 <HAL_TIM_PWM_Stop_IT+0x168>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d104      	bne.n	8005628 <HAL_TIM_PWM_Stop_IT+0x150>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005626:	e00b      	b.n	8005640 <HAL_TIM_PWM_Stop_IT+0x168>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b08      	cmp	r3, #8
 800562c:	d104      	bne.n	8005638 <HAL_TIM_PWM_Stop_IT+0x160>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005636:	e003      	b.n	8005640 <HAL_TIM_PWM_Stop_IT+0x168>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400

08005654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d020      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0202 	mvn.w	r2, #2
 8005688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa65 	bl	8005b6e <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa57 	bl	8005b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa68 	bl	8005b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d020      	beq.n	8005704 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01b      	beq.n	8005704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0204 	mvn.w	r2, #4
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa3f 	bl	8005b6e <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa31 	bl	8005b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa42 	bl	8005b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d020      	beq.n	8005750 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01b      	beq.n	8005750 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0208 	mvn.w	r2, #8
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2204      	movs	r2, #4
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa19 	bl	8005b6e <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa0b 	bl	8005b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa1c 	bl	8005b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d020      	beq.n	800579c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01b      	beq.n	800579c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0210 	mvn.w	r2, #16
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2208      	movs	r2, #8
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f9f3 	bl	8005b6e <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f9e5 	bl	8005b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f9f6 	bl	8005b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0201 	mvn.w	r2, #1
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9c3 	bl	8005b46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fd80 	bl	80062e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9c7 	bl	8005b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0220 	mvn.w	r2, #32
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fd52 	bl	80062d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800584e:	2302      	movs	r3, #2
 8005850:	e0ae      	b.n	80059b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b0c      	cmp	r3, #12
 800585e:	f200 809f 	bhi.w	80059a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005862:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	0800589d 	.word	0x0800589d
 800586c:	080059a1 	.word	0x080059a1
 8005870:	080059a1 	.word	0x080059a1
 8005874:	080059a1 	.word	0x080059a1
 8005878:	080058dd 	.word	0x080058dd
 800587c:	080059a1 	.word	0x080059a1
 8005880:	080059a1 	.word	0x080059a1
 8005884:	080059a1 	.word	0x080059a1
 8005888:	0800591f 	.word	0x0800591f
 800588c:	080059a1 	.word	0x080059a1
 8005890:	080059a1 	.word	0x080059a1
 8005894:	080059a1 	.word	0x080059a1
 8005898:	0800595f 	.word	0x0800595f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fa28 	bl	8005cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0208 	orr.w	r2, r2, #8
 80058b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0204 	bic.w	r2, r2, #4
 80058c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	619a      	str	r2, [r3, #24]
      break;
 80058da:	e064      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fa78 	bl	8005dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6999      	ldr	r1, [r3, #24]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	619a      	str	r2, [r3, #24]
      break;
 800591c:	e043      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 facd 	bl	8005ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0208 	orr.w	r2, r2, #8
 8005938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0204 	bic.w	r2, r2, #4
 8005948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69d9      	ldr	r1, [r3, #28]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	61da      	str	r2, [r3, #28]
      break;
 800595c:	e023      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fb21 	bl	8005fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69d9      	ldr	r1, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	021a      	lsls	r2, r3, #8
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	61da      	str	r2, [r3, #28]
      break;
 800599e:	e002      	b.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
      break;
 80059a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_ConfigClockSource+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e0b4      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x186>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a0c:	d03e      	beq.n	8005a8c <HAL_TIM_ConfigClockSource+0xd4>
 8005a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a12:	f200 8087 	bhi.w	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a1a:	f000 8086 	beq.w	8005b2a <HAL_TIM_ConfigClockSource+0x172>
 8005a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a22:	d87f      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b70      	cmp	r3, #112	@ 0x70
 8005a26:	d01a      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0xa6>
 8005a28:	2b70      	cmp	r3, #112	@ 0x70
 8005a2a:	d87b      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b60      	cmp	r3, #96	@ 0x60
 8005a2e:	d050      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a30:	2b60      	cmp	r3, #96	@ 0x60
 8005a32:	d877      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b50      	cmp	r3, #80	@ 0x50
 8005a36:	d03c      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8005a38:	2b50      	cmp	r3, #80	@ 0x50
 8005a3a:	d873      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b40      	cmp	r3, #64	@ 0x40
 8005a3e:	d058      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	d86f      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b30      	cmp	r3, #48	@ 0x30
 8005a46:	d064      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	2b30      	cmp	r3, #48	@ 0x30
 8005a4a:	d86b      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d060      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d867      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d05c      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d05a      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a5c:	e062      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a6e:	f000 fb6d 	bl	800614c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	609a      	str	r2, [r3, #8]
      break;
 8005a8a:	e04f      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a9c:	f000 fb56 	bl	800614c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aae:	609a      	str	r2, [r3, #8]
      break;
 8005ab0:	e03c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 faca 	bl	8006058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2150      	movs	r1, #80	@ 0x50
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fb23 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e02c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f000 fae9 	bl	80060b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2160      	movs	r1, #96	@ 0x60
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fb13 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 8005af0:	e01c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afe:	461a      	mov	r2, r3
 8005b00:	f000 faaa 	bl	8006058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2140      	movs	r1, #64	@ 0x40
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fb03 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 8005b10:	e00c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f000 fafa 	bl	8006116 <TIM_ITRx_SetConfig>
      break;
 8005b22:	e003      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e000      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a43      	ldr	r2, [pc, #268]	@ (8005ccc <TIM_Base_SetConfig+0x120>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bca:	d00f      	beq.n	8005bec <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a40      	ldr	r2, [pc, #256]	@ (8005cd0 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd4 <TIM_Base_SetConfig+0x128>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d007      	beq.n	8005bec <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd8 <TIM_Base_SetConfig+0x12c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3d      	ldr	r2, [pc, #244]	@ (8005cdc <TIM_Base_SetConfig+0x130>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d108      	bne.n	8005bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a32      	ldr	r2, [pc, #200]	@ (8005ccc <TIM_Base_SetConfig+0x120>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d02b      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0c:	d027      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a2f      	ldr	r2, [pc, #188]	@ (8005cd0 <TIM_Base_SetConfig+0x124>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d023      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd4 <TIM_Base_SetConfig+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01f      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd8 <TIM_Base_SetConfig+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01b      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2c      	ldr	r2, [pc, #176]	@ (8005cdc <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d017      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce0 <TIM_Base_SetConfig+0x134>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce4 <TIM_Base_SetConfig+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a29      	ldr	r2, [pc, #164]	@ (8005ce8 <TIM_Base_SetConfig+0x13c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a28      	ldr	r2, [pc, #160]	@ (8005cec <TIM_Base_SetConfig+0x140>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a27      	ldr	r2, [pc, #156]	@ (8005cf0 <TIM_Base_SetConfig+0x144>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a26      	ldr	r2, [pc, #152]	@ (8005cf4 <TIM_Base_SetConfig+0x148>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a0e      	ldr	r2, [pc, #56]	@ (8005ccc <TIM_Base_SetConfig+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_Base_SetConfig+0xf2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a10      	ldr	r2, [pc, #64]	@ (8005cdc <TIM_Base_SetConfig+0x130>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d103      	bne.n	8005ca6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	601a      	str	r2, [r3, #0]
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40010400 	.word	0x40010400
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	40014800 	.word	0x40014800
 8005cec:	40001800 	.word	0x40001800
 8005cf0:	40001c00 	.word	0x40001c00
 8005cf4:	40002000 	.word	0x40002000

08005cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f023 0201 	bic.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 0302 	bic.w	r3, r3, #2
 8005d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a20      	ldr	r2, [pc, #128]	@ (8005dd0 <TIM_OC1_SetConfig+0xd8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_OC1_SetConfig+0x64>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd4 <TIM_OC1_SetConfig+0xdc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d10c      	bne.n	8005d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 0308 	bic.w	r3, r3, #8
 8005d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 0304 	bic.w	r3, r3, #4
 8005d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a15      	ldr	r2, [pc, #84]	@ (8005dd0 <TIM_OC1_SetConfig+0xd8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC1_SetConfig+0x8e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a14      	ldr	r2, [pc, #80]	@ (8005dd4 <TIM_OC1_SetConfig+0xdc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d111      	bne.n	8005daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	621a      	str	r2, [r3, #32]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400

08005dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f023 0210 	bic.w	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0320 	bic.w	r3, r3, #32
 8005e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a22      	ldr	r2, [pc, #136]	@ (8005ebc <TIM_OC2_SetConfig+0xe4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC2_SetConfig+0x68>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a21      	ldr	r2, [pc, #132]	@ (8005ec0 <TIM_OC2_SetConfig+0xe8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10d      	bne.n	8005e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a17      	ldr	r2, [pc, #92]	@ (8005ebc <TIM_OC2_SetConfig+0xe4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_OC2_SetConfig+0x94>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a16      	ldr	r2, [pc, #88]	@ (8005ec0 <TIM_OC2_SetConfig+0xe8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d113      	bne.n	8005e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40010400 	.word	0x40010400

08005ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a21      	ldr	r2, [pc, #132]	@ (8005fa4 <TIM_OC3_SetConfig+0xe0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_OC3_SetConfig+0x66>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a20      	ldr	r2, [pc, #128]	@ (8005fa8 <TIM_OC3_SetConfig+0xe4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d10d      	bne.n	8005f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a16      	ldr	r2, [pc, #88]	@ (8005fa4 <TIM_OC3_SetConfig+0xe0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_OC3_SetConfig+0x92>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <TIM_OC3_SetConfig+0xe4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d113      	bne.n	8005f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	621a      	str	r2, [r3, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40010400 	.word	0x40010400

08005fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	031b      	lsls	r3, r3, #12
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a12      	ldr	r2, [pc, #72]	@ (8006050 <TIM_OC4_SetConfig+0xa4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_OC4_SetConfig+0x68>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a11      	ldr	r2, [pc, #68]	@ (8006054 <TIM_OC4_SetConfig+0xa8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d109      	bne.n	8006028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800601a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	019b      	lsls	r3, r3, #6
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40010000 	.word	0x40010000
 8006054:	40010400 	.word	0x40010400

08006058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0201 	bic.w	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f023 030a 	bic.w	r3, r3, #10
 8006094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b087      	sub	sp, #28
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f023 0210 	bic.w	r2, r3, #16
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	f043 0307 	orr.w	r3, r3, #7
 8006138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	609a      	str	r2, [r3, #8]
}
 8006140:	bf00      	nop
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	021a      	lsls	r2, r3, #8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	431a      	orrs	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	609a      	str	r2, [r3, #8]
}
 8006180:	bf00      	nop
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2201      	movs	r2, #1
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1a      	ldr	r2, [r3, #32]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	401a      	ands	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1a      	ldr	r2, [r3, #32]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	431a      	orrs	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e05a      	b.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a21      	ldr	r2, [pc, #132]	@ (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623c:	d01d      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1b      	ldr	r2, [pc, #108]	@ (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1a      	ldr	r2, [pc, #104]	@ (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a18      	ldr	r2, [pc, #96]	@ (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a17      	ldr	r2, [pc, #92]	@ (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10c      	bne.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40001800 	.word	0x40001800

080062d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e042      	b.n	8006390 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fc fe88 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2224      	movs	r2, #36	@ 0x24
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800633a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f82b 	bl	8006398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b0c0      	sub	sp, #256	@ 0x100
 800639e:	af00      	add	r7, sp, #0
 80063a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	ea40 0301 	orr.w	r3, r0, r1
 80063c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063f0:	f021 010c 	bic.w	r1, r1, #12
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063fe:	430b      	orrs	r3, r1
 8006400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006412:	6999      	ldr	r1, [r3, #24]
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	ea40 0301 	orr.w	r3, r0, r1
 800641e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b8f      	ldr	r3, [pc, #572]	@ (8006664 <UART_SetConfig+0x2cc>)
 8006428:	429a      	cmp	r2, r3
 800642a:	d005      	beq.n	8006438 <UART_SetConfig+0xa0>
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b8d      	ldr	r3, [pc, #564]	@ (8006668 <UART_SetConfig+0x2d0>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d104      	bne.n	8006442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fd fef8 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 800643c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006440:	e003      	b.n	800644a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006442:	f7fd fedf 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8006446:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006454:	f040 810c 	bne.w	8006670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800645c:	2200      	movs	r2, #0
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006462:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1891      	adds	r1, r2, r2
 8006470:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006472:	415b      	adcs	r3, r3
 8006474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800647a:	4621      	mov	r1, r4
 800647c:	eb12 0801 	adds.w	r8, r2, r1
 8006480:	4629      	mov	r1, r5
 8006482:	eb43 0901 	adc.w	r9, r3, r1
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800649a:	4690      	mov	r8, r2
 800649c:	4699      	mov	r9, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	eb18 0303 	adds.w	r3, r8, r3
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064a8:	462b      	mov	r3, r5
 80064aa:	eb49 0303 	adc.w	r3, r9, r3
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064c6:	460b      	mov	r3, r1
 80064c8:	18db      	adds	r3, r3, r3
 80064ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80064cc:	4613      	mov	r3, r2
 80064ce:	eb42 0303 	adc.w	r3, r2, r3
 80064d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80064d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064dc:	f7f9 fe92 	bl	8000204 <__aeabi_uldivmod>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4b61      	ldr	r3, [pc, #388]	@ (800666c <UART_SetConfig+0x2d4>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	011c      	lsls	r4, r3, #4
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	1891      	adds	r1, r2, r2
 8006506:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006508:	415b      	adcs	r3, r3
 800650a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800650c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006510:	4641      	mov	r1, r8
 8006512:	eb12 0a01 	adds.w	sl, r2, r1
 8006516:	4649      	mov	r1, r9
 8006518:	eb43 0b01 	adc.w	fp, r3, r1
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800652c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006530:	4692      	mov	sl, r2
 8006532:	469b      	mov	fp, r3
 8006534:	4643      	mov	r3, r8
 8006536:	eb1a 0303 	adds.w	r3, sl, r3
 800653a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800653e:	464b      	mov	r3, r9
 8006540:	eb4b 0303 	adc.w	r3, fp, r3
 8006544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006554:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	643b      	str	r3, [r7, #64]	@ 0x40
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	647b      	str	r3, [r7, #68]	@ 0x44
 800656a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800656e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006572:	f7f9 fe47 	bl	8000204 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4611      	mov	r1, r2
 800657c:	4b3b      	ldr	r3, [pc, #236]	@ (800666c <UART_SetConfig+0x2d4>)
 800657e:	fba3 2301 	umull	r2, r3, r3, r1
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2264      	movs	r2, #100	@ 0x64
 8006586:	fb02 f303 	mul.w	r3, r2, r3
 800658a:	1acb      	subs	r3, r1, r3
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006592:	4b36      	ldr	r3, [pc, #216]	@ (800666c <UART_SetConfig+0x2d4>)
 8006594:	fba3 2302 	umull	r2, r3, r3, r2
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065a0:	441c      	add	r4, r3
 80065a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	1891      	adds	r1, r2, r2
 80065ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065bc:	415b      	adcs	r3, r3
 80065be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065c4:	4641      	mov	r1, r8
 80065c6:	1851      	adds	r1, r2, r1
 80065c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80065ca:	4649      	mov	r1, r9
 80065cc:	414b      	adcs	r3, r1
 80065ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065dc:	4659      	mov	r1, fp
 80065de:	00cb      	lsls	r3, r1, #3
 80065e0:	4651      	mov	r1, sl
 80065e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065e6:	4651      	mov	r1, sl
 80065e8:	00ca      	lsls	r2, r1, #3
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	4642      	mov	r2, r8
 80065f2:	189b      	adds	r3, r3, r2
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065f8:	464b      	mov	r3, r9
 80065fa:	460a      	mov	r2, r1
 80065fc:	eb42 0303 	adc.w	r3, r2, r3
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006610:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006618:	460b      	mov	r3, r1
 800661a:	18db      	adds	r3, r3, r3
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800661e:	4613      	mov	r3, r2
 8006620:	eb42 0303 	adc.w	r3, r2, r3
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800662a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800662e:	f7f9 fde9 	bl	8000204 <__aeabi_uldivmod>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <UART_SetConfig+0x2d4>)
 8006638:	fba3 1302 	umull	r1, r3, r3, r2
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	2164      	movs	r1, #100	@ 0x64
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	3332      	adds	r3, #50	@ 0x32
 800664a:	4a08      	ldr	r2, [pc, #32]	@ (800666c <UART_SetConfig+0x2d4>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f003 0207 	and.w	r2, r3, #7
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4422      	add	r2, r4
 800665e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006660:	e106      	b.n	8006870 <UART_SetConfig+0x4d8>
 8006662:	bf00      	nop
 8006664:	40011000 	.word	0x40011000
 8006668:	40011400 	.word	0x40011400
 800666c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006674:	2200      	movs	r2, #0
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800667a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800667e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006682:	4642      	mov	r2, r8
 8006684:	464b      	mov	r3, r9
 8006686:	1891      	adds	r1, r2, r2
 8006688:	6239      	str	r1, [r7, #32]
 800668a:	415b      	adcs	r3, r3
 800668c:	627b      	str	r3, [r7, #36]	@ 0x24
 800668e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006692:	4641      	mov	r1, r8
 8006694:	1854      	adds	r4, r2, r1
 8006696:	4649      	mov	r1, r9
 8006698:	eb43 0501 	adc.w	r5, r3, r1
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	00eb      	lsls	r3, r5, #3
 80066a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066aa:	00e2      	lsls	r2, r4, #3
 80066ac:	4614      	mov	r4, r2
 80066ae:	461d      	mov	r5, r3
 80066b0:	4643      	mov	r3, r8
 80066b2:	18e3      	adds	r3, r4, r3
 80066b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066b8:	464b      	mov	r3, r9
 80066ba:	eb45 0303 	adc.w	r3, r5, r3
 80066be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066de:	4629      	mov	r1, r5
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	4621      	mov	r1, r4
 80066e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e8:	4621      	mov	r1, r4
 80066ea:	008a      	lsls	r2, r1, #2
 80066ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066f0:	f7f9 fd88 	bl	8000204 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b60      	ldr	r3, [pc, #384]	@ (800687c <UART_SetConfig+0x4e4>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	011c      	lsls	r4, r3, #4
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800670c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	61b9      	str	r1, [r7, #24]
 800671c:	415b      	adcs	r3, r3
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006724:	4641      	mov	r1, r8
 8006726:	1851      	adds	r1, r2, r1
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	4649      	mov	r1, r9
 800672c:	414b      	adcs	r3, r1
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800673c:	4659      	mov	r1, fp
 800673e:	00cb      	lsls	r3, r1, #3
 8006740:	4651      	mov	r1, sl
 8006742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006746:	4651      	mov	r1, sl
 8006748:	00ca      	lsls	r2, r1, #3
 800674a:	4610      	mov	r0, r2
 800674c:	4619      	mov	r1, r3
 800674e:	4603      	mov	r3, r0
 8006750:	4642      	mov	r2, r8
 8006752:	189b      	adds	r3, r3, r2
 8006754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006758:	464b      	mov	r3, r9
 800675a:	460a      	mov	r2, r1
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800676e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800677c:	4649      	mov	r1, r9
 800677e:	008b      	lsls	r3, r1, #2
 8006780:	4641      	mov	r1, r8
 8006782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006786:	4641      	mov	r1, r8
 8006788:	008a      	lsls	r2, r1, #2
 800678a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800678e:	f7f9 fd39 	bl	8000204 <__aeabi_uldivmod>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4611      	mov	r1, r2
 8006798:	4b38      	ldr	r3, [pc, #224]	@ (800687c <UART_SetConfig+0x4e4>)
 800679a:	fba3 2301 	umull	r2, r3, r3, r1
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	2264      	movs	r2, #100	@ 0x64
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	1acb      	subs	r3, r1, r3
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	3332      	adds	r3, #50	@ 0x32
 80067ac:	4a33      	ldr	r2, [pc, #204]	@ (800687c <UART_SetConfig+0x4e4>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067b8:	441c      	add	r4, r3
 80067ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067be:	2200      	movs	r2, #0
 80067c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80067c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80067c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	1891      	adds	r1, r2, r2
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	415b      	adcs	r3, r3
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067d8:	4641      	mov	r1, r8
 80067da:	1851      	adds	r1, r2, r1
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	4649      	mov	r1, r9
 80067e0:	414b      	adcs	r3, r1
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067f0:	4659      	mov	r1, fp
 80067f2:	00cb      	lsls	r3, r1, #3
 80067f4:	4651      	mov	r1, sl
 80067f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067fa:	4651      	mov	r1, sl
 80067fc:	00ca      	lsls	r2, r1, #3
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	4603      	mov	r3, r0
 8006804:	4642      	mov	r2, r8
 8006806:	189b      	adds	r3, r3, r2
 8006808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800680a:	464b      	mov	r3, r9
 800680c:	460a      	mov	r2, r1
 800680e:	eb42 0303 	adc.w	r3, r2, r3
 8006812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	663b      	str	r3, [r7, #96]	@ 0x60
 800681e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800682c:	4649      	mov	r1, r9
 800682e:	008b      	lsls	r3, r1, #2
 8006830:	4641      	mov	r1, r8
 8006832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006836:	4641      	mov	r1, r8
 8006838:	008a      	lsls	r2, r1, #2
 800683a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800683e:	f7f9 fce1 	bl	8000204 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4b0d      	ldr	r3, [pc, #52]	@ (800687c <UART_SetConfig+0x4e4>)
 8006848:	fba3 1302 	umull	r1, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2164      	movs	r1, #100	@ 0x64
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	3332      	adds	r3, #50	@ 0x32
 800685a:	4a08      	ldr	r2, [pc, #32]	@ (800687c <UART_SetConfig+0x4e4>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4422      	add	r2, r4
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006876:	46bd      	mov	sp, r7
 8006878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687c:	51eb851f 	.word	0x51eb851f

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4d0d      	ldr	r5, [pc, #52]	@ (80068c8 <__libc_init_array+0x38>)
 8006894:	4c0d      	ldr	r4, [pc, #52]	@ (80068cc <__libc_init_array+0x3c>)
 8006896:	1b64      	subs	r4, r4, r5
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	2600      	movs	r6, #0
 800689c:	42a6      	cmp	r6, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	4d0b      	ldr	r5, [pc, #44]	@ (80068d0 <__libc_init_array+0x40>)
 80068a2:	4c0c      	ldr	r4, [pc, #48]	@ (80068d4 <__libc_init_array+0x44>)
 80068a4:	f000 f818 	bl	80068d8 <_init>
 80068a8:	1b64      	subs	r4, r4, r5
 80068aa:	10a4      	asrs	r4, r4, #2
 80068ac:	2600      	movs	r6, #0
 80068ae:	42a6      	cmp	r6, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b8:	4798      	blx	r3
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c2:	4798      	blx	r3
 80068c4:	3601      	adds	r6, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	08006910 	.word	0x08006910
 80068cc:	08006910 	.word	0x08006910
 80068d0:	08006910 	.word	0x08006910
 80068d4:	08006914 	.word	0x08006914

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
