
f446re_step_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e58  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009028  08009028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  0000b1c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009448  08009448  0000b1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800944c  0800944c  0000a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  08009450  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  200001c0  08009610  0000b1c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08009610  0000b688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156b0  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e8  00000000  00000000  000208a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00023288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108b  00000000  00000000  000247d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023087  00000000  00000000  0002585b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e45  00000000  00000000  000488e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db583  00000000  00000000  0005d727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006360  00000000  00000000  00138cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0013f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009010 	.word	0x08009010

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08009010 	.word	0x08009010

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f003 fd8a 	bl	8004108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f852 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f978 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f94c 	bl	8000898 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000600:	f000 f8ba 	bl	8000778 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000604:	f000 f8ee 	bl	80007e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, 2);
 8000608:	2102      	movs	r1, #2
 800060a:	2001      	movs	r0, #1
 800060c:	f003 fcc4 	bl	8003f98 <BSP_MotorControl_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f003 fb8c 	bl	8003d30 <BSP_MotorControl_Init>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01, NULL);
 8000618:	2100      	movs	r1, #0
 800061a:	2001      	movs	r0, #1
 800061c:	f003 fb88 	bl	8003d30 <BSP_MotorControl_Init>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000620:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x8c>)
 8000622:	f003 fb2b 	bl	8003c7c <BSP_MotorControl_AttachFlagInterrupt>
  BSP_MotorControl_AttachBusyInterrupt(MyBusyInterruptHandler);
 8000626:	4815      	ldr	r0, [pc, #84]	@ (800067c <main+0x90>)
 8000628:	f003 fb46 	bl	8003cb8 <BSP_MotorControl_AttachBusyInterrupt>
  BSP_MotorControl_AttachErrorHandler(MyErrorHandler);
 800062c:	4814      	ldr	r0, [pc, #80]	@ (8000680 <main+0x94>)
 800062e:	f003 fb07 	bl	8003c40 <BSP_MotorControl_AttachErrorHandler>
  BSP_MotorControl_CmdResetPos(0);
 8000632:	2000      	movs	r0, #0
 8000634:	f003 fc2a 	bl	8003e8c <BSP_MotorControl_CmdResetPos>
  BSP_MotorControl_CmdResetPos(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f003 fc27 	bl	8003e8c <BSP_MotorControl_CmdResetPos>
  HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4910      	ldr	r1, [pc, #64]	@ (8000684 <main+0x98>)
 8000642:	4811      	ldr	r0, [pc, #68]	@ (8000688 <main+0x9c>)
 8000644:	f006 fbcb 	bl	8006dde <HAL_UART_Receive_IT>

  system_tick = 0;
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <main+0xa0>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
  last_status_update = 0;
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <main+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
  UART_SendString("SYSTEM,READY\n");
 8000654:	480f      	ldr	r0, [pc, #60]	@ (8000694 <main+0xa8>)
 8000656:	f000 f9db 	bl	8000a10 <UART_SendString>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    // Process incoming commands
	    if (command_ready)
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <main+0xac>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <main+0x82>
	    {
	      command_ready = 0;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <main+0xac>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	      ParseCommand();
 800066a:	f000 fa9f 	bl	8000bac <ParseCommand>
	    }

	    // Small delay to prevent busy-waiting, but fast enough for responsiveness
	    HAL_Delay(MAIN_LOOP_DELAY);
 800066e:	2032      	movs	r0, #50	@ 0x32
 8000670:	f003 fdbc 	bl	80041ec <HAL_Delay>
	    if (command_ready)
 8000674:	e7f1      	b.n	800065a <main+0x6e>
 8000676:	bf00      	nop
 8000678:	08000ef9 	.word	0x08000ef9
 800067c:	08000f0d 	.word	0x08000f0d
 8000680:	08000f19 	.word	0x08000f19
 8000684:	200003d4 	.word	0x200003d4
 8000688:	2000027c 	.word	0x2000027c
 800068c:	20000460 	.word	0x20000460
 8000690:	2000045c 	.word	0x2000045c
 8000694:	08009028 	.word	0x08009028
 8000698:	200003c8 	.word	0x200003c8

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2234      	movs	r2, #52	@ 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fb8c 	bl	8007dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <SystemClock_Config+0xd4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <SystemClock_Config+0xd4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <SystemClock_Config+0xd4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <SystemClock_Config+0xd8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e8:	4a22      	ldr	r2, [pc, #136]	@ (8000774 <SystemClock_Config+0xd8>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemClock_Config+0xd8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000710:	2310      	movs	r3, #16
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000714:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000718:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071a:	2304      	movs	r3, #4
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4618      	mov	r0, r3
 800072c:	f004 fc5a 	bl	8004fe4 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000736:	f000 fc27 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f8fa 	bl	8004950 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000762:	f000 fc11 	bl	8000f88 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_SPI1_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <MX_SPI1_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_SPI1_Init+0x64>)
 800079e:	2201      	movs	r2, #1
 80007a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007ac:	2218      	movs	r2, #24
 80007ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_SPI1_Init+0x64>)
 80007ca:	f004 fea9 	bl	8005520 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 fbd8 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200001dc 	.word	0x200001dc
 80007e0:	40013000 	.word	0x40013000

080007e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_TIM3_Init+0xac>)
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <MX_TIM3_Init+0xb0>)
 800080a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_TIM3_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_TIM3_Init+0xac>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_TIM3_Init+0xac>)
 800081a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800081e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_TIM3_Init+0xac>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_TIM3_Init+0xac>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082c:	4818      	ldr	r0, [pc, #96]	@ (8000890 <MX_TIM3_Init+0xac>)
 800082e:	f005 f985 	bl	8005b3c <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 fba6 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_TIM3_Init+0xac>)
 800084c:	f006 f95c 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000856:	f000 fb97 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085a:	2360      	movs	r3, #96	@ 0x60
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2204      	movs	r2, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	@ (8000890 <MX_TIM3_Init+0xac>)
 8000872:	f005 fc77 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800087c:	f000 fb84 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <MX_TIM3_Init+0xac>)
 8000882:	f002 feb1 	bl	80035e8 <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	@ 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000234 	.word	0x20000234
 8000894:	40000400 	.word	0x40000400

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f006 f9aa 	bl	8006c28 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 fb55 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000027c 	.word	0x2000027c
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a04 <MX_GPIO_Init+0x118>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b3c      	ldr	r3, [pc, #240]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b38      	ldr	r3, [pc, #224]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a37      	ldr	r2, [pc, #220]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a30      	ldr	r2, [pc, #192]	@ (8000a04 <MX_GPIO_Init+0x118>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <MX_GPIO_Init+0x118>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STBY_RESET_Pin_GPIO_Port, STBY_RESET_Pin_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800095c:	482a      	ldr	r0, [pc, #168]	@ (8000a08 <MX_GPIO_Init+0x11c>)
 800095e:	f003 ffb9 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_Pin_GPIO_Port, CS_Pin_Pin, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	4829      	ldr	r0, [pc, #164]	@ (8000a0c <MX_GPIO_Init+0x120>)
 8000968:	f003 ffb4 	bl	80048d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STBY_RESET_Pin_Pin */
  GPIO_InitStruct.Pin = STBY_RESET_Pin_Pin;
 800096c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STBY_RESET_Pin_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	4820      	ldr	r0, [pc, #128]	@ (8000a08 <MX_GPIO_Init+0x11c>)
 8000986:	f003 fdf9 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLAG_Pin_Pin */
  GPIO_InitStruct.Pin = FLAG_Pin_Pin;
 800098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000990:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FLAG_Pin_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4819      	ldr	r0, [pc, #100]	@ (8000a08 <MX_GPIO_Init+0x11c>)
 80009a2:	f003 fdeb 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUSY_Pin_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4814      	ldr	r0, [pc, #80]	@ (8000a0c <MX_GPIO_Init+0x120>)
 80009bc:	f003 fdde 	bl	800457c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin_Pin */
  GPIO_InitStruct.Pin = CS_Pin_Pin;
 80009c0:	2340      	movs	r3, #64	@ 0x40
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_Pin_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <MX_GPIO_Init+0x120>)
 80009d8:	f003 fdd0 	bl	800457c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2017      	movs	r0, #23
 80009e2:	f003 fd02 	bl	80043ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009e6:	2017      	movs	r0, #23
 80009e8:	f003 fd1b 	bl	8004422 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2028      	movs	r0, #40	@ 0x28
 80009f2:	f003 fcfa 	bl	80043ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f6:	2028      	movs	r0, #40	@ 0x28
 80009f8:	f003 fd13 	bl	8004422 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <UART_SendString>:

/* USER CODE BEGIN 4 */
void UART_SendString(const char *str)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fbf9 	bl	8000210 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	2364      	movs	r3, #100	@ 0x64
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <UART_SendString+0x24>)
 8000a28:	f006 f94e 	bl	8006cc8 <HAL_UART_Transmit>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000027c 	.word	0x2000027c

08000a38 <UART_ReceiveChar>:

void UART_ReceiveChar(uint8_t ch)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  // Check for buffer overflow BEFORE writing
  if (cmd_index >= RX_BUFFER_SIZE - 1)
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a48:	d908      	bls.n	8000a5c <UART_ReceiveChar+0x24>
  {
    // Buffer full - reset and report error
    cmd_index = 0;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
    SendError(0, "BUFFER_OVERFLOW", "Command too long");
 8000a50:	4a18      	ldr	r2, [pc, #96]	@ (8000ab4 <UART_ReceiveChar+0x7c>)
 8000a52:	4919      	ldr	r1, [pc, #100]	@ (8000ab8 <UART_ReceiveChar+0x80>)
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f88b 	bl	8000b70 <SendError>
    return;
 8000a5a:	e025      	b.n	8000aa8 <UART_ReceiveChar+0x70>
  }

  if (ch == '\n' || ch == '\r')
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d002      	beq.n	8000a68 <UART_ReceiveChar+0x30>
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b0d      	cmp	r3, #13
 8000a66:	d117      	bne.n	8000a98 <UART_ReceiveChar+0x60>
  {
    if (cmd_index > 0)  // Only process if we have data
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00f      	beq.n	8000a90 <UART_ReceiveChar+0x58>
    {
      command_buffer[cmd_index] = '\0';
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <UART_ReceiveChar+0x84>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	54d1      	strb	r1, [r2, r3]
      // Copy to rx_buffer for processing
      memcpy(rx_buffer, command_buffer, cmd_index + 1);
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	461a      	mov	r2, r3
 8000a82:	490e      	ldr	r1, [pc, #56]	@ (8000abc <UART_ReceiveChar+0x84>)
 8000a84:	480e      	ldr	r0, [pc, #56]	@ (8000ac0 <UART_ReceiveChar+0x88>)
 8000a86:	f007 f9fb 	bl	8007e80 <memcpy>
      command_ready = 1;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <UART_ReceiveChar+0x8c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
    }
    cmd_index = 0;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e007      	b.n	8000aa8 <UART_ReceiveChar+0x70>
  }
  else
  {
    command_buffer[cmd_index++] = ch;
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	4904      	ldr	r1, [pc, #16]	@ (8000ab0 <UART_ReceiveChar+0x78>)
 8000aa0:	600a      	str	r2, [r1, #0]
 8000aa2:	4906      	ldr	r1, [pc, #24]	@ (8000abc <UART_ReceiveChar+0x84>)
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	54ca      	strb	r2, [r1, r3]
  }
}
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000458 	.word	0x20000458
 8000ab4:	08009038 	.word	0x08009038
 8000ab8:	0800904c 	.word	0x0800904c
 8000abc:	200003d8 	.word	0x200003d8
 8000ac0:	200002c8 	.word	0x200002c8
 8000ac4:	200003c8 	.word	0x200003c8

08000ac8 <SendMotorStatus>:

void SendMotorStatus(uint8_t motor_id)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af04      	add	r7, sp, #16
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(motor_id);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 f96f 	bl	8003db8 <BSP_MotorControl_CmdGetStatus>
 8000ada:	4603      	mov	r3, r0
 8000adc:	82bb      	strh	r3, [r7, #20]
  int32_t position = BSP_MotorControl_GetPosition(motor_id);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f945 	bl	8003d70 <BSP_MotorControl_GetPosition>
 8000ae6:	6138      	str	r0, [r7, #16]

  // Extract status flags
  uint8_t is_moving = ((statusRegister & POWERSTEP01_STATUS_BUSY) == 0) ? 1 : 0;
 8000ae8:	8abb      	ldrh	r3, [r7, #20]
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf0c      	ite	eq
 8000af2:	2301      	moveq	r3, #1
 8000af4:	2300      	movne	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	73fb      	strb	r3, [r7, #15]
  uint8_t has_error = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]

  // Check for any error conditions
  if (((statusRegister & POWERSTEP01_STATUS_UVLO) == 0) ||
 8000afe:	8abb      	ldrh	r3, [r7, #20]
 8000b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d017      	beq.n	8000b38 <SendMotorStatus+0x70>
      ((statusRegister & POWERSTEP01_STATUS_OCD) == 0) ||
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((statusRegister & POWERSTEP01_STATUS_UVLO) == 0) ||
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d012      	beq.n	8000b38 <SendMotorStatus+0x70>
      ((statusRegister & POWERSTEP01_STATUS_STALL_A) == 0) ||
 8000b12:	8abb      	ldrh	r3, [r7, #20]
 8000b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
      ((statusRegister & POWERSTEP01_STATUS_OCD) == 0) ||
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00d      	beq.n	8000b38 <SendMotorStatus+0x70>
      ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0) ||
 8000b1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
      ((statusRegister & POWERSTEP01_STATUS_STALL_A) == 0) ||
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	da09      	bge.n	8000b38 <SendMotorStatus+0x70>
      (statusRegister & POWERSTEP01_STATUS_CMD_ERROR) ||
 8000b24:	8abb      	ldrh	r3, [r7, #20]
 8000b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0) ||
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <SendMotorStatus+0x70>
      (statusRegister & POWERSTEP01_STATUS_TH_STATUS))
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
      (statusRegister & POWERSTEP01_STATUS_CMD_ERROR) ||
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SendMotorStatus+0x74>
  {
    has_error = 1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	75fb      	strb	r3, [r7, #23]
  }

  // Send compact status
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE,
 8000b3c:	79f8      	ldrb	r0, [r7, #7]
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	7dfa      	ldrb	r2, [r7, #23]
 8000b42:	8ab9      	ldrh	r1, [r7, #20]
 8000b44:	9103      	str	r1, [sp, #12]
 8000b46:	9202      	str	r2, [sp, #8]
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SendMotorStatus+0xa0>)
 8000b52:	2180      	movs	r1, #128	@ 0x80
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <SendMotorStatus+0xa4>)
 8000b56:	f007 f8d3 	bl	8007d00 <sniprintf>
           "STATUS,%d,%ld,%d,%d,0x%04X\n",
           motor_id, position, is_moving, has_error, statusRegister);
  UART_SendString((const char *)tx_buffer);
 8000b5a:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <SendMotorStatus+0xa4>)
 8000b5c:	f7ff ff58 	bl	8000a10 <UART_SendString>
}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	0800905c 	.word	0x0800905c
 8000b6c:	20000348 	.word	0x20000348

08000b70 <SendError>:

void SendError(uint8_t motor_id, const char *error_type, const char *description)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	4603      	mov	r3, r0
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	73fb      	strb	r3, [r7, #15]
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "ERROR,%d,%s,%s\n", motor_id, error_type, description);
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <SendError+0x34>)
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <SendError+0x38>)
 8000b90:	f007 f8b6 	bl	8007d00 <sniprintf>
  UART_SendString((const char *)tx_buffer);
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <SendError+0x38>)
 8000b96:	f7ff ff3b 	bl	8000a10 <UART_SendString>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08009078 	.word	0x08009078
 8000ba8:	20000348 	.word	0x20000348

08000bac <ParseCommand>:

void ParseCommand(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
  char *cmd = (char *)rx_buffer;
 8000bb2:	4b69      	ldr	r3, [pc, #420]	@ (8000d58 <ParseCommand+0x1ac>)
 8000bb4:	60fb      	str	r3, [r7, #12]

  // Ignore empty commands
  if (strlen(cmd) == 0)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80c7 	beq.w	8000d4e <ParseCommand+0x1a2>
  {
    return;
  }

  // Debug: Echo back what was received (safely truncated)
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "DEBUG,RX:[%.20s]\n", cmd);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4a66      	ldr	r2, [pc, #408]	@ (8000d5c <ParseCommand+0x1b0>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	4866      	ldr	r0, [pc, #408]	@ (8000d60 <ParseCommand+0x1b4>)
 8000bc8:	f007 f89a 	bl	8007d00 <sniprintf>
  UART_SendString((const char *)tx_buffer);
 8000bcc:	4864      	ldr	r0, [pc, #400]	@ (8000d60 <ParseCommand+0x1b4>)
 8000bce:	f7ff ff1f 	bl	8000a10 <UART_SendString>

  if (strncmp(cmd, "MOVE", 4) == 0)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	4963      	ldr	r1, [pc, #396]	@ (8000d64 <ParseCommand+0x1b8>)
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f007 f8fe 	bl	8007dd8 <strncmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d140      	bne.n	8000c64 <ParseCommand+0xb8>
  {
    int32_t motor0_steps, motor1_steps;
    if (sscanf(cmd, "MOVE,%ld,%ld", &motor0_steps, &motor1_steps) == 2)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	f107 0208 	add.w	r2, r7, #8
 8000be8:	495f      	ldr	r1, [pc, #380]	@ (8000d68 <ParseCommand+0x1bc>)
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f007 f8be 	bl	8007d6c <siscanf>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d130      	bne.n	8000c58 <ParseCommand+0xac>
    {
      // Validate step values
      if (motor0_steps < MIN_MOTOR_STEPS || motor0_steps > MAX_MOTOR_STEPS ||
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	4a5c      	ldr	r2, [pc, #368]	@ (8000d6c <ParseCommand+0x1c0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	db0b      	blt.n	8000c16 <ParseCommand+0x6a>
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	4a5b      	ldr	r2, [pc, #364]	@ (8000d70 <ParseCommand+0x1c4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	dc07      	bgt.n	8000c16 <ParseCommand+0x6a>
          motor1_steps < MIN_MOTOR_STEPS || motor1_steps > MAX_MOTOR_STEPS)
 8000c06:	687b      	ldr	r3, [r7, #4]
      if (motor0_steps < MIN_MOTOR_STEPS || motor0_steps > MAX_MOTOR_STEPS ||
 8000c08:	4a58      	ldr	r2, [pc, #352]	@ (8000d6c <ParseCommand+0x1c0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	db03      	blt.n	8000c16 <ParseCommand+0x6a>
          motor1_steps < MIN_MOTOR_STEPS || motor1_steps > MAX_MOTOR_STEPS)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a57      	ldr	r2, [pc, #348]	@ (8000d70 <ParseCommand+0x1c4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	dd05      	ble.n	8000c22 <ParseCommand+0x76>
      {
        SendError(0, "RANGE_ERROR", "Step value out of range");
 8000c16:	4a57      	ldr	r2, [pc, #348]	@ (8000d74 <ParseCommand+0x1c8>)
 8000c18:	4957      	ldr	r1, [pc, #348]	@ (8000d78 <ParseCommand+0x1cc>)
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff ffa8 	bl	8000b70 <SendError>
 8000c20:	e096      	b.n	8000d50 <ParseCommand+0x1a4>
        return;
      }

      // Queue both motors
      motor0_target = motor0_steps;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	4a55      	ldr	r2, [pc, #340]	@ (8000d7c <ParseCommand+0x1d0>)
 8000c26:	6013      	str	r3, [r2, #0]
      motor1_target = motor1_steps;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a55      	ldr	r2, [pc, #340]	@ (8000d80 <ParseCommand+0x1d4>)
 8000c2c:	6013      	str	r3, [r2, #0]
      MoveMotorsToPosition(motor0_target, motor1_target);
 8000c2e:	4b53      	ldr	r3, [pc, #332]	@ (8000d7c <ParseCommand+0x1d0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a53      	ldr	r2, [pc, #332]	@ (8000d80 <ParseCommand+0x1d4>)
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f8c1 	bl	8000dc0 <MoveMotorsToPosition>

      // Send confirmation with actual values
      snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "OK,MOVE,%ld,%ld\n",
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	4613      	mov	r3, r2
 8000c46:	4a4f      	ldr	r2, [pc, #316]	@ (8000d84 <ParseCommand+0x1d8>)
 8000c48:	2180      	movs	r1, #128	@ 0x80
 8000c4a:	4845      	ldr	r0, [pc, #276]	@ (8000d60 <ParseCommand+0x1b4>)
 8000c4c:	f007 f858 	bl	8007d00 <sniprintf>
               motor0_steps, motor1_steps);
      UART_SendString((const char *)tx_buffer);
 8000c50:	4843      	ldr	r0, [pc, #268]	@ (8000d60 <ParseCommand+0x1b4>)
 8000c52:	f7ff fedd 	bl	8000a10 <UART_SendString>
 8000c56:	e07b      	b.n	8000d50 <ParseCommand+0x1a4>
    }
    else
    {
      SendError(0, "PARSE_ERROR", "Invalid MOVE format");
 8000c58:	4a4b      	ldr	r2, [pc, #300]	@ (8000d88 <ParseCommand+0x1dc>)
 8000c5a:	494c      	ldr	r1, [pc, #304]	@ (8000d8c <ParseCommand+0x1e0>)
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ff87 	bl	8000b70 <SendError>
 8000c62:	e075      	b.n	8000d50 <ParseCommand+0x1a4>
    }
  }
  else if (strncmp(cmd, "STOP", 4) == 0)
 8000c64:	2204      	movs	r2, #4
 8000c66:	494a      	ldr	r1, [pc, #296]	@ (8000d90 <ParseCommand+0x1e4>)
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f007 f8b5 	bl	8007dd8 <strncmp>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <ParseCommand+0xdc>
  {
    UART_SendString("OK,STOPPING\n");
 8000c74:	4847      	ldr	r0, [pc, #284]	@ (8000d94 <ParseCommand+0x1e8>)
 8000c76:	f7ff fecb 	bl	8000a10 <UART_SendString>
    BSP_MotorControl_CmdSoftStop(0);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f003 f96a 	bl	8003f54 <BSP_MotorControl_CmdSoftStop>
    BSP_MotorControl_CmdSoftStop(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f003 f967 	bl	8003f54 <BSP_MotorControl_CmdSoftStop>
 8000c86:	e063      	b.n	8000d50 <ParseCommand+0x1a4>
  }
  else if (strncmp(cmd, "HOME", 4) == 0)
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4943      	ldr	r1, [pc, #268]	@ (8000d98 <ParseCommand+0x1ec>)
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f007 f8a3 	bl	8007dd8 <strncmp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d107      	bne.n	8000ca8 <ParseCommand+0xfc>
  {
    // Move to position 0,0
    MoveMotorsToPosition(0, 0);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f890 	bl	8000dc0 <MoveMotorsToPosition>
    UART_SendString("OK,HOMING\n");
 8000ca0:	483e      	ldr	r0, [pc, #248]	@ (8000d9c <ParseCommand+0x1f0>)
 8000ca2:	f7ff feb5 	bl	8000a10 <UART_SendString>
 8000ca6:	e053      	b.n	8000d50 <ParseCommand+0x1a4>
  }
  else if (strncmp(cmd, "STATUS", 6) == 0)
 8000ca8:	2206      	movs	r2, #6
 8000caa:	493d      	ldr	r1, [pc, #244]	@ (8000da0 <ParseCommand+0x1f4>)
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f007 f893 	bl	8007dd8 <strncmp>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d116      	bne.n	8000ce6 <ParseCommand+0x13a>
  {
    // Check for CLEAR flag
    if (strstr(cmd, "CLEAR") != NULL)
 8000cb8:	493a      	ldr	r1, [pc, #232]	@ (8000da4 <ParseCommand+0x1f8>)
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f007 f89e 	bl	8007dfc <strstr>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d008      	beq.n	8000cd8 <ParseCommand+0x12c>
    {
      BSP_MotorControl_CmdGetStatus(0); // Clear error flags
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f003 f876 	bl	8003db8 <BSP_MotorControl_CmdGetStatus>
      BSP_MotorControl_CmdGetStatus(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f003 f873 	bl	8003db8 <BSP_MotorControl_CmdGetStatus>
      UART_SendString("OK,STATUS_CLEARED\n");
 8000cd2:	4835      	ldr	r0, [pc, #212]	@ (8000da8 <ParseCommand+0x1fc>)
 8000cd4:	f7ff fe9c 	bl	8000a10 <UART_SendString>
    }
    SendMotorStatus(0);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fef5 	bl	8000ac8 <SendMotorStatus>
    SendMotorStatus(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fef2 	bl	8000ac8 <SendMotorStatus>
 8000ce4:	e034      	b.n	8000d50 <ParseCommand+0x1a4>
  }
  else if (strncmp(cmd, "RESET", 5) == 0)
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	4930      	ldr	r1, [pc, #192]	@ (8000dac <ParseCommand+0x200>)
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f007 f874 	bl	8007dd8 <strncmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10f      	bne.n	8000d16 <ParseCommand+0x16a>
  {
    BSP_MotorControl_CmdGetStatus(0); // Clear error flags
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f003 f85e 	bl	8003db8 <BSP_MotorControl_CmdGetStatus>
    BSP_MotorControl_CmdGetStatus(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f003 f85b 	bl	8003db8 <BSP_MotorControl_CmdGetStatus>
    BSP_MotorControl_CmdResetPos(0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f003 f8c2 	bl	8003e8c <BSP_MotorControl_CmdResetPos>
    BSP_MotorControl_CmdResetPos(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f003 f8bf 	bl	8003e8c <BSP_MotorControl_CmdResetPos>
    UART_SendString("OK,RESET_COMPLETE\n");
 8000d0e:	4828      	ldr	r0, [pc, #160]	@ (8000db0 <ParseCommand+0x204>)
 8000d10:	f7ff fe7e 	bl	8000a10 <UART_SendString>
 8000d14:	e01c      	b.n	8000d50 <ParseCommand+0x1a4>
  }
  else if (strncmp(cmd, "HIZ", 3) == 0)
 8000d16:	2203      	movs	r2, #3
 8000d18:	4926      	ldr	r1, [pc, #152]	@ (8000db4 <ParseCommand+0x208>)
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f007 f85c 	bl	8007dd8 <strncmp>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d109      	bne.n	8000d3a <ParseCommand+0x18e>
  {
    UART_SendString("OK,HIZ\n");
 8000d26:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <ParseCommand+0x20c>)
 8000d28:	f7ff fe72 	bl	8000a10 <UART_SendString>
    BSP_MotorControl_CmdHardHiZ(0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f003 f88b 	bl	8003e48 <BSP_MotorControl_CmdHardHiZ>
    BSP_MotorControl_CmdHardHiZ(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f003 f888 	bl	8003e48 <BSP_MotorControl_CmdHardHiZ>
 8000d38:	e00a      	b.n	8000d50 <ParseCommand+0x1a4>
  }
  else
  {
    // Safely truncate unknown command in error message
    snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "ERROR,UNKNOWN,%.20s\n", cmd);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <ParseCommand+0x210>)
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <ParseCommand+0x1b4>)
 8000d42:	f006 ffdd 	bl	8007d00 <sniprintf>
    UART_SendString((const char *)tx_buffer);
 8000d46:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <ParseCommand+0x1b4>)
 8000d48:	f7ff fe62 	bl	8000a10 <UART_SendString>
 8000d4c:	e000      	b.n	8000d50 <ParseCommand+0x1a4>
    return;
 8000d4e:	bf00      	nop
  }
}
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200002c8 	.word	0x200002c8
 8000d5c:	08009088 	.word	0x08009088
 8000d60:	20000348 	.word	0x20000348
 8000d64:	0800909c 	.word	0x0800909c
 8000d68:	080090a4 	.word	0x080090a4
 8000d6c:	fff0bdc1 	.word	0xfff0bdc1
 8000d70:	000f423f 	.word	0x000f423f
 8000d74:	080090b4 	.word	0x080090b4
 8000d78:	080090cc 	.word	0x080090cc
 8000d7c:	200003cc 	.word	0x200003cc
 8000d80:	200003d0 	.word	0x200003d0
 8000d84:	080090d8 	.word	0x080090d8
 8000d88:	080090ec 	.word	0x080090ec
 8000d8c:	08009100 	.word	0x08009100
 8000d90:	0800910c 	.word	0x0800910c
 8000d94:	08009114 	.word	0x08009114
 8000d98:	08009124 	.word	0x08009124
 8000d9c:	0800912c 	.word	0x0800912c
 8000da0:	08009138 	.word	0x08009138
 8000da4:	08009140 	.word	0x08009140
 8000da8:	08009148 	.word	0x08009148
 8000dac:	0800915c 	.word	0x0800915c
 8000db0:	08009164 	.word	0x08009164
 8000db4:	08009178 	.word	0x08009178
 8000db8:	0800917c 	.word	0x0800917c
 8000dbc:	08009184 	.word	0x08009184

08000dc0 <MoveMotorsToPosition>:

void MoveMotorsToPosition(int32_t motor0_pos, int32_t motor1_pos)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	BSP_MotorControl_QueueCommands(0,POWERSTEP01_GO_TO, motor0_pos);
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	2160      	movs	r1, #96	@ 0x60
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f003 f89a 	bl	8003f08 <BSP_MotorControl_QueueCommands>
	BSP_MotorControl_QueueCommands(1,POWERSTEP01_GO_TO, motor1_pos);
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	2160      	movs	r1, #96	@ 0x60
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f003 f895 	bl	8003f08 <BSP_MotorControl_QueueCommands>
	BSP_MotorControl_SendQueuedCommands();
 8000dde:	f003 f877 	bl	8003ed0 <BSP_MotorControl_SendQueuedCommands>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <CheckMotorErrors>:

void CheckMotorErrors(uint8_t motor_id)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(motor_id);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 ffdd 	bl	8003db8 <BSP_MotorControl_CmdGetStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	81fb      	strh	r3, [r7, #14]

  if ((statusRegister & POWERSTEP01_STATUS_HIZ) == POWERSTEP01_STATUS_HIZ)
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <CheckMotorErrors+0x2c>
  {
    SendError(motor_id, "HIZ_STATE", "Power bridges disabled");
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb8 <CheckMotorErrors+0xcc>)
 8000e10:	492a      	ldr	r1, [pc, #168]	@ (8000ebc <CheckMotorErrors+0xd0>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff feac 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_CMD_ERROR) == POWERSTEP01_STATUS_CMD_ERROR)
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <CheckMotorErrors+0x42>
  {
    SendError(motor_id, "CMD_ERROR", "Command could not be performed");
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <CheckMotorErrors+0xd4>)
 8000e26:	4927      	ldr	r1, [pc, #156]	@ (8000ec4 <CheckMotorErrors+0xd8>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fea1 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_UVLO) == 0)
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <CheckMotorErrors+0x58>
  {
    SendError(motor_id, "UVLO", "Undervoltage lock-out");
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <CheckMotorErrors+0xdc>)
 8000e3c:	4923      	ldr	r1, [pc, #140]	@ (8000ecc <CheckMotorErrors+0xe0>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fe96 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_UVLO_ADC) == 0)
 8000e44:	89fb      	ldrh	r3, [r7, #14]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <CheckMotorErrors+0x6e>
  {
    SendError(motor_id, "UVLO_ADC", "ADC undervoltage lock-out");
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <CheckMotorErrors+0xe4>)
 8000e52:	4920      	ldr	r1, [pc, #128]	@ (8000ed4 <CheckMotorErrors+0xe8>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe8b 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_TH_STATUS) != 0)
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <CheckMotorErrors+0x84>
  {
    SendError(motor_id, "THERMAL", "Thermal warning or shutdown");
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <CheckMotorErrors+0xec>)
 8000e68:	491c      	ldr	r1, [pc, #112]	@ (8000edc <CheckMotorErrors+0xf0>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe80 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_OCD) == 0)
 8000e70:	89fb      	ldrh	r3, [r7, #14]
 8000e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d105      	bne.n	8000e86 <CheckMotorErrors+0x9a>
  {
    SendError(motor_id, "OCD", "Overcurrent detection");
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <CheckMotorErrors+0xf4>)
 8000e7e:	4919      	ldr	r1, [pc, #100]	@ (8000ee4 <CheckMotorErrors+0xf8>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe75 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_STALL_A) == 0)
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <CheckMotorErrors+0xb0>
  {
    SendError(motor_id, "STALL_A", "Stall on bridge A");
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <CheckMotorErrors+0xfc>)
 8000e94:	4915      	ldr	r1, [pc, #84]	@ (8000eec <CheckMotorErrors+0x100>)
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fe6a 	bl	8000b70 <SendError>
  }

  if ((statusRegister & POWERSTEP01_STATUS_STALL_B) == 0)
 8000e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db05      	blt.n	8000eb0 <CheckMotorErrors+0xc4>
  {
    SendError(motor_id, "STALL_B", "Stall on bridge B");
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <CheckMotorErrors+0x104>)
 8000ea8:	4912      	ldr	r1, [pc, #72]	@ (8000ef4 <CheckMotorErrors+0x108>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe60 	bl	8000b70 <SendError>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	0800919c 	.word	0x0800919c
 8000ebc:	080091b4 	.word	0x080091b4
 8000ec0:	080091c0 	.word	0x080091c0
 8000ec4:	080091e0 	.word	0x080091e0
 8000ec8:	080091ec 	.word	0x080091ec
 8000ecc:	08009204 	.word	0x08009204
 8000ed0:	0800920c 	.word	0x0800920c
 8000ed4:	08009228 	.word	0x08009228
 8000ed8:	08009234 	.word	0x08009234
 8000edc:	08009250 	.word	0x08009250
 8000ee0:	08009258 	.word	0x08009258
 8000ee4:	08009270 	.word	0x08009270
 8000ee8:	08009274 	.word	0x08009274
 8000eec:	08009288 	.word	0x08009288
 8000ef0:	08009290 	.word	0x08009290
 8000ef4:	080092a4 	.word	0x080092a4

08000ef8 <MyFlagInterruptHandler>:

void MyFlagInterruptHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  // Check errors for both motors
  CheckMotorErrors(0);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff75 	bl	8000dec <CheckMotorErrors>
  CheckMotorErrors(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff ff72 	bl	8000dec <CheckMotorErrors>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MyBusyInterruptHandler>:

void MyBusyInterruptHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
   if (BSP_MotorControl_CheckBusyHw())
 8000f10:	f002 ff78 	bl	8003e04 <BSP_MotorControl_CheckBusyHw>
   }
   else
   {
     // Busy signal inactive
   }
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <MyErrorHandler>:

void MyErrorHandler(uint16_t error)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
  gLastError = error;
 8000f22:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <MyErrorHandler+0x28>)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	8013      	strh	r3, [r2, #0]
  snprintf((char *)tx_buffer, TX_BUFFER_SIZE, "ERROR,0,SYSTEM_ERROR,0x%04X\n", error);
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <MyErrorHandler+0x2c>)
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <MyErrorHandler+0x30>)
 8000f30:	f006 fee6 	bl	8007d00 <sniprintf>
  UART_SendString((const char *)tx_buffer);
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MyErrorHandler+0x30>)
 8000f36:	f7ff fd6b 	bl	8000a10 <UART_SendString>

  while(1)
 8000f3a:	bf00      	nop
 8000f3c:	e7fd      	b.n	8000f3a <MyErrorHandler+0x22>
 8000f3e:	bf00      	nop
 8000f40:	200002c4 	.word	0x200002c4
 8000f44:	080092ac 	.word	0x080092ac
 8000f48:	20000348 	.word	0x20000348

08000f4c <HAL_UART_RxCpltCallback>:
  {
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_UART_RxCpltCallback+0x30>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d109      	bne.n	8000f72 <HAL_UART_RxCpltCallback+0x26>
  {
    UART_ReceiveChar(uart_rx_byte);
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_UART_RxCpltCallback+0x34>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fd68 	bl	8000a38 <UART_ReceiveChar>
    // Re-enable interrupt for next byte
    HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4905      	ldr	r1, [pc, #20]	@ (8000f80 <HAL_UART_RxCpltCallback+0x34>)
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <HAL_UART_RxCpltCallback+0x38>)
 8000f6e:	f005 ff36 	bl	8006dde <HAL_UART_Receive_IT>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40004400 	.word	0x40004400
 8000f80:	200003d4 	.word	0x200003d4
 8000f84:	2000027c 	.word	0x2000027c

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <Error_Handler+0x8>

08000f94 <Powerstep01_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void Powerstep01_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <Powerstep01_AttachErrorHandler+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000046c 	.word	0x2000046c

08000fb4 <Powerstep01_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachFlagInterrupt(void (*callback)(void))
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <Powerstep01_AttachFlagInterrupt+0x1c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000468 	.word	0x20000468

08000fd4 <Powerstep01_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy Interrupt
 * @retval None
 **********************************************************/
void Powerstep01_AttachBusyInterrupt(void (*callback)(void))
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  busyInterruptCallback = (void (*)())callback;
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <Powerstep01_AttachBusyInterrupt+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000464 	.word	0x20000464

08000ff4 <Powerstep01_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the powerSTEP01 Driver Instance
 **********************************************************/
uint16_t Powerstep01_ReadId(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return(powerstep01DriverInstance);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <Powerstep01_ReadId+0x14>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000048e 	.word	0x2000048e

0800100c <Powerstep01_Init>:
 * @brief Starts the Powerstep01 library
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void Powerstep01_Init(void* pInit)
{ 
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs of the just added device */
  Powerstep01_Board_GpioInit(powerstep01DriverInstance);
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <Powerstep01_Init+0x84>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fc26 	bl	800386c <Powerstep01_Board_GpioInit>
  
  if(Powerstep01_Board_SpiInit() != 0)
 8001020:	f002 fd4c 	bl	8003abc <Powerstep01_Board_SpiInit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <Powerstep01_Init+0x26>
  {
    /* Initialization Error */
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_0);
 800102a:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 800102e:	f001 f927 	bl	8002280 <Powerstep01_ErrorHandler>
  } 
  
  /* configure the step clock */
  Powerstep01_Board_StepClockInit();
 8001032:	f002 fcb1 	bl	8003998 <Powerstep01_Board_StepClockInit>
  
  /* Standby-reset deactivation */
  Powerstep01_Board_ReleaseReset(powerstep01DriverInstance);
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <Powerstep01_Init+0x84>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fd19 	bl	8003a74 <Powerstep01_Board_ReleaseReset>
  
  /* Let a delay after reset */
  Powerstep01_Board_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f002 fbf4 	bl	8003830 <Powerstep01_Board_Delay>

  if (pInit == 0)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <Powerstep01_Init+0x50>
  {
    // Set all registers to their predefined values from powerstep01_target_config.h 
    Powerstep01_SetRegisterToPredefinedValues(powerstep01DriverInstance);
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <Powerstep01_Init+0x84>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fa07 	bl	8002468 <Powerstep01_SetRegisterToPredefinedValues>
 800105a:	e006      	b.n	800106a <Powerstep01_Init+0x5e>
  }
  else
  {
    Powerstep01_SetDeviceParamsToGivenValues(powerstep01DriverInstance, pInit);
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <Powerstep01_Init+0x84>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fda7 	bl	8002bb8 <Powerstep01_SetDeviceParamsToGivenValues>
  }
  
  // Put the Powerstep01 in HiZ state
  Powerstep01_CmdHardHiZ(powerstep01DriverInstance);
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <Powerstep01_Init+0x84>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fa0c 	bl	800148e <Powerstep01_CmdHardHiZ>
  
  Powerstep01_FetchAndClearAllStatus();
 8001076:	f000 fba1 	bl	80017bc <Powerstep01_FetchAndClearAllStatus>
  
  powerstep01DriverInstance++;
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <Powerstep01_Init+0x84>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <Powerstep01_Init+0x84>)
 8001084:	801a      	strh	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000048e 	.word	0x2000048e

08001094 <Powerstep01_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one Powerstep01 is busy, otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckBusyHw(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_BUSY_PIN_GetState()))
 8001098:	f002 fd82 	bl	8003ba0 <Powerstep01_Board_BUSY_PIN_GetState>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <Powerstep01_CheckBusyHw+0x12>
  {
    return 0x01;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <Powerstep01_CheckBusyHw+0x14>
  }
	else 
  {
    return 0x00;
 80010a6:	2300      	movs	r3, #0
  }
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	bd80      	pop	{r7, pc}

080010ac <Powerstep01_CheckStatusHw>:
 * The flag pin is shared between all devices.
 * @retval One if at least one Powerstep01 has an alarm flag set ,
 * otherwise zero
 **********************************************************/
uint8_t Powerstep01_CheckStatusHw(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	if(!(Powerstep01_Board_FLAG_PIN_GetState()))
 80010b0:	f002 fd82 	bl	8003bb8 <Powerstep01_Board_FLAG_PIN_GetState>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <Powerstep01_CheckStatusHw+0x12>
  {
    return 0x01;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <Powerstep01_CheckStatusHw+0x14>
  }
	else 
  {
    return 0x00;
 80010be:	2300      	movs	r3, #0
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <Powerstep01_CmdGetParam>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
uint32_t Powerstep01_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  uint32_t spiRxData = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  if (numberOfDevices > deviceId)
 80010d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001280 <Powerstep01_CmdGetParam+0x1bc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f080 80c9 	bcs.w	8001274 <Powerstep01_CmdGetParam+0x1b0>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80010e6:	4b66      	ldr	r3, [pc, #408]	@ (8001280 <Powerstep01_CmdGetParam+0x1bc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	737b      	strb	r3, [r7, #13]
    bool itDisable = FALSE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73bb      	strb	r3, [r7, #14]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80010fa:	4b62      	ldr	r3, [pc, #392]	@ (8001284 <Powerstep01_CmdGetParam+0x1c0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <Powerstep01_CmdGetParam+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 8001106:	f002 fba7 	bl	8003858 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800110a:	2300      	movs	r3, #0
 800110c:	73bb      	strb	r3, [r7, #14]
      }
      for (loop = 0; loop < numberOfDevices; loop++)
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	e030      	b.n	8001176 <Powerstep01_CmdGetParam+0xb2>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8001114:	4a5c      	ldr	r2, [pc, #368]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4413      	add	r3, r2
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 800111e:	4a5a      	ldr	r2, [pc, #360]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	3303      	adds	r3, #3
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800112a:	4a57      	ldr	r2, [pc, #348]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4413      	add	r3, r2
 8001130:	3306      	adds	r3, #6
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001136:	4a54      	ldr	r2, [pc, #336]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4413      	add	r3, r2
 800113c:	3309      	adds	r3, #9
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
        spiRxBursts[0][loop] = 0;
 8001142:	4a52      	ldr	r2, [pc, #328]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
        spiRxBursts[1][loop] = 0;
 800114c:	4a4f      	ldr	r2, [pc, #316]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4413      	add	r3, r2
 8001152:	3303      	adds	r3, #3
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
        spiRxBursts[2][loop] = 0;
 8001158:	4a4c      	ldr	r2, [pc, #304]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4413      	add	r3, r2
 800115e:	3306      	adds	r3, #6
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
        spiRxBursts[3][loop] = 0;    
 8001164:	4a49      	ldr	r2, [pc, #292]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4413      	add	r3, r2
 800116a:	3309      	adds	r3, #9
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	3301      	adds	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b42      	ldr	r3, [pc, #264]	@ (8001280 <Powerstep01_CmdGetParam+0x1bc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4293      	cmp	r3, r2
 8001182:	d3c7      	bcc.n	8001114 <Powerstep01_CmdGetParam+0x50>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	2b1b      	cmp	r3, #27
 8001188:	bf8c      	ite	hi
 800118a:	2301      	movhi	r3, #1
 800118c:	2300      	movls	r3, #0
 800118e:	b2db      	uxtb	r3, r3
      }
      switch (param)
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12c      	bne.n	80011ee <Powerstep01_CmdGetParam+0x12a>
 8001194:	2201      	movs	r2, #1
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	409a      	lsls	r2, r3
 800119a:	4b3d      	ldr	r3, [pc, #244]	@ (8001290 <Powerstep01_CmdGetParam+0x1cc>)
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bf14      	ite	ne
 80011a2:	2301      	movne	r3, #1
 80011a4:	2300      	moveq	r3, #0
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d113      	bne.n	80011d4 <Powerstep01_CmdGetParam+0x110>
 80011ac:	f002 031a 	and.w	r3, r2, #26
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d017      	beq.n	80011ee <Powerstep01_CmdGetParam+0x12a>
      {
        case POWERSTEP01_ABS_POS: 
        case POWERSTEP01_MARK:
        case POWERSTEP01_SPEED:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
 80011c4:	f042 0220 	orr.w	r2, r2, #32
 80011c8:	b2d1      	uxtb	r1, r2
 80011ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 80011cc:	54d1      	strb	r1, [r2, r3]
          maxArgumentNbBytes = 3;
 80011ce:	2303      	movs	r3, #3
 80011d0:	73fb      	strb	r3, [r7, #15]
          break;
 80011d2:	e018      	b.n	8001206 <Powerstep01_CmdGetParam+0x142>
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
        case POWERSTEP01_STATUS:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
 80011da:	f042 0220 	orr.w	r2, r2, #32
 80011de:	b2d1      	uxtb	r1, r2
 80011e0:	4a29      	ldr	r2, [pc, #164]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	70da      	strb	r2, [r3, #3]
          maxArgumentNbBytes = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	73fb      	strb	r3, [r7, #15]
          break;
 80011ec:	e00b      	b.n	8001206 <Powerstep01_CmdGetParam+0x142>
      default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_GET_PARAM )| (param);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7b7b      	ldrb	r3, [r7, #13]
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	b2d1      	uxtb	r1, r2
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 80011fc:	4413      	add	r3, r2
 80011fe:	460a      	mov	r2, r1
 8001200:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001206:	f002 fb1e 	bl	8003846 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800120a:	2301      	movs	r3, #1
 800120c:	73bb      	strb	r3, [r7, #14]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 800120e:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <Powerstep01_CmdGetParam+0x1c0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	f47f af70 	bne.w	80010fa <Powerstep01_CmdGetParam+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	f1c3 0303 	rsb	r3, r3, #3
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	e011      	b.n	8001248 <Powerstep01_CmdGetParam+0x184>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0],
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	4a16      	ldr	r2, [pc, #88]	@ (8001288 <Powerstep01_CmdGetParam+0x1c4>)
 800122e:	1898      	adds	r0, r3, r2
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 800123a:	4413      	add	r3, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f001 feb7 	bl	8002fb0 <Powerstep01_WriteBytes>
         loop++)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3301      	adds	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d9ea      	bls.n	8001224 <Powerstep01_CmdGetParam+0x160>
                             &spiRxBursts[loop][0]);
    }
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800124e:	7b7b      	ldrb	r3, [r7, #13]
 8001250:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 8001252:	4413      	add	r3, r2
 8001254:	78db      	ldrb	r3, [r3, #3]
 8001256:	041a      	lsls	r2, r3, #16
                 (spiRxBursts[2][spiIndex] << 8) |
 8001258:	7b7b      	ldrb	r3, [r7, #13]
 800125a:	490c      	ldr	r1, [pc, #48]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 800125c:	440b      	add	r3, r1
 800125e:	799b      	ldrb	r3, [r3, #6]
 8001260:	021b      	lsls	r3, r3, #8
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001262:	4313      	orrs	r3, r2
                 (spiRxBursts[3][spiIndex]);    
 8001264:	7b7a      	ldrb	r2, [r7, #13]
 8001266:	4909      	ldr	r1, [pc, #36]	@ (800128c <Powerstep01_CmdGetParam+0x1c8>)
 8001268:	440a      	add	r2, r1
 800126a:	7a52      	ldrb	r2, [r2, #9]
    spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8001270:	f002 faf2 	bl	8003858 <Powerstep01_Board_EnableIrq>
  }

  return (spiRxData);
 8001274:	697b      	ldr	r3, [r7, #20]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000470 	.word	0x20000470
 8001284:	2000048c 	.word	0x2000048c
 8001288:	20000474 	.word	0x20000474
 800128c:	20000480 	.word	0x20000480
 8001290:	0d2021e4 	.word	0x0d2021e4

08001294 <Powerstep01_CmdGetStatus>:
 * @brief Issues PowerStep01 Get Status command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Status Register content
 *********************************************************/
uint16_t Powerstep01_CmdGetStatus(uint8_t deviceId)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	82fb      	strh	r3, [r7, #22]
  if (numberOfDevices > deviceId)
 80012a2:	4b48      	ldr	r3, [pc, #288]	@ (80013c4 <Powerstep01_CmdGetStatus+0x130>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	f080 8085 	bcs.w	80013ba <Powerstep01_CmdGetStatus+0x126>
  {
    uint32_t loop;
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80012b0:	4b44      	ldr	r3, [pc, #272]	@ (80013c4 <Powerstep01_CmdGetStatus+0x130>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b01      	subs	r3, #1
 80012be:	73bb      	strb	r3, [r7, #14]
    bool itDisable = FALSE; 
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]
 
    do
    {
      spiPreemtionByIsr = FALSE;
 80012c4:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <Powerstep01_CmdGetStatus+0x134>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <Powerstep01_CmdGetStatus+0x44>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80012d0:	f002 fac2 	bl	8003858 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e030      	b.n	8001340 <Powerstep01_CmdGetStatus+0xac>
      {
         spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80012de:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <Powerstep01_CmdGetStatus+0x138>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4413      	add	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
         spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80012e8:	4a38      	ldr	r2, [pc, #224]	@ (80013cc <Powerstep01_CmdGetStatus+0x138>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4413      	add	r3, r2
 80012ee:	3303      	adds	r3, #3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
         spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80012f4:	4a35      	ldr	r2, [pc, #212]	@ (80013cc <Powerstep01_CmdGetStatus+0x138>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4413      	add	r3, r2
 80012fa:	3306      	adds	r3, #6
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
         spiTxBursts[3][loop] = POWERSTEP01_NOP;
 8001300:	4a32      	ldr	r2, [pc, #200]	@ (80013cc <Powerstep01_CmdGetStatus+0x138>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4413      	add	r3, r2
 8001306:	3309      	adds	r3, #9
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
         spiRxBursts[0][loop] = 0;
 800130c:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4413      	add	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
         spiRxBursts[1][loop] = 0;
 8001316:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4413      	add	r3, r2
 800131c:	3303      	adds	r3, #3
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
         spiRxBursts[2][loop] = 0;
 8001322:	4a2b      	ldr	r2, [pc, #172]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4413      	add	r3, r2
 8001328:	3306      	adds	r3, #6
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
         spiRxBursts[3][loop] = 0;       
 800132e:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4413      	add	r3, r2
 8001334:	3309      	adds	r3, #9
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	3301      	adds	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <Powerstep01_CmdGetStatus+0x130>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4293      	cmp	r3, r2
 800134c:	d3c7      	bcc.n	80012de <Powerstep01_CmdGetStatus+0x4a>
      }
      spiTxBursts[0][spiIndex] = POWERSTEP01_GET_STATUS;
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	4a1e      	ldr	r2, [pc, #120]	@ (80013cc <Powerstep01_CmdGetStatus+0x138>)
 8001352:	21d0      	movs	r1, #208	@ 0xd0
 8001354:	54d1      	strb	r1, [r2, r3]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8001356:	f002 fa76 	bl	8003846 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <Powerstep01_CmdGetStatus+0x134>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ad      	bne.n	80012c4 <Powerstep01_CmdGetStatus+0x30>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e011      	b.n	8001392 <Powerstep01_CmdGetStatus+0xfe>
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <Powerstep01_CmdGetStatus+0x138>)
 8001378:	1898      	adds	r0, r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 8001384:	4413      	add	r3, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f001 fe12 	bl	8002fb0 <Powerstep01_WriteBytes>
    for (loop = 0; loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + POWERSTEP01_RSP_NB_BYTES_GET_STATUS; loop++)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d9ea      	bls.n	800136e <Powerstep01_CmdGetStatus+0xda>
    }
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 800139c:	4413      	add	r3, r2
 800139e:	78db      	ldrb	r3, [r3, #3]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	4909      	ldr	r1, [pc, #36]	@ (80013d0 <Powerstep01_CmdGetStatus+0x13c>)
 80013aa:	440b      	add	r3, r1
 80013ac:	799b      	ldrb	r3, [r3, #6]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	82fb      	strh	r3, [r7, #22]
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();    
 80013b6:	f002 fa4f 	bl	8003858 <Powerstep01_Board_EnableIrq>
  }
  return (status);
 80013ba:	8afb      	ldrh	r3, [r7, #22]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000470 	.word	0x20000470
 80013c8:	2000048c 	.word	0x2000048c
 80013cc:	20000474 	.word	0x20000474
 80013d0:	20000480 	.word	0x20000480

080013d4 <Powerstep01_CmdGoHome>:
 * @brief Issues PowerStep01 Go Home command (Shortest path to zero position)
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoHome(uint8_t deviceId)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
   Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_HOME, 0);   
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2200      	movs	r2, #0
 80013e2:	2170      	movs	r1, #112	@ 0x70
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 ff77 	bl	80022d8 <Powerstep01_SendCommand>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <Powerstep01_CmdGoMark>:
 * @brief Issues PowerStep01 Go Mark command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoMark(uint8_t deviceId)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_MARK, 0);     
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2200      	movs	r2, #0
 8001400:	2178      	movs	r1, #120	@ 0x78
 8001402:	4618      	mov	r0, r3
 8001404:	f000 ff68 	bl	80022d8 <Powerstep01_SendCommand>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <Powerstep01_CmdGoTo>:
 * @param[in] abs_pos absolute position in steps in agreement
 * with the step mode where requested to move
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoTo(uint8_t deviceId, int32_t abs_pos)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_GO_TO, abs_pos);  
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2160      	movs	r1, #96	@ 0x60
 8001422:	4618      	mov	r0, r3
 8001424:	f000 ff58 	bl	80022d8 <Powerstep01_SendCommand>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <Powerstep01_CmdGoToDir>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdGoToDir(uint8_t deviceId, 
                            motorDir_t direction,
                            int32_t abs_pos)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	603a      	str	r2, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	460b      	mov	r3, r1
 800143e:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 ff43 	bl	80022d8 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_TO_DIR | 
                          (uint8_t)direction, abs_pos);  
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <Powerstep01_CmdGoUntil>:
 *********************************************************/
void Powerstep01_CmdGoUntil(uint8_t deviceId, 
                           motorAction_t action, 
                           motorDir_t direction, 
                           uint32_t speed)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	460b      	mov	r3, r1
 8001468:	71bb      	strb	r3, [r7, #6]
 800146a:	4613      	mov	r3, r2
 800146c:	717b      	strb	r3, [r7, #5]
  Powerstep01_SendCommand(deviceId,
 800146e:	79ba      	ldrb	r2, [r7, #6]
 8001470:	797b      	ldrb	r3, [r7, #5]
 8001472:	4313      	orrs	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f063 037d 	orn	r3, r3, #125	@ 0x7d
 800147a:	b2d9      	uxtb	r1, r3
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 ff29 	bl	80022d8 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_GO_UNTIL | (uint8_t)action | (uint8_t)direction,
                          speed); 
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <Powerstep01_CmdHardHiZ>:
 * When the motor is stopped, a HardHiZ command forces the bridges 
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 *********************************************************/
void Powerstep01_CmdHardHiZ(uint8_t deviceId)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_HIZ, 0);    
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2200      	movs	r2, #0
 800149c:	21a8      	movs	r1, #168	@ 0xa8
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 ff1a 	bl	80022d8 <Powerstep01_SendCommand>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Powerstep01_CmdHardStop>:
 * forces the bridges to exit high impedance state; no motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdHardStop(uint8_t deviceId)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_HARD_STOP, 0);         
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2200      	movs	r2, #0
 80014ba:	21b8      	movs	r1, #184	@ 0xb8
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 ff0b 	bl	80022d8 <Powerstep01_SendCommand>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <Powerstep01_CmdMove>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdMove(uint8_t deviceId, 
                         motorDir_t direction, 
                         uint32_t n_step)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	603a      	str	r2, [r7, #0]
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	460b      	mov	r3, r1
 80014d8:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fef6 	bl	80022d8 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_MOVE | 
                          (uint8_t)direction, n_step);  
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <Powerstep01_CmdNop>:
 * @brief Issues PowerStep01 NOP command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdNop(uint8_t deviceId)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  /* Send NOP operation code to PowerStep01 */
  Powerstep01_SendCommand(deviceId, POWERSTEP01_NOP, 0);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fee7 	bl	80022d8 <Powerstep01_SendCommand>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <Powerstep01_CmdReleaseSw>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdReleaseSw(uint8_t deviceId, 
                             motorAction_t action, 
                             motorDir_t direction)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	460b      	mov	r3, r1
 800151e:	71bb      	strb	r3, [r7, #6]
 8001520:	4613      	mov	r3, r2
 8001522:	717b      	strb	r3, [r7, #5]
   Powerstep01_SendCommand(deviceId, 
 8001524:	79ba      	ldrb	r2, [r7, #6]
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	4313      	orrs	r3, r2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f063 036d 	orn	r3, r3, #109	@ 0x6d
 8001530:	b2d9      	uxtb	r1, r3
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2200      	movs	r2, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fece 	bl	80022d8 <Powerstep01_SendCommand>
                           (uint8_t)POWERSTEP01_RELEASE_SW | 
                           (uint8_t)action | 
                           (uint8_t)direction, 
                           0); 
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Powerstep01_CmdResetDevice>:
 * @brief Issues PowerStep01 Reset Device command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetDevice(uint8_t deviceId)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_DEVICE, 0);         
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2200      	movs	r2, #0
 8001552:	21c0      	movs	r1, #192	@ 0xc0
 8001554:	4618      	mov	r0, r3
 8001556:	f000 febf 	bl	80022d8 <Powerstep01_SendCommand>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <Powerstep01_CmdResetPos>:
 * @brief Issues PowerStep01 Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 *********************************************************/
void Powerstep01_CmdResetPos(uint8_t deviceId)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_RESET_POS, 0);       
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2200      	movs	r2, #0
 8001570:	21d8      	movs	r1, #216	@ 0xd8
 8001572:	4618      	mov	r0, r3
 8001574:	f000 feb0 	bl	80022d8 <Powerstep01_SendCommand>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <Powerstep01_CmdRun>:
 * @retval None
 *********************************************************/
void Powerstep01_CmdRun(uint8_t deviceId, 
                       motorDir_t direction,
                       uint32_t speed)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	603a      	str	r2, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	460b      	mov	r3, r1
 800158e:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001596:	b2d9      	uxtb	r1, r3
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fe9b 	bl	80022d8 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_RUN|(uint8_t)direction,
                          speed);
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <Powerstep01_CmdSetParam>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Value to set in the register
 * @retval None
 *********************************************************/
void Powerstep01_CmdSetParam(uint8_t deviceId, uint32_t param, uint32_t value)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	73fb      	strb	r3, [r7, #15]

  if (numberOfDevices > deviceId)
 80015ba:	4b61      	ldr	r3, [pc, #388]	@ (8001740 <Powerstep01_CmdSetParam+0x194>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	f080 80b7 	bcs.w	8001736 <Powerstep01_CmdSetParam+0x18a>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	74fb      	strb	r3, [r7, #19]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80015cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <Powerstep01_CmdSetParam+0x194>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3b01      	subs	r3, #1
 80015da:	747b      	strb	r3, [r7, #17]
    bool itDisable = FALSE;
 80015dc:	2300      	movs	r3, #0
 80015de:	74bb      	strb	r3, [r7, #18]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 80015e0:	4b58      	ldr	r3, [pc, #352]	@ (8001744 <Powerstep01_CmdSetParam+0x198>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 80015e6:	7cbb      	ldrb	r3, [r7, #18]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <Powerstep01_CmdSetParam+0x48>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 80015ec:	f002 f934 	bl	8003858 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	74bb      	strb	r3, [r7, #18]
      }  
      for (loop = 0;loop < numberOfDevices; loop++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e019      	b.n	800162e <Powerstep01_CmdSetParam+0x82>
      {
        spiTxBursts[0][loop] = POWERSTEP01_NOP;
 80015fa:	4a53      	ldr	r2, [pc, #332]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
        spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8001604:	4a50      	ldr	r2, [pc, #320]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4413      	add	r3, r2
 800160a:	3303      	adds	r3, #3
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
        spiTxBursts[2][loop] = POWERSTEP01_NOP;
 8001610:	4a4d      	ldr	r2, [pc, #308]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	3306      	adds	r3, #6
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
        spiTxBursts[3][loop] = POWERSTEP01_NOP;
 800161c:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	3309      	adds	r3, #9
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
      for (loop = 0;loop < numberOfDevices; loop++)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <Powerstep01_CmdSetParam+0x194>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	4293      	cmp	r3, r2
 800163a:	d3de      	bcc.n	80015fa <Powerstep01_CmdSetParam+0x4e>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b1a      	cmp	r3, #26
 8001640:	bf8c      	ite	hi
 8001642:	2301      	movhi	r3, #1
 8001644:	2300      	movls	r3, #0
 8001646:	b2db      	uxtb	r3, r3
      }
      switch (param)
 8001648:	2b00      	cmp	r3, #0
 800164a:	d13e      	bne.n	80016ca <Powerstep01_CmdSetParam+0x11e>
 800164c:	2201      	movs	r2, #1
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	409a      	lsls	r2, r3
 8001652:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <Powerstep01_CmdSetParam+0x1a0>)
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d120      	bne.n	80016a6 <Powerstep01_CmdSetParam+0xfa>
 8001664:	f002 030a 	and.w	r3, r2, #10
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d029      	beq.n	80016ca <Powerstep01_CmdSetParam+0x11e>
      {
        case POWERSTEP01_ABS_POS: ;
        case POWERSTEP01_MARK:
          spiTxBursts[0][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 8001676:	7c7b      	ldrb	r3, [r7, #17]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	b2d1      	uxtb	r1, r2
 800167c:	4a32      	ldr	r2, [pc, #200]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 800167e:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0c1a      	lsrs	r2, r3, #16
 8001684:	7c7b      	ldrb	r3, [r7, #17]
 8001686:	b2d1      	uxtb	r1, r2
 8001688:	4a2f      	ldr	r2, [pc, #188]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 800168a:	4413      	add	r3, r2
 800168c:	460a      	mov	r2, r1
 800168e:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0a1a      	lsrs	r2, r3, #8
 8001694:	7c7b      	ldrb	r3, [r7, #17]
 8001696:	b2d1      	uxtb	r1, r2
 8001698:	4a2b      	ldr	r2, [pc, #172]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 800169a:	4413      	add	r3, r2
 800169c:	460a      	mov	r2, r1
 800169e:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 3;
 80016a0:	2303      	movs	r3, #3
 80016a2:	74fb      	strb	r3, [r7, #19]
          break;
 80016a4:	e01a      	b.n	80016dc <Powerstep01_CmdSetParam+0x130>
        case POWERSTEP01_MIN_SPEED:
        case POWERSTEP01_FS_SPD:
        case POWERSTEP01_INT_SPD:
        case POWERSTEP01_CONFIG:
        case POWERSTEP01_GATECFG1:
          spiTxBursts[1][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 80016a6:	7c7b      	ldrb	r3, [r7, #17]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	b2d1      	uxtb	r1, r2
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 80016ae:	4413      	add	r3, r2
 80016b0:	460a      	mov	r2, r1
 80016b2:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	0a1a      	lsrs	r2, r3, #8
 80016b8:	7c7b      	ldrb	r3, [r7, #17]
 80016ba:	b2d1      	uxtb	r1, r2
 80016bc:	4a22      	ldr	r2, [pc, #136]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 80016be:	4413      	add	r3, r2
 80016c0:	460a      	mov	r2, r1
 80016c2:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	74fb      	strb	r3, [r7, #19]
          break;
 80016c8:	e008      	b.n	80016dc <Powerstep01_CmdSetParam+0x130>
        default:
          spiTxBursts[2][spiIndex] = ((uint8_t)POWERSTEP01_SET_PARAM )| (param);
 80016ca:	7c7b      	ldrb	r3, [r7, #17]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	b2d1      	uxtb	r1, r2
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	719a      	strb	r2, [r3, #6]
          maxArgumentNbBytes = 1;
 80016d8:	2301      	movs	r3, #1
 80016da:	74fb      	strb	r3, [r7, #19]
      }
      spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80016dc:	7c7b      	ldrb	r3, [r7, #17]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	b2d1      	uxtb	r1, r2
 80016e2:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 80016e4:	4413      	add	r3, r2
 80016e6:	460a      	mov	r2, r1
 80016e8:	725a      	strb	r2, [r3, #9]
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 80016ea:	f002 f8ac 	bl	8003846 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	74bb      	strb	r3, [r7, #18]
    } while (spiPreemtionByIsr); // check pre-emption by ISR  
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <Powerstep01_CmdSetParam+0x198>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f af71 	bne.w	80015e0 <Powerstep01_CmdSetParam+0x34>
    /* SPI transfer */
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes;
 80016fe:	7cfb      	ldrb	r3, [r7, #19]
 8001700:	f1c3 0303 	rsb	r3, r3, #3
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e011      	b.n	800172c <Powerstep01_CmdSetParam+0x180>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
         loop++)
    {
      Powerstep01_WriteBytes(&spiTxBursts[loop][0],&spiRxBursts[loop][0]);
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <Powerstep01_CmdSetParam+0x19c>)
 8001712:	1898      	adds	r0, r3, r2
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	4a0c      	ldr	r2, [pc, #48]	@ (8001750 <Powerstep01_CmdSetParam+0x1a4>)
 800171e:	4413      	add	r3, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f001 fc45 	bl	8002fb0 <Powerstep01_WriteBytes>
         loop++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d9ea      	bls.n	8001708 <Powerstep01_CmdSetParam+0x15c>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 8001732:	f002 f891 	bl	8003858 <Powerstep01_Board_EnableIrq>
  }
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000470 	.word	0x20000470
 8001744:	2000048c 	.word	0x2000048c
 8001748:	20000474 	.word	0x20000474
 800174c:	052021e4 	.word	0x052021e4
 8001750:	20000480 	.word	0x20000480

08001754 <Powerstep01_CmdSoftHiZ>:
 * to enter high impedance state.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftHiZ(uint8_t deviceId)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_HIZ, 0);           
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2200      	movs	r2, #0
 8001762:	21a0      	movs	r1, #160	@ 0xa0
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fdb7 	bl	80022d8 <Powerstep01_SendCommand>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <Powerstep01_CmdSoftStop>:
 * No motion is performed.
 * This command can be given anytime and is immediately executed.
 * This command keeps the BUSY flag low until the motor is stopped.
 *********************************************************/
void Powerstep01_CmdSoftStop(uint8_t deviceId)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_SendCommand(deviceId, POWERSTEP01_SOFT_STOP, 0);         
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2200      	movs	r2, #0
 8001780:	21b0      	movs	r1, #176	@ 0xb0
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fda8 	bl	80022d8 <Powerstep01_SendCommand>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <Powerstep01_CmdStepClock>:
 * @param[in] direction Movement direction (FORWARD, BACKWARD)
 * @retval None
 *********************************************************/
void Powerstep01_CmdStepClock(uint8_t deviceId,
                             motorDir_t direction)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
  Powerstep01_SendCommand(deviceId, 
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	f043 0358 	orr.w	r3, r3, #88	@ 0x58
 80017a6:	b2d9      	uxtb	r1, r3
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2200      	movs	r2, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fd93 	bl	80022d8 <Powerstep01_SendCommand>
                          (uint8_t)POWERSTEP01_STEP_CLOCK | (uint8_t)direction,
                          0);  
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <Powerstep01_FetchAndClearAllStatus>:
 * provided there is no other calls to functions which 
 * use the SPI in between.
 * @retval None
 *********************************************************/
void Powerstep01_FetchAndClearAllStatus(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  uint8_t loop;

  for (loop = 0; loop < numberOfDevices; loop++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	e028      	b.n	800181a <Powerstep01_FetchAndClearAllStatus+0x5e>
  {
     spiTxBursts[0][loop] = POWERSTEP01_GET_STATUS;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017cc:	21d0      	movs	r1, #208	@ 0xd0
 80017ce:	54d1      	strb	r1, [r2, r3]
     spiTxBursts[1][loop] = POWERSTEP01_NOP;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017d4:	4413      	add	r3, r2
 80017d6:	2200      	movs	r2, #0
 80017d8:	70da      	strb	r2, [r3, #3]
     spiTxBursts[2][loop] = POWERSTEP01_NOP;
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4a20      	ldr	r2, [pc, #128]	@ (8001860 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017de:	4413      	add	r3, r2
 80017e0:	2200      	movs	r2, #0
 80017e2:	719a      	strb	r2, [r3, #6]
     spiTxBursts[3][loop] = POWERSTEP01_NOP;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001860 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 80017e8:	4413      	add	r3, r2
 80017ea:	2200      	movs	r2, #0
 80017ec:	725a      	strb	r2, [r3, #9]
     spiRxBursts[0][loop] = 0;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	54d1      	strb	r1, [r2, r3]
     spiRxBursts[1][loop] = 0;
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 80017fa:	4413      	add	r3, r2
 80017fc:	2200      	movs	r2, #0
 80017fe:	70da      	strb	r2, [r3, #3]
     spiRxBursts[2][loop] = 0;
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	4a18      	ldr	r2, [pc, #96]	@ (8001864 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 8001804:	4413      	add	r3, r2
 8001806:	2200      	movs	r2, #0
 8001808:	719a      	strb	r2, [r3, #6]
     spiRxBursts[3][loop] = 0;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 800180e:	4413      	add	r3, r2
 8001810:	2200      	movs	r2, #0
 8001812:	725a      	strb	r2, [r3, #9]
  for (loop = 0; loop < numberOfDevices; loop++)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	3301      	adds	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <Powerstep01_FetchAndClearAllStatus+0xac>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3d0      	bcc.n	80017c8 <Powerstep01_FetchAndClearAllStatus+0xc>
  }
  for (loop = 0; 
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e011      	b.n	8001850 <Powerstep01_FetchAndClearAllStatus+0x94>
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
              POWERSTEP01_RSP_NB_BYTES_GET_STATUS; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <Powerstep01_FetchAndClearAllStatus+0xa4>)
 8001836:	1898      	adds	r0, r3, r2
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <Powerstep01_FetchAndClearAllStatus+0xa8>)
 8001842:	4413      	add	r3, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f001 fbb3 	bl	8002fb0 <Powerstep01_WriteBytes>
       loop++)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	3301      	adds	r3, #1
 800184e:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_NB_BYTES_GET_STATUS + 
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d9ea      	bls.n	800182c <Powerstep01_FetchAndClearAllStatus+0x70>
  }
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000474 	.word	0x20000474
 8001864:	20000480 	.word	0x20000480
 8001868:	20000470 	.word	0x20000470

0800186c <Powerstep01_GetFetchedStatus>:
 * no other calls to functions which use the SPI.
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Last fetched value of the STATUS register
 *********************************************************/
uint16_t Powerstep01_GetFetchedStatus(uint8_t deviceId)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	81fb      	strh	r3, [r7, #14]
  if (numberOfDevices > deviceId)
 800187a:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <Powerstep01_GetFetchedStatus+0x58>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	429a      	cmp	r2, r3
 8001884:	d216      	bcs.n	80018b4 <Powerstep01_GetFetchedStatus+0x48>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <Powerstep01_GetFetchedStatus+0x58>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	737b      	strb	r3, [r7, #13]
    status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <Powerstep01_GetFetchedStatus+0x5c>)
 800189a:	4413      	add	r3, r2
 800189c:	78db      	ldrb	r3, [r3, #3]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	7b7b      	ldrb	r3, [r7, #13]
 80018a6:	4908      	ldr	r1, [pc, #32]	@ (80018c8 <Powerstep01_GetFetchedStatus+0x5c>)
 80018a8:	440b      	add	r3, r1
 80018aa:	799b      	ldrb	r3, [r3, #6]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	81fb      	strh	r3, [r7, #14]
  }
  return (status);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000470 	.word	0x20000470
 80018c8:	20000480 	.word	0x20000480

080018cc <Powerstep01_GetMotorHandle>:
/******************************************************//**
 * @brief Return motor handle (pointer to the powerSTEP01 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* Powerstep01_GetMotorHandle(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return (&powerstep01Drv);
 80018d0:	4b02      	ldr	r3, [pc, #8]	@ (80018dc <Powerstep01_GetMotorHandle+0x10>)
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	20000000 	.word	0x20000000

080018e0 <Powerstep01_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval POWERSTEP01_FW_VERSION
 **********************************************************/
uint32_t Powerstep01_GetFwVersion(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return (POWERSTEP01_FW_VERSION);
 80018e4:	4b02      	ldr	r3, [pc, #8]	@ (80018f0 <Powerstep01_GetFwVersion+0x10>)
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	00010500 	.word	0x00010500

080018f4 <Powerstep01_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t Powerstep01_GetMark(uint8_t deviceId)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_MARK));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2103      	movs	r1, #3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fbde 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001908:	4603      	mov	r3, r0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fc82 	bl	8002214 <Powerstep01_ConvertPosition>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <Powerstep01_GetNbDevices>:
/******************************************************//**
 * @brief Return the number of devices in the daisy chain 
 * @retval number of devices from 1 to MAX_NUMBER_OF_DEVICES
 *********************************************************/
uint8_t Powerstep01_GetNbDevices(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
    return (numberOfDevices);
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <Powerstep01_GetNbDevices+0x14>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	20000470 	.word	0x20000470

08001934 <Powerstep01_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param PowerStep01 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float Powerstep01_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2116      	movs	r1, #22
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fbbd 	bl	80010c4 <Powerstep01_CmdGetParam>
 800194a:	4603      	mov	r3, r0
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	74fb      	strb	r3, [r7, #19]
  uint32_t registerValue = Powerstep01_CmdGetParam(deviceId, param);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fbaf 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001966:	60f8      	str	r0, [r7, #12]
  float value;
  switch (param)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	2b14      	cmp	r3, #20
 800196e:	f200 8090 	bhi.w	8001a92 <Powerstep01_GetAnalogValue+0x15e>
 8001972:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <Powerstep01_GetAnalogValue+0x44>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	080019cd 	.word	0x080019cd
 800197c:	08001a93 	.word	0x08001a93
 8001980:	080019cd 	.word	0x080019cd
 8001984:	080019ed 	.word	0x080019ed
 8001988:	080019e1 	.word	0x080019e1
 800198c:	080019e1 	.word	0x080019e1
 8001990:	080019f9 	.word	0x080019f9
 8001994:	08001a05 	.word	0x08001a05
 8001998:	08001a51 	.word	0x08001a51
 800199c:	08001a51 	.word	0x08001a51
 80019a0:	08001a51 	.word	0x08001a51
 80019a4:	08001a51 	.word	0x08001a51
 80019a8:	08001a2d 	.word	0x08001a2d
 80019ac:	08001a6f 	.word	0x08001a6f
 80019b0:	08001a75 	.word	0x08001a75
 80019b4:	08001a75 	.word	0x08001a75
 80019b8:	08001a39 	.word	0x08001a39
 80019bc:	08001a93 	.word	0x08001a93
 80019c0:	08001a45 	.word	0x08001a45
 80019c4:	08001a45 	.word	0x08001a45
 80019c8:	08001a19 	.word	0x08001a19
  {
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      value = (float) Powerstep01_ConvertPosition(registerValue);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fc21 	bl	8002214 <Powerstep01_ConvertPosition>
 80019d2:	ee07 0a90 	vmov	s15, r0
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 80019de:	e061      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      value = Powerstep01_AccDec_RegVal_to_Steps_s2(registerValue);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f001 fb27 	bl	8003034 <Powerstep01_AccDec_RegVal_to_Steps_s2>
 80019e6:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80019ea:	e05b      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_SPEED:
      value = Powerstep01_Speed_RegVal_to_Steps_s(registerValue);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f001 fca3 	bl	8003338 <Powerstep01_Speed_RegVal_to_Steps_s>
 80019f2:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 80019f6:	e055      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MAX_SPEED:
      value = Powerstep01_MaxSpd_RegVal_to_Steps_s(registerValue);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f001 fc55 	bl	80032a8 <Powerstep01_MaxSpd_RegVal_to_Steps_s>
 80019fe:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a02:	e04f      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_MIN_SPEED:
      registerValue &= POWERSTEP01_MIN_SPEED_MASK;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0a:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_MinSpd_RegVal_to_Steps_s(registerValue);
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f001 fc7d 	bl	800330c <Powerstep01_MinSpd_RegVal_to_Steps_s>
 8001a12:	ed87 0a05 	vstr	s0, [r7, #20]
      break;      
 8001a16:	e045      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_FS_SPD:
      registerValue &= POWERSTEP01_FS_SPD_MASK;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1e:	60fb      	str	r3, [r7, #12]
      value = Powerstep01_FSSpd_RegVal_to_Steps_s(registerValue);
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f001 fb69 	bl	80030f8 <Powerstep01_FSSpd_RegVal_to_Steps_s>
 8001a26:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a2a:	e03b      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_INT_SPD:
      value = Powerstep01_IntSpd_RegVal_to_Steps_s(registerValue);
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f001 fb9b 	bl	8003168 <Powerstep01_IntSpd_RegVal_to_Steps_s>
 8001a32:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a36:	e035      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_K_THERM:
      value = Powerstep01_KTherm_RegVal_to_Comp(registerValue);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f001 fbcd 	bl	80031d8 <Powerstep01_KTherm_RegVal_to_Comp>
 8001a3e:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a42:	e02f      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      value = Powerstep01_StallOcd_RegVal_to_Th(registerValue);
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f001 fcb1 	bl	80033ac <Powerstep01_StallOcd_RegVal_to_Th>
 8001a4a:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a4e:	e029      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode!=FALSE)  value = Powerstep01_Kval_RegVal_to_Perc(registerValue);
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <Powerstep01_GetAnalogValue+0x12e>
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f001 fbf6 	bl	8003248 <Powerstep01_Kval_RegVal_to_Perc>
 8001a5c:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
      break;
 8001a60:	e020      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tval_RegVal_to_RefVoltage(registerValue);     
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f001 fcde 	bl	8003424 <Powerstep01_Tval_RegVal_to_RefVoltage>
 8001a68:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a6c:	e01a      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d016      	beq.n	8001aa2 <Powerstep01_GetAnalogValue+0x16e>
      {
        break;
      }      
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode!=FALSE) value = Powerstep01_BEMFslope_RegVal_to_Perc(registerValue);
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <Powerstep01_GetAnalogValue+0x152>
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f001 fb0e 	bl	800309c <Powerstep01_BEMFslope_RegVal_to_Perc>
 8001a80:	ed87 0a05 	vstr	s0, [r7, #20]
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
      break;
 8001a84:	e00e      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
      else value = Powerstep01_Tmin_RegVal_to_Time(registerValue);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f001 fd01 	bl	800348e <Powerstep01_Tmin_RegVal_to_Time>
 8001a8c:	ed87 0a05 	vstr	s0, [r7, #20]
      break;
 8001a90:	e008      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
    default:
      value = (float) registerValue;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001aa0:	e000      	b.n	8001aa4 <Powerstep01_GetAnalogValue+0x170>
        break;
 8001aa2:	bf00      	nop
  }
  return value;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	ee07 3a90 	vmov	s15, r3
}
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <Powerstep01_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t Powerstep01_GetPosition(uint8_t deviceId)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  return Powerstep01_ConvertPosition(Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fafe 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fba2 	bl	8002214 <Powerstep01_ConvertPosition>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <Powerstep01_IsDeviceBusy>:
 * by reading the Busy flag bit ot its status Register
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval true if device is busy, false zero
 *********************************************************/
bool Powerstep01_IsDeviceBusy(uint8_t deviceId)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if(!(Powerstep01_CmdGetStatus(deviceId) & POWERSTEP01_STATUS_BUSY)) 
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fbd4 	bl	8001294 <Powerstep01_CmdGetStatus>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <Powerstep01_IsDeviceBusy+0x20>
  {
    return TRUE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <Powerstep01_IsDeviceBusy+0x22>
  }
  else 
  {
    return FALSE;
 8001afa:	2300      	movs	r3, #0
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Powerstep01_QueueCommands>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void Powerstep01_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	603a      	str	r2, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	460b      	mov	r3, r1
 8001b12:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 8001b14:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <Powerstep01_QueueCommands+0xd8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d257      	bcs.n	8001bd0 <Powerstep01_QueueCommands+0xcc>
  {
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <Powerstep01_QueueCommands+0xd8>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
    
    switch (command & DAISY_CHAIN_COMMAND_MASK)
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8001b36:	2b8a      	cmp	r3, #138	@ 0x8a
 8001b38:	d01a      	beq.n	8001b70 <Powerstep01_QueueCommands+0x6c>
 8001b3a:	2b8a      	cmp	r3, #138	@ 0x8a
 8001b3c:	dc35      	bgt.n	8001baa <Powerstep01_QueueCommands+0xa6>
 8001b3e:	2b82      	cmp	r3, #130	@ 0x82
 8001b40:	d016      	beq.n	8001b70 <Powerstep01_QueueCommands+0x6c>
 8001b42:	2b82      	cmp	r3, #130	@ 0x82
 8001b44:	dc31      	bgt.n	8001baa <Powerstep01_QueueCommands+0xa6>
 8001b46:	2b40      	cmp	r3, #64	@ 0x40
 8001b48:	d012      	beq.n	8001b70 <Powerstep01_QueueCommands+0x6c>
 8001b4a:	2b40      	cmp	r3, #64	@ 0x40
 8001b4c:	db2d      	blt.n	8001baa <Powerstep01_QueueCommands+0xa6>
 8001b4e:	2b68      	cmp	r3, #104	@ 0x68
 8001b50:	dc2b      	bgt.n	8001baa <Powerstep01_QueueCommands+0xa6>
 8001b52:	2b50      	cmp	r3, #80	@ 0x50
 8001b54:	db29      	blt.n	8001baa <Powerstep01_QueueCommands+0xa6>
 8001b56:	3b50      	subs	r3, #80	@ 0x50
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <Powerstep01_QueueCommands+0xdc>)
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <Powerstep01_QueueCommands+0xa6>
      case POWERSTEP01_MOVE: ;
      case POWERSTEP01_GO_TO: ;
      case POWERSTEP01_GO_TO_DIR: ;
      case POWERSTEP01_GO_UNTIL: ;
      case POWERSTEP01_GO_UNTIL_ACT_CPY:
       spiTxBursts[0][spiIndex] = command;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	491c      	ldr	r1, [pc, #112]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001b74:	79ba      	ldrb	r2, [r7, #6]
 8001b76:	54ca      	strb	r2, [r1, r3]
       spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	141a      	asrs	r2, r3, #16
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b2d1      	uxtb	r1, r2
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001b82:	4413      	add	r3, r2
 8001b84:	460a      	mov	r2, r1
 8001b86:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	121a      	asrs	r2, r3, #8
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001b92:	4413      	add	r3, r2
 8001b94:	460a      	mov	r2, r1
 8001b96:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	b2d1      	uxtb	r1, r2
 8001b9e:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	725a      	strb	r2, [r3, #9]
       break;
 8001ba6:	bf00      	nop
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
       spiTxBursts[3][spiIndex] = command;
    }
  }
}
 8001ba8:	e012      	b.n	8001bd0 <Powerstep01_QueueCommands+0xcc>
       spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	54d1      	strb	r1, [r2, r3]
       spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]
       spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	719a      	strb	r2, [r3, #6]
       spiTxBursts[3][spiIndex] = command;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4a06      	ldr	r2, [pc, #24]	@ (8001be4 <Powerstep01_QueueCommands+0xe0>)
 8001bca:	4413      	add	r3, r2
 8001bcc:	79ba      	ldrb	r2, [r7, #6]
 8001bce:	725a      	strb	r2, [r3, #9]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000470 	.word	0x20000470
 8001be0:	01010001 	.word	0x01010001
 8001be4:	20000474 	.word	0x20000474

08001be8 <Powerstep01_ReadStatusRegister>:
 * @retval Status register value
 * @note The status register flags are not cleared 
 * at the difference with Powerstep01_CmdGetStatus()
 **********************************************************/
uint16_t Powerstep01_ReadStatusRegister(uint8_t deviceId)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  return (Powerstep01_CmdGetParam(deviceId, POWERSTEP01_STATUS));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	211b      	movs	r1, #27
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fa64 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29b      	uxth	r3, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <Powerstep01_ReleaseReset>:
 * @brief  Releases the Powerstep01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_ReleaseReset(uint8_t deviceId)
{ 
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_ReleaseReset(deviceId); 
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 ff2d 	bl	8003a74 <Powerstep01_Board_ReleaseReset>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <Powerstep01_Reset>:
 * @brief  Resets the Powerstep01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Reset(uint8_t deviceId)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  Powerstep01_Board_Reset(deviceId); 
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 ff32 	bl	8003a98 <Powerstep01_Board_Reset>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <Powerstep01_SelectStepMode>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] stepMode from full step to 1/128 microstep as specified in enum motorStepMode_t
 * @retval TRUE if successfull, FALSE if failure
 **********************************************************/
bool Powerstep01_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	460a      	mov	r2, r1
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  powerstep01_StepSel_t powerstep01StepMode;

  switch (stepMode)
 8001c4c:	79bb      	ldrb	r3, [r7, #6]
 8001c4e:	2b07      	cmp	r3, #7
 8001c50:	d82a      	bhi.n	8001ca8 <Powerstep01_SelectStepMode+0x6c>
 8001c52:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <Powerstep01_SelectStepMode+0x1c>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c79 	.word	0x08001c79
 8001c5c:	08001c7f 	.word	0x08001c7f
 8001c60:	08001c85 	.word	0x08001c85
 8001c64:	08001c8b 	.word	0x08001c8b
 8001c68:	08001c91 	.word	0x08001c91
 8001c6c:	08001c97 	.word	0x08001c97
 8001c70:	08001c9d 	.word	0x08001c9d
 8001c74:	08001ca3 	.word	0x08001ca3
  {
    case STEP_MODE_FULL:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c7c:	e016      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_HALF:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_2;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
      break;    
 8001c82:	e013      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_4:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_4;
 8001c84:	2302      	movs	r3, #2
 8001c86:	73fb      	strb	r3, [r7, #15]
      break;        
 8001c88:	e010      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_8:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_8;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c8e:	e00d      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_16:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_16;
 8001c90:	2304      	movs	r3, #4
 8001c92:	73fb      	strb	r3, [r7, #15]
      break;        
 8001c94:	e00a      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_32:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_32;
 8001c96:	2305      	movs	r3, #5
 8001c98:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9a:	e007      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_64:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_64;
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca0:	e004      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    case STEP_MODE_1_128:
      powerstep01StepMode = POWERSTEP01_STEP_SEL_1_128;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca6:	e001      	b.n	8001cac <Powerstep01_SelectStepMode+0x70>
    default:
      return FALSE;     
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e01c      	b.n	8001ce6 <Powerstep01_SelectStepMode+0xaa>
  }
  
  /* Set the powerstep01 in HiZ state */
  Powerstep01_CmdHardHiZ(deviceId);  
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fbed 	bl	800148e <Powerstep01_CmdHardHiZ>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE)) ;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	2116      	movs	r1, #22
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fa03 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f023 0307 	bic.w	r3, r3, #7
 8001cc6:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE, stepModeRegister | (uint8_t)powerstep01StepMode);
 8001cc8:	7bba      	ldrb	r2, [r7, #14]
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2116      	movs	r1, #22
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fc68 	bl	80015ac <Powerstep01_CmdSetParam>

  /* Reset abs pos register */
  Powerstep01_CmdResetPos(deviceId);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fc3f 	bl	8001562 <Powerstep01_CmdResetPos>
  
  return TRUE;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop

08001cf0 <Powerstep01_SendQueuedCommands>:
 * @brief Sends commands stored previously in the queue by 
 * Powerstep01_QueueCommands
 * @retval None
 *********************************************************/
void Powerstep01_SendQueuedCommands(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
  uint8_t loop;
  
  for (loop = 0; 
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	e011      	b.n	8001d20 <Powerstep01_SendQueuedCommands+0x30>
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
       loop++)
  {
     Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <Powerstep01_SendQueuedCommands+0x40>)
 8001d06:	1898      	adds	r0, r3, r2
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <Powerstep01_SendQueuedCommands+0x44>)
 8001d12:	4413      	add	r3, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f001 f94b 	bl	8002fb0 <Powerstep01_WriteBytes>
       loop++)
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	71fb      	strb	r3, [r7, #7]
       loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d9ea      	bls.n	8001cfc <Powerstep01_SendQueuedCommands+0xc>
  }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000474 	.word	0x20000474
 8001d34:	20000480 	.word	0x20000480

08001d38 <Powerstep01_SetHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] homePos new home position
 * @retval None
 **********************************************************/
void Powerstep01_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  uint32_t currentPos = Powerstep01_CmdGetParam(deviceId, POWERSTEP01_ABS_POS);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	2101      	movs	r1, #1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f9bb 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001d4e:	60f8      	str	r0, [r7, #12]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, currentPos- homePos);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fc26 	bl	80015ac <Powerstep01_CmdSetParam>
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <Powerstep01_SetMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] markPos new mark position
 * @retval None
 **********************************************************/
void Powerstep01_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, markPos);
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2103      	movs	r1, #3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fc16 	bl	80015ac <Powerstep01_CmdSetParam>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <Powerstep01_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool Powerstep01_SetNbDevices(uint8_t nbDevices)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d804      	bhi.n	8001da2 <Powerstep01_SetNbDevices+0x1a>
  {
    numberOfDevices = nbDevices;
 8001d98:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <Powerstep01_SetNbDevices+0x28>)
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <Powerstep01_SetNbDevices+0x1c>
  }
  else
  {
    return FALSE;
 8001da2:	2300      	movs	r3, #0
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20000470 	.word	0x20000470

08001db4 <Powerstep01_SetAnalogValue>:
 * @param[in] param Register adress (POWERSTEP01_ABS_POS, POWERSTEP01_MARK,...)
 * @param[in] value Floating point value to convert and set into the register
 * @retval TRUE if param and value are valid, FALSE otherwise
 *********************************************************/
bool Powerstep01_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	74fb      	strb	r3, [r7, #19]
  bool voltageMode = ((POWERSTEP01_CM_VM_CURRENT&Powerstep01_CmdGetParam(deviceId,POWERSTEP01_STEP_MODE))==0);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2116      	movs	r1, #22
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f979 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	74bb      	strb	r3, [r7, #18]
  if ((value < 0)&&((param != POWERSTEP01_ABS_POS)&&(param != POWERSTEP01_MARK)))
 8001de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	d507      	bpl.n	8001e02 <Powerstep01_SetAnalogValue+0x4e>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d004      	beq.n	8001e02 <Powerstep01_SetAnalogValue+0x4e>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d001      	beq.n	8001e02 <Powerstep01_SetAnalogValue+0x4e>
  {
    result = FALSE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	74fb      	strb	r3, [r7, #19]
  }
  switch (param)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	2b14      	cmp	r3, #20
 8001e08:	f200 8191 	bhi.w	800212e <Powerstep01_SetAnalogValue+0x37a>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <Powerstep01_SetAnalogValue+0x60>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001ecf 	.word	0x08001ecf
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	08001ecf 	.word	0x08001ecf
 8001e20:	0800212f 	.word	0x0800212f
 8001e24:	08001f43 	.word	0x08001f43
 8001e28:	08001f43 	.word	0x08001f43
 8001e2c:	08001f69 	.word	0x08001f69
 8001e30:	08001f8f 	.word	0x08001f8f
 8001e34:	08002083 	.word	0x08002083
 8001e38:	08002083 	.word	0x08002083
 8001e3c:	08002083 	.word	0x08002083
 8001e40:	08002083 	.word	0x08002083
 8001e44:	08001fff 	.word	0x08001fff
 8001e48:	080020d1 	.word	0x080020d1
 8001e4c:	080020dd 	.word	0x080020dd
 8001e50:	080020dd 	.word	0x080020dd
 8001e54:	08002025 	.word	0x08002025
 8001e58:	0800212f 	.word	0x0800212f
 8001e5c:	0800205d 	.word	0x0800205d
 8001e60:	0800205d 	.word	0x0800205d
 8001e64:	08001fc7 	.word	0x08001fc7
  {
    case POWERSTEP01_EL_POS:
      if ((value > (POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK))||
 8001e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6c:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8002150 <Powerstep01_SetAnalogValue+0x39c>
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	dc1c      	bgt.n	8001eb4 <Powerstep01_SetAnalogValue+0x100>
 8001e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	d018      	beq.n	8001eba <Powerstep01_SetAnalogValue+0x106>
          ((value!=0)&&(value < (1<<(7-(POWERSTEP01_STEP_MODE_STEP_SEL&Powerstep01_CmdGetParam(0,POWERSTEP01_STEP_MODE))))))) result = FALSE;
 8001e88:	2116      	movs	r1, #22
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff f91a 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001e90:	4603      	mov	r3, r0
 8001e92:	43db      	mvns	r3, r3
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	2201      	movs	r2, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d502      	bpl.n	8001eba <Powerstep01_SetAnalogValue+0x106>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74fb      	strb	r3, [r7, #19]
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
      break;        
 8001eb8:	e13b      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = ((uint32_t) value)&(POWERSTEP01_ELPOS_STEP_MASK|POWERSTEP01_ELPOS_MICROSTEP_MASK);
 8001eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec2:	ee17 3a90 	vmov	r3, s15
 8001ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eca:	617b      	str	r3, [r7, #20]
      break;        
 8001ecc:	e131      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ABS_POS:
    case POWERSTEP01_MARK:
      if (value < 0)
 8001ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	d51c      	bpl.n	8001f16 <Powerstep01_SetAnalogValue+0x162>
      {
        value=-value;
 8001edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee0:	eef1 7a67 	vneg.f32	s15, s15
 8001ee4:	edc7 7a01 	vstr	s15, [r7, #4]
        if (((uint32_t)value)<=(POWERSTEP01_MAX_POSITION+1))
 8001ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef0:	ee17 3a90 	vmov	r3, s15
 8001ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ef8:	d80a      	bhi.n	8001f10 <Powerstep01_SetAnalogValue+0x15c>
          registerValue = (POWERSTEP01_ABS_POS_VALUE_MASK+1-(uint32_t)value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	425b      	negs	r3, r3
 8001f08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f0c:	617b      	str	r3, [r7, #20]
      {
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
        else result = FALSE; 
      }
      break;
 8001f0e:	e110      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE;  
 8001f10:	2300      	movs	r3, #0
 8001f12:	74fb      	strb	r3, [r7, #19]
      break;
 8001f14:	e10d      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        if (((uint32_t)value)<=POWERSTEP01_MAX_POSITION)
 8001f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1e:	ee17 3a90 	vmov	r3, s15
 8001f22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f26:	d209      	bcs.n	8001f3c <Powerstep01_SetAnalogValue+0x188>
          registerValue = ((uint32_t) value)&POWERSTEP01_ABS_POS_VALUE_MASK;
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f30:	ee17 3a90 	vmov	r3, s15
 8001f34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	e0fa      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        else result = FALSE; 
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      break;
 8001f40:	e0f7      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ACC:
    case POWERSTEP01_DEC:
      if (value > POWERSTEP01_ACC_DEC_MAX_VALUE) result = FALSE;
 8001f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f46:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002154 <Powerstep01_SetAnalogValue+0x3a0>
 8001f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd02      	ble.n	8001f5a <Powerstep01_SetAnalogValue+0x1a6>
 8001f54:	2300      	movs	r3, #0
 8001f56:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
      break;
 8001f58:	e0eb      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_AccDec_Steps_s2_to_RegVal(value);
 8001f5a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f5e:	f001 f84d 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8001f62:	4603      	mov	r3, r0
 8001f64:	617b      	str	r3, [r7, #20]
      break;
 8001f66:	e0e4      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MAX_SPEED:
      if (value > POWERSTEP01_MAX_SPEED_MAX_VALUE) result = FALSE;
 8001f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f6c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002158 <Powerstep01_SetAnalogValue+0x3a4>
 8001f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	dd02      	ble.n	8001f80 <Powerstep01_SetAnalogValue+0x1cc>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
      break;
 8001f7e:	e0d8      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_MaxSpd_Steps_s_to_RegVal(value);
 8001f80:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f84:	f001 f974 	bl	8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	617b      	str	r3, [r7, #20]
      break;
 8001f8c:	e0d1      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_MIN_SPEED:
      if (value > POWERSTEP01_MIN_SPEED_MAX_VALUE) result = FALSE;
 8001f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f92:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800215c <Powerstep01_SetAnalogValue+0x3a8>
 8001f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9e:	dd02      	ble.n	8001fa6 <Powerstep01_SetAnalogValue+0x1f2>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
      break;      
 8001fa4:	e0c5      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_LSPD_OPT&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_MinSpd_Steps_s_to_RegVal(value);
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f88a 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f403 5480 	and.w	r4, r3, #4096	@ 0x1000
 8001fb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fba:	f001 f98b 	bl	80032d4 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4323      	orrs	r3, r4
 8001fc2:	617b      	str	r3, [r7, #20]
      break;      
 8001fc4:	e0b5      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_FS_SPD:
      if (value > POWERSTEP01_FS_SPD_MAX_VALUE) result = FALSE;
 8001fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fca:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8002160 <Powerstep01_SetAnalogValue+0x3ac>
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	dd02      	ble.n	8001fde <Powerstep01_SetAnalogValue+0x22a>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74fb      	strb	r3, [r7, #19]
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
      break;
 8001fdc:	e0a9      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = (POWERSTEP01_BOOST_MODE&Powerstep01_CmdGetParam(deviceId, param))|Powerstep01_FSSpd_Steps_s_to_RegVal(value);
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f86e 	bl	80010c4 <Powerstep01_CmdGetParam>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f403 6480 	and.w	r4, r3, #1024	@ 0x400
 8001fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff2:	f001 f869 	bl	80030c8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4323      	orrs	r3, r4
 8001ffa:	617b      	str	r3, [r7, #20]
      break;
 8001ffc:	e099      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_INT_SPD:
      if (value > POWERSTEP01_INT_SPD_MAX_VALUE) result = FALSE;
 8001ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002002:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002164 <Powerstep01_SetAnalogValue+0x3b0>
 8002006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	dd02      	ble.n	8002016 <Powerstep01_SetAnalogValue+0x262>
 8002010:	2300      	movs	r3, #0
 8002012:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
      break;
 8002014:	e08d      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_IntSpd_Steps_s_to_RegVal(value);
 8002016:	ed97 0a01 	vldr	s0, [r7, #4]
 800201a:	f001 f889 	bl	8003130 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 800201e:	4603      	mov	r3, r0
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	e086      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_K_THERM:
      if ((value < POWERSTEP01_K_THERM_MIN_VALUE)||
 8002024:	edd7 7a01 	vldr	s15, [r7, #4]
 8002028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800202c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	d408      	bmi.n	8002048 <Powerstep01_SetAnalogValue+0x294>
 8002036:	edd7 7a01 	vldr	s15, [r7, #4]
 800203a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002168 <Powerstep01_SetAnalogValue+0x3b4>
 800203e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	dd02      	ble.n	800204e <Powerstep01_SetAnalogValue+0x29a>
          (value > POWERSTEP01_K_THERM_MAX_VALUE)) result = FALSE;
 8002048:	2300      	movs	r3, #0
 800204a:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
      break;
 800204c:	e071      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_KTherm_Comp_to_RegVal(value);
 800204e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002052:	f001 f89f 	bl	8003194 <Powerstep01_KTherm_Comp_to_RegVal>
 8002056:	4603      	mov	r3, r0
 8002058:	617b      	str	r3, [r7, #20]
      break;
 800205a:	e06a      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_OCD_TH:
    case POWERSTEP01_STALL_TH:
      if (value > POWERSTEP01_STALL_OCD_TH_MAX_VALUE) result = FALSE;
 800205c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002060:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800216c <Powerstep01_SetAnalogValue+0x3b8>
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	dd02      	ble.n	8002074 <Powerstep01_SetAnalogValue+0x2c0>
 800206e:	2300      	movs	r3, #0
 8002070:	74fb      	strb	r3, [r7, #19]
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
      break;
 8002072:	e05e      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      else registerValue = Powerstep01_StallOcd_Th_to_RegVal(value);
 8002074:	ed97 0a01 	vldr	s0, [r7, #4]
 8002078:	f001 f974 	bl	8003364 <Powerstep01_StallOcd_Th_to_RegVal>
 800207c:	4603      	mov	r3, r0
 800207e:	617b      	str	r3, [r7, #20]
      break;
 8002080:	e057      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_KVAL_HOLD:  //POWERSTEP01_TVAL_HOLD
    case POWERSTEP01_KVAL_RUN:   //POWERSTEP01_TVAL_RUN
    case POWERSTEP01_KVAL_ACC:   //POWERSTEP01_TVAL_ACC
    case POWERSTEP01_KVAL_DEC:   //POWERSTEP01_TVAL_DEC
      if (voltageMode==FALSE)
 8002082:	7cbb      	ldrb	r3, [r7, #18]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d112      	bne.n	80020ae <Powerstep01_SetAnalogValue+0x2fa>
      {
        if (value > POWERSTEP01_TVAL_MAX_VALUE) result = FALSE;
 8002088:	edd7 7a01 	vldr	s15, [r7, #4]
 800208c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800216c <Powerstep01_SetAnalogValue+0x3b8>
 8002090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	dd02      	ble.n	80020a0 <Powerstep01_SetAnalogValue+0x2ec>
 800209a:	2300      	movs	r3, #0
 800209c:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
      }
      break;
 800209e:	e048      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tval_RefVoltage_to_RegVal(value);
 80020a0:	ed97 0a01 	vldr	s0, [r7, #4]
 80020a4:	f001 f99a 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80020a8:	4603      	mov	r3, r0
 80020aa:	617b      	str	r3, [r7, #20]
      break;
 80020ac:	e041      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_KVAL_MAX_VALUE) result = FALSE;
 80020ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	dd02      	ble.n	80020c2 <Powerstep01_SetAnalogValue+0x30e>
 80020bc:	2300      	movs	r3, #0
 80020be:	74fb      	strb	r3, [r7, #19]
      break;
 80020c0:	e037      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Kval_Perc_to_RegVal(value);
 80020c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80020c6:	f001 f8a1 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 80020ca:	4603      	mov	r3, r0
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	e030      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    case POWERSTEP01_ST_SLP:
      if (voltageMode==FALSE) 
 80020d0:	7cbb      	ldrb	r3, [r7, #18]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <Powerstep01_SetAnalogValue+0x328>
      {
        result = FALSE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	74fb      	strb	r3, [r7, #19]
        break;
 80020da:	e02a      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
      }
    case POWERSTEP01_FN_SLP_ACC: //POWERSTEP01_TON_MIN
    case POWERSTEP01_FN_SLP_DEC: //POWERSTEP01_TOFF_MIN
      if (voltageMode==FALSE)
 80020dc:	7cbb      	ldrb	r3, [r7, #18]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d112      	bne.n	8002108 <Powerstep01_SetAnalogValue+0x354>
      {
        if (value>POWERSTEP01_TOFF_TON_MIN_MAX_VALUE) result = FALSE;
 80020e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002170 <Powerstep01_SetAnalogValue+0x3bc>
 80020ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	dd02      	ble.n	80020fa <Powerstep01_SetAnalogValue+0x346>
 80020f4:	2300      	movs	r3, #0
 80020f6:	74fb      	strb	r3, [r7, #19]
      else
      {
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
      }
      break;
 80020f8:	e01b      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_Tmin_Time_to_RegVal(value);
 80020fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80020fe:	f001 f9a9 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002102:	4603      	mov	r3, r0
 8002104:	617b      	str	r3, [r7, #20]
      break;
 8002106:	e014      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        if (value > POWERSTEP01_SLP_MAX_VALUE) result = FALSE;
 8002108:	edd7 7a01 	vldr	s15, [r7, #4]
 800210c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002174 <Powerstep01_SetAnalogValue+0x3c0>
 8002110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	dd02      	ble.n	8002120 <Powerstep01_SetAnalogValue+0x36c>
 800211a:	2300      	movs	r3, #0
 800211c:	74fb      	strb	r3, [r7, #19]
      break;
 800211e:	e008      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
        else registerValue = Powerstep01_BEMFslope_Perc_to_RegVal(value);
 8002120:	ed97 0a01 	vldr	s0, [r7, #4]
 8002124:	f000 ff9c 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002128:	4603      	mov	r3, r0
 800212a:	617b      	str	r3, [r7, #20]
      break;
 800212c:	e001      	b.n	8002132 <Powerstep01_SetAnalogValue+0x37e>
    default:
      result = FALSE;
 800212e:	2300      	movs	r3, #0
 8002130:	74fb      	strb	r3, [r7, #19]
  }
  if (result!=FALSE)
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <Powerstep01_SetAnalogValue+0x390>
  {
    Powerstep01_CmdSetParam(deviceId, param, registerValue);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fa34 	bl	80015ac <Powerstep01_CmdSetParam>
  }
  return result;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
}
 8002146:	4618      	mov	r0, r3
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	bf00      	nop
 8002150:	43ff8000 	.word	0x43ff8000
 8002154:	4768c600 	.word	0x4768c600
 8002158:	4673e800 	.word	0x4673e800
 800215c:	44741333 	.word	0x44741333
 8002160:	46742400 	.word	0x46742400
 8002164:	44742000 	.word	0x44742000
 8002168:	3fbc0000 	.word	0x3fbc0000
 800216c:	447a0000 	.word	0x447a0000
 8002170:	42800000 	.word	0x42800000
 8002174:	3ecccccd 	.word	0x3ecccccd

08002178 <Powerstep01_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_StartStepClock(uint16_t newFreq)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  Powerstep01_Board_StartStepClock(newFreq);
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4618      	mov	r0, r3
 8002186:	f001 fc45 	bl	8003a14 <Powerstep01_Board_StartStepClock>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <Powerstep01_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_StopStepClock(void)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	af00      	add	r7, sp, #0
  Powerstep01_Board_StopStepClock();
 8002196:	f001 fc63 	bl	8003a60 <Powerstep01_Board_StopStepClock>
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <Powerstep01_WaitForAllDevicesNotBusy>:
/******************************************************//**
 * @brief  Locks until all devices become not busy
 * @retval None
 **********************************************************/
void Powerstep01_WaitForAllDevicesNotBusy(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  bool busy = TRUE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
	
  /* Wait while at least one is active */
  while (busy)
 80021aa:	e016      	b.n	80021da <Powerstep01_WaitForAllDevicesNotBusy+0x3a>
  {
    busy = FALSE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	71bb      	strb	r3, [r7, #6]
 80021b4:	e00b      	b.n	80021ce <Powerstep01_WaitForAllDevicesNotBusy+0x2e>
    {
      busy  |= Powerstep01_IsDeviceBusy(loop);
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fc8e 	bl	8001ada <Powerstep01_IsDeviceBusy>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	71fb      	strb	r3, [r7, #7]
    for (loop = 0; loop < numberOfDevices; loop++)
 80021c8:	79bb      	ldrb	r3, [r7, #6]
 80021ca:	3301      	adds	r3, #1
 80021cc:	71bb      	strb	r3, [r7, #6]
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <Powerstep01_WaitForAllDevicesNotBusy+0x4c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	79ba      	ldrb	r2, [r7, #6]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3ed      	bcc.n	80021b6 <Powerstep01_WaitForAllDevicesNotBusy+0x16>
  while (busy)
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e5      	bne.n	80021ac <Powerstep01_WaitForAllDevicesNotBusy+0xc>
    }   
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000470 	.word	0x20000470

080021f0 <Powerstep01_WaitWhileActive>:
 * @brief  Locks until the device becomes not busy
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_WaitWhileActive(uint8_t deviceId)
 {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (Powerstep01_IsDeviceBusy(deviceId) != 0);
 80021fa:	bf00      	nop
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fc6b 	bl	8001ada <Powerstep01_IsDeviceBusy>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f8      	bne.n	80021fc <Powerstep01_WaitWhileActive+0xc>
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <Powerstep01_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t Powerstep01_ConvertPosition(uint32_t abs_position_reg)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	int32_t operation_result;

  if (abs_position_reg & POWERSTEP01_ABS_POS_SIGN_BIT_MASK) 
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <Powerstep01_ConvertPosition+0x2e>
  {
		/* Negative register value */
		abs_position_reg = ~abs_position_reg;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	43db      	mvns	r3, r3
 800222a:	607b      	str	r3, [r7, #4]
		abs_position_reg += 1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3301      	adds	r3, #1
 8002230:	607b      	str	r3, [r7, #4]

		operation_result = (int32_t) (abs_position_reg & POWERSTEP01_ABS_POS_VALUE_MASK);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002238:	60fb      	str	r3, [r7, #12]
		operation_result = -operation_result;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	425b      	negs	r3, r3
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e001      	b.n	8002246 <Powerstep01_ConvertPosition+0x32>
  } 
  else 
  {
		operation_result = (int32_t) abs_position_reg;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]
	}
	return operation_result;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <Powerstep01_BusyInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the busy interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_BusyInterruptHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  if (busyInterruptCallback != 0)
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <Powerstep01_BusyInterruptHandler+0x24>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <Powerstep01_BusyInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <Powerstep01_BusyInterruptHandler+0x28>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
    
    busyInterruptCallback();
 8002266:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <Powerstep01_BusyInterruptHandler+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <Powerstep01_BusyInterruptHandler+0x28>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
  }
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000464 	.word	0x20000464
 800227c:	2000048d 	.word	0x2000048d

08002280 <Powerstep01_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void Powerstep01_ErrorHandler(uint16_t error)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <Powerstep01_ErrorHandler+0x28>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <Powerstep01_ErrorHandler+0x1e>
  {
    errorHandlerCallback(error);
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <Powerstep01_ErrorHandler+0x28>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	88fa      	ldrh	r2, [r7, #6]
 8002298:	4610      	mov	r0, r2
 800229a:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 800229c:	e000      	b.n	80022a0 <Powerstep01_ErrorHandler+0x20>
    while(1)
 800229e:	e7fe      	b.n	800229e <Powerstep01_ErrorHandler+0x1e>
}
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000046c 	.word	0x2000046c

080022ac <Powerstep01_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void Powerstep01_FlagInterruptHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <Powerstep01_FlagInterruptHandler+0x24>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <Powerstep01_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <Powerstep01_FlagInterruptHandler+0x28>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <Powerstep01_FlagInterruptHandler+0x24>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <Powerstep01_FlagInterruptHandler+0x28>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
  }
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000468 	.word	0x20000468
 80022d4:	2000048d 	.word	0x2000048d

080022d8 <Powerstep01_SendCommand>:
 * POWERSTEP01_GET_STATUS)
 * @param[in] value arguments to send on 32 bits
 * @retval None
 **********************************************************/
void Powerstep01_SendCommand(uint8_t deviceId, uint8_t param, uint32_t value)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	603a      	str	r2, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
 80022e4:	460b      	mov	r3, r1
 80022e6:	71bb      	strb	r3, [r7, #6]
  if (numberOfDevices > deviceId)
 80022e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002458 <Powerstep01_SendCommand+0x180>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f080 80ad 	bcs.w	8002450 <Powerstep01_SendCommand+0x178>
  {
    uint32_t loop;
    uint8_t maxArgumentNbBytes = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	72fb      	strb	r3, [r7, #11]
    uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80022fa:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <Powerstep01_SendCommand+0x180>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	727b      	strb	r3, [r7, #9]
    bool itDisable = FALSE; 
 800230a:	2300      	movs	r3, #0
 800230c:	72bb      	strb	r3, [r7, #10]
    
    do
    {
      spiPreemtionByIsr = FALSE;
 800230e:	4b53      	ldr	r3, [pc, #332]	@ (800245c <Powerstep01_SendCommand+0x184>)
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
      if (itDisable)
 8002314:	7abb      	ldrb	r3, [r7, #10]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <Powerstep01_SendCommand+0x4a>
      {
        /* re-enable Powerstep01_Board_EnableIrq if disable in previous iteration */
        Powerstep01_Board_EnableIrq();
 800231a:	f001 fa9d 	bl	8003858 <Powerstep01_Board_EnableIrq>
        itDisable = FALSE;
 800231e:	2300      	movs	r3, #0
 8002320:	72bb      	strb	r3, [r7, #10]
      }    
      for (loop = 0; loop < numberOfDevices; loop++)
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e019      	b.n	800235c <Powerstep01_SendCommand+0x84>
      {
          spiTxBursts[0][loop] = POWERSTEP01_NOP;
 8002328:	4a4d      	ldr	r2, [pc, #308]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
          spiTxBursts[1][loop] = POWERSTEP01_NOP;
 8002332:	4a4b      	ldr	r2, [pc, #300]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	3303      	adds	r3, #3
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
          spiTxBursts[2][loop] = POWERSTEP01_NOP;
 800233e:	4a48      	ldr	r2, [pc, #288]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	3306      	adds	r3, #6
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
          spiTxBursts[3][loop] = POWERSTEP01_NOP;   
 800234a:	4a45      	ldr	r2, [pc, #276]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	3309      	adds	r3, #9
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < numberOfDevices; loop++)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3301      	adds	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <Powerstep01_SendCommand+0x180>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4293      	cmp	r3, r2
 8002368:	d3de      	bcc.n	8002328 <Powerstep01_SendCommand+0x50>
      }
      switch (param & DAISY_CHAIN_COMMAND_MASK)
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	f003 03fa 	and.w	r3, r3, #250	@ 0xfa
 8002370:	2b8a      	cmp	r3, #138	@ 0x8a
 8002372:	d016      	beq.n	80023a2 <Powerstep01_SendCommand+0xca>
 8002374:	2b8a      	cmp	r3, #138	@ 0x8a
 8002376:	dc32      	bgt.n	80023de <Powerstep01_SendCommand+0x106>
 8002378:	2b82      	cmp	r3, #130	@ 0x82
 800237a:	d012      	beq.n	80023a2 <Powerstep01_SendCommand+0xca>
 800237c:	2b82      	cmp	r3, #130	@ 0x82
 800237e:	dc2e      	bgt.n	80023de <Powerstep01_SendCommand+0x106>
 8002380:	2b68      	cmp	r3, #104	@ 0x68
 8002382:	d00a      	beq.n	800239a <Powerstep01_SendCommand+0xc2>
 8002384:	2b68      	cmp	r3, #104	@ 0x68
 8002386:	dc2a      	bgt.n	80023de <Powerstep01_SendCommand+0x106>
 8002388:	2b60      	cmp	r3, #96	@ 0x60
 800238a:	d006      	beq.n	800239a <Powerstep01_SendCommand+0xc2>
 800238c:	2b60      	cmp	r3, #96	@ 0x60
 800238e:	dc26      	bgt.n	80023de <Powerstep01_SendCommand+0x106>
 8002390:	2b40      	cmp	r3, #64	@ 0x40
 8002392:	d006      	beq.n	80023a2 <Powerstep01_SendCommand+0xca>
 8002394:	2b50      	cmp	r3, #80	@ 0x50
 8002396:	d004      	beq.n	80023a2 <Powerstep01_SendCommand+0xca>
 8002398:	e021      	b.n	80023de <Powerstep01_SendCommand+0x106>
      {
        case POWERSTEP01_GO_TO:
        case POWERSTEP01_GO_TO_DIR:
          value = value & POWERSTEP01_ABS_POS_VALUE_MASK;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80023a0:	603b      	str	r3, [r7, #0]
        case POWERSTEP01_RUN:
        case POWERSTEP01_MOVE:
        case POWERSTEP01_GO_UNTIL:
        case POWERSTEP01_GO_UNTIL_ACT_CPY:
          spiTxBursts[0][spiIndex] = param;
 80023a2:	7a7b      	ldrb	r3, [r7, #9]
 80023a4:	492e      	ldr	r1, [pc, #184]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023a6:	79ba      	ldrb	r2, [r7, #6]
 80023a8:	54ca      	strb	r2, [r1, r3]
          spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	0c1a      	lsrs	r2, r3, #16
 80023ae:	7a7b      	ldrb	r3, [r7, #9]
 80023b0:	b2d1      	uxtb	r1, r2
 80023b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023b4:	4413      	add	r3, r2
 80023b6:	460a      	mov	r2, r1
 80023b8:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	0a1a      	lsrs	r2, r3, #8
 80023be:	7a7b      	ldrb	r3, [r7, #9]
 80023c0:	b2d1      	uxtb	r1, r2
 80023c2:	4a27      	ldr	r2, [pc, #156]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023c4:	4413      	add	r3, r2
 80023c6:	460a      	mov	r2, r1
 80023c8:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80023ca:	7a7b      	ldrb	r3, [r7, #9]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d1      	uxtb	r1, r2
 80023d0:	4a23      	ldr	r2, [pc, #140]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023d2:	4413      	add	r3, r2
 80023d4:	460a      	mov	r2, r1
 80023d6:	725a      	strb	r2, [r3, #9]
          maxArgumentNbBytes = 3;
 80023d8:	2303      	movs	r3, #3
 80023da:	72fb      	strb	r3, [r7, #11]
          break;
 80023dc:	e012      	b.n	8002404 <Powerstep01_SendCommand+0x12c>
      default:
          spiTxBursts[0][spiIndex] = POWERSTEP01_NOP;
 80023de:	7a7b      	ldrb	r3, [r7, #9]
 80023e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023e2:	2100      	movs	r1, #0
 80023e4:	54d1      	strb	r1, [r2, r3]
          spiTxBursts[1][spiIndex] = POWERSTEP01_NOP;
 80023e6:	7a7b      	ldrb	r3, [r7, #9]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023ea:	4413      	add	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	70da      	strb	r2, [r3, #3]
          spiTxBursts[2][spiIndex] = POWERSTEP01_NOP;
 80023f0:	7a7b      	ldrb	r3, [r7, #9]
 80023f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023f4:	4413      	add	r3, r2
 80023f6:	2200      	movs	r2, #0
 80023f8:	719a      	strb	r2, [r3, #6]
          spiTxBursts[3][spiIndex] = param;
 80023fa:	7a7b      	ldrb	r3, [r7, #9]
 80023fc:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 80023fe:	4413      	add	r3, r2
 8002400:	79ba      	ldrb	r2, [r7, #6]
 8002402:	725a      	strb	r2, [r3, #9]
      }
      /* Disable interruption before checking */
      /* pre-emption by ISR and SPI transfers*/
      Powerstep01_Board_DisableIrq();
 8002404:	f001 fa1f 	bl	8003846 <Powerstep01_Board_DisableIrq>
      itDisable = TRUE;
 8002408:	2301      	movs	r3, #1
 800240a:	72bb      	strb	r3, [r7, #10]
    } while (spiPreemtionByIsr); // check pre-emption by ISR
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <Powerstep01_SendCommand+0x184>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	f47f af7b 	bne.w	800230e <Powerstep01_SendCommand+0x36>
    for (loop = POWERSTEP01_CMD_ARG_MAX_NB_BYTES - 1 - maxArgumentNbBytes; 
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	f1c3 0303 	rsb	r3, r3, #3
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e011      	b.n	8002446 <Powerstep01_SendCommand+0x16e>
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
         loop++)
    {
       Powerstep01_WriteBytes(&spiTxBursts[loop][0], &spiRxBursts[loop][0]);
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	4a0d      	ldr	r2, [pc, #52]	@ (8002460 <Powerstep01_SendCommand+0x188>)
 800242c:	1898      	adds	r0, r3, r2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	4a0b      	ldr	r2, [pc, #44]	@ (8002464 <Powerstep01_SendCommand+0x18c>)
 8002438:	4413      	add	r3, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f000 fdb8 	bl	8002fb0 <Powerstep01_WriteBytes>
         loop++)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
         loop < POWERSTEP01_CMD_ARG_MAX_NB_BYTES; 
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d9ea      	bls.n	8002422 <Powerstep01_SendCommand+0x14a>
    }
    /* re-enable Powerstep01_Board_EnableIrq after SPI transfers*/
    Powerstep01_Board_EnableIrq();
 800244c:	f001 fa04 	bl	8003858 <Powerstep01_Board_EnableIrq>
  }
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000470 	.word	0x20000470
 800245c:	2000048c 	.word	0x2000048c
 8002460:	20000474 	.word	0x20000474
 8002464:	20000480 	.word	0x20000480

08002468 <Powerstep01_SetRegisterToPredefinedValues>:
 * from powerstep01_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void Powerstep01_SetRegisterToPredefinedValues(uint8_t deviceId)
{  
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  powerstep01_CmVm_t cmVm;
  
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2200      	movs	r2, #0
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f897 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2200      	movs	r2, #0
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f891 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2200      	movs	r2, #0
 800248e:	2103      	movs	r1, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f88b 	bl	80015ac <Powerstep01_CmdSetParam>
  
  switch (deviceId)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b02      	cmp	r3, #2
 800249a:	f000 8263 	beq.w	8002964 <Powerstep01_SetRegisterToPredefinedValues+0x4fc>
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f300 8380 	bgt.w	8002ba4 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <Powerstep01_SetRegisterToPredefinedValues+0x48>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	f000 813b 	beq.w	8002724 <Powerstep01_SetRegisterToPredefinedValues+0x2bc>
      }
      break;
#endif
    default: ;
  }
}
 80024ae:	e379      	b.n	8002ba4 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_0;
 80024b0:	2308      	movs	r3, #8
 80024b2:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 80024b4:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80026f4 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 80024b8:	f000 fda0 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80024bc:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 80024be:	461a      	mov	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2105      	movs	r1, #5
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f871 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 80024ca:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80026f4 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 80024ce:	f000 fd95 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 80024d2:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 80024d4:	461a      	mov	r2, r3
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2106      	movs	r1, #6
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f866 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 80024e0:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80026f8 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 80024e4:	f000 fec4 	bl	8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 80024e8:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 80024ea:	461a      	mov	r2, r3
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2107      	movs	r1, #7
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f85b 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 80024f6:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 8002710 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 80024fa:	f000 feeb 	bl	80032d4 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 80024fe:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002500:	461a      	mov	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2108      	movs	r1, #8
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f850 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 800250c:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80026f0 <Powerstep01_SetRegisterToPredefinedValues+0x288>
 8002510:	f000 fdda 	bl	80030c8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002514:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2115      	movs	r1, #21
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f845 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	2208      	movs	r2, #8
 8002526:	2113      	movs	r1, #19
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f83f 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	220c      	movs	r2, #12
 8002532:	2116      	movs	r1, #22
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f839 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	22ef      	movs	r2, #239	@ 0xef
 800253e:	2117      	movs	r1, #23
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f833 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	22c3      	movs	r2, #195	@ 0xc3
 800254a:	2118      	movs	r1, #24
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff f82d 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2240      	movs	r2, #64	@ 0x40
 8002556:	2119      	movs	r1, #25
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f827 	bl	80015ac <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d175      	bne.n	8002650 <Powerstep01_SetRegisterToPredefinedValues+0x1e8>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002564:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8002718 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 8002568:	f000 fde2 	bl	8003130 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 800256c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	210d      	movs	r1, #13
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f819 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 800257a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800257e:	f000 fe09 	bl	8003194 <Powerstep01_KTherm_Comp_to_RegVal>
 8002582:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002584:	461a      	mov	r2, r3
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2111      	movs	r1, #17
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f80e 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 8002590:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 800271c <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8002594:	f000 fee6 	bl	8003364 <Powerstep01_StallOcd_Th_to_RegVal>
 8002598:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 800259a:	461a      	mov	r2, r3
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2114      	movs	r1, #20
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f803 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80025a6:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80025aa:	f000 fe2f 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 80025ae:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 80025b0:	461a      	mov	r2, r3
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2109      	movs	r1, #9
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fff8 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80025bc:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80025c0:	f000 fe24 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 80025c4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 80025c6:	461a      	mov	r2, r3
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	210a      	movs	r1, #10
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe ffed 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80025d2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80025d6:	f000 fe19 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 80025da:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 80025dc:	461a      	mov	r2, r3
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	210b      	movs	r1, #11
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe ffe2 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 80025e8:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 80025ec:	f000 fe0e 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 80025f0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 80025f2:	461a      	mov	r2, r3
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	210c      	movs	r1, #12
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe ffd7 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 80025fe:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 80026fc <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002602:	f000 fd2d 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002606:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002608:	461a      	mov	r2, r3
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	210e      	movs	r1, #14
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe ffcc 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002614:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8002700 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 8002618:	f000 fd22 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800261c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 800261e:	461a      	mov	r2, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	210f      	movs	r1, #15
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe ffc1 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800262a:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8002700 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 800262e:	f000 fd17 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002632:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2110      	movs	r1, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ffb6 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002646:	211a      	movs	r1, #26
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe ffaf 	bl	80015ac <Powerstep01_CmdSetParam>
      break;
 800264e:	e2a9      	b.n	8002ba4 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002650:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002654:	f000 fec2 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002658:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 800265a:	461a      	mov	r2, r3
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2109      	movs	r1, #9
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe ffa3 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002666:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 800266a:	f000 feb7 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 800266e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002670:	461a      	mov	r2, r3
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	210a      	movs	r1, #10
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe ff98 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 800267c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002680:	f000 feac 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002684:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	210b      	movs	r1, #11
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe ff8d 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002692:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 8002696:	f000 fea1 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 800269a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	210c      	movs	r1, #12
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe ff82 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2235      	movs	r2, #53	@ 0x35
 80026ac:	210e      	movs	r1, #14
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe ff7c 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80026b4:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80026b8:	f000 fecc 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 80026bc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 80026be:	461a      	mov	r2, r3
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	210f      	movs	r1, #15
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe ff71 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 80026ca:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 80026ce:	f000 fec1 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 80026d2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 80026d4:	461a      	mov	r2, r3
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2110      	movs	r1, #16
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe ff66 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f243 2208 	movw	r2, #12808	@ 0x3208
 80026e6:	211a      	movs	r1, #26
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe ff5f 	bl	80015ac <Powerstep01_CmdSetParam>
      break;
 80026ee:	e259      	b.n	8002ba4 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
 80026f0:	437428f6 	.word	0x437428f6
 80026f4:	4168cccd 	.word	0x4168cccd
 80026f8:	41740000 	.word	0x41740000
 80026fc:	3d1c432d 	.word	0x3d1c432d
 8002700:	3d801f75 	.word	0x3d801f75
 8002704:	43a40f5c 	.word	0x43a40f5c
 8002708:	44fb051f 	.word	0x44fb051f
 800270c:	4477f47b 	.word	0x4477f47b
 8002710:	00000000 	.word	0x00000000
 8002714:	4414c5c3 	.word	0x4414c5c3
 8002718:	42760c4a 	.word	0x42760c4a
 800271c:	4404d000 	.word	0x4404d000
 8002720:	418028f6 	.word	0x418028f6
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_1;
 8002724:	2308      	movs	r3, #8
 8002726:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002728:	ed1f 0a0e 	vldr	s0, [pc, #-56]	@ 80026f4 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 800272c:	f000 fc66 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002730:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002732:	461a      	mov	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2105      	movs	r1, #5
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe ff37 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800273e:	ed1f 0a13 	vldr	s0, [pc, #-76]	@ 80026f4 <Powerstep01_SetRegisterToPredefinedValues+0x28c>
 8002742:	f000 fc5b 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002746:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002748:	461a      	mov	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2106      	movs	r1, #6
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ff2c 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8002754:	ed1f 0a18 	vldr	s0, [pc, #-96]	@ 80026f8 <Powerstep01_SetRegisterToPredefinedValues+0x290>
 8002758:	f000 fd8a 	bl	8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800275c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 800275e:	461a      	mov	r2, r3
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2107      	movs	r1, #7
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe ff21 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 800276a:	ed1f 0a17 	vldr	s0, [pc, #-92]	@ 8002710 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 800276e:	f000 fdb1 	bl	80032d4 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 8002772:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2108      	movs	r1, #8
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ff16 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 8002780:	ed1f 0a1c 	vldr	s0, [pc, #-112]	@ 8002714 <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 8002784:	f000 fca0 	bl	80030c8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002788:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 800278a:	461a      	mov	r2, r3
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2115      	movs	r1, #21
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ff0b 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2208      	movs	r2, #8
 800279a:	2113      	movs	r1, #19
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe ff05 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	220c      	movs	r2, #12
 80027a6:	2116      	movs	r1, #22
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe feff 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	22ef      	movs	r2, #239	@ 0xef
 80027b2:	2117      	movs	r1, #23
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fef9 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	22c3      	movs	r2, #195	@ 0xc3
 80027be:	2118      	movs	r1, #24
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fef3 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2240      	movs	r2, #64	@ 0x40
 80027ca:	2119      	movs	r1, #25
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe feed 	bl	80015ac <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d175      	bne.n	80028c4 <Powerstep01_SetRegisterToPredefinedValues+0x45c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 80027d8:	ed1f 0a31 	vldr	s0, [pc, #-196]	@ 8002718 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 80027dc:	f000 fca8 	bl	8003130 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 80027e0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 80027e2:	461a      	mov	r2, r3
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	210d      	movs	r1, #13
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fedf 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 80027ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80027f2:	f000 fccf 	bl	8003194 <Powerstep01_KTherm_Comp_to_RegVal>
 80027f6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 80027f8:	461a      	mov	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2111      	movs	r1, #17
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fed4 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 8002804:	ed1f 0a3b 	vldr	s0, [pc, #-236]	@ 800271c <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8002808:	f000 fdac 	bl	8003364 <Powerstep01_StallOcd_Th_to_RegVal>
 800280c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 800280e:	461a      	mov	r2, r3
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2114      	movs	r1, #20
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fec9 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800281a:	ed1f 0a3f 	vldr	s0, [pc, #-252]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 800281e:	f000 fcf5 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002822:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002824:	461a      	mov	r2, r3
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2109      	movs	r1, #9
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe febe 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002830:	ed1f 0a45 	vldr	s0, [pc, #-276]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002834:	f000 fcea 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002838:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	210a      	movs	r1, #10
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe feb3 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002846:	ed1f 0a4a 	vldr	s0, [pc, #-296]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 800284a:	f000 fcdf 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 800284e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002850:	461a      	mov	r2, r3
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	210b      	movs	r1, #11
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fea8 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 800285c:	ed1f 0a50 	vldr	s0, [pc, #-320]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002860:	f000 fcd4 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002864:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002866:	461a      	mov	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	210c      	movs	r1, #12
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fe9d 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002872:	ed1f 0a5e 	vldr	s0, [pc, #-376]	@ 80026fc <Powerstep01_SetRegisterToPredefinedValues+0x294>
 8002876:	f000 fbf3 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 800287a:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 800287c:	461a      	mov	r2, r3
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	210e      	movs	r1, #14
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fe92 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002888:	ed1f 0a63 	vldr	s0, [pc, #-396]	@ 8002700 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 800288c:	f000 fbe8 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002890:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002892:	461a      	mov	r2, r3
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	210f      	movs	r1, #15
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fe87 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 800289e:	ed1f 0a68 	vldr	s0, [pc, #-416]	@ 8002700 <Powerstep01_SetRegisterToPredefinedValues+0x298>
 80028a2:	f000 fbdd 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 80028a6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 80028a8:	461a      	mov	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2110      	movs	r1, #16
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fe7c 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f642 6208 	movw	r2, #11784	@ 0x2e08
 80028ba:	211a      	movs	r1, #26
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fe75 	bl	80015ac <Powerstep01_CmdSetParam>
      break;     
 80028c2:	e16f      	b.n	8002ba4 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028c4:	ed1f 0a71 	vldr	s0, [pc, #-452]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80028c8:	f000 fd88 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028cc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2109      	movs	r1, #9
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fe69 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028da:	ed1f 0a76 	vldr	s0, [pc, #-472]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80028de:	f000 fd7d 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028e2:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	210a      	movs	r1, #10
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fe5e 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 80028f0:	ed1f 0a7c 	vldr	s0, [pc, #-496]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 80028f4:	f000 fd72 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 80028f8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 80028fa:	461a      	mov	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	210b      	movs	r1, #11
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fe53 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002906:	ed1f 0a81 	vldr	s0, [pc, #-516]	@ 8002704 <Powerstep01_SetRegisterToPredefinedValues+0x29c>
 800290a:	f000 fd67 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 800290e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002910:	461a      	mov	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	210c      	movs	r1, #12
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fe48 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2235      	movs	r2, #53	@ 0x35
 8002920:	210e      	movs	r1, #14
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fe42 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002928:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800292c:	f000 fd92 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002930:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002932:	461a      	mov	r2, r3
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	210f      	movs	r1, #15
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fe37 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 800293e:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 8002942:	f000 fd87 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002946:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002948:	461a      	mov	r2, r3
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2110      	movs	r1, #16
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fe2c 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f243 2208 	movw	r2, #12808	@ 0x3208
 800295a:	211a      	movs	r1, #26
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fe25 	bl	80015ac <Powerstep01_CmdSetParam>
      break;     
 8002962:	e11f      	b.n	8002ba4 <Powerstep01_SetRegisterToPredefinedValues+0x73c>
      cmVm = POWERSTEP01_CONF_PARAM_CM_VM_DEVICE_2;
 8002964:	2308      	movs	r3, #8
 8002966:	73fb      	strb	r3, [r7, #15]
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 8002968:	ed1f 0a99 	vldr	s0, [pc, #-612]	@ 8002708 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 800296c:	f000 fb46 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002970:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002972:	461a      	mov	r2, r3
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	2105      	movs	r1, #5
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fe17 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_AccDec_Steps_s2_to_RegVal(
 800297e:	ed1f 0a9e 	vldr	s0, [pc, #-632]	@ 8002708 <Powerstep01_SetRegisterToPredefinedValues+0x2a0>
 8002982:	f000 fb3b 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002986:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002988:	461a      	mov	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2106      	movs	r1, #6
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fe0c 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_MaxSpd_Steps_s_to_RegVal(
 8002994:	ed1f 0aa3 	vldr	s0, [pc, #-652]	@ 800270c <Powerstep01_SetRegisterToPredefinedValues+0x2a4>
 8002998:	f000 fc6a 	bl	8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 800299c:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 800299e:	461a      	mov	r2, r3
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	2107      	movs	r1, #7
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fe01 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_MinSpd_Steps_s_to_RegVal(
 80029aa:	ed1f 0aa7 	vldr	s0, [pc, #-668]	@ 8002710 <Powerstep01_SetRegisterToPredefinedValues+0x2a8>
 80029ae:	f000 fc91 	bl	80032d4 <Powerstep01_MinSpd_Steps_s_to_RegVal>
 80029b2:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	2108      	movs	r1, #8
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fdf6 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_FSSpd_Steps_s_to_RegVal(
 80029c0:	ed1f 0aac 	vldr	s0, [pc, #-688]	@ 8002714 <Powerstep01_SetRegisterToPredefinedValues+0x2ac>
 80029c4:	f000 fb80 	bl	80030c8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 80029c8:	4603      	mov	r3, r0
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 80029ca:	461a      	mov	r2, r3
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2115      	movs	r1, #21
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fdeb 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2208      	movs	r2, #8
 80029da:	2113      	movs	r1, #19
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fde5 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	220c      	movs	r2, #12
 80029e6:	2116      	movs	r1, #22
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fddf 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	22ef      	movs	r2, #239	@ 0xef
 80029f2:	2117      	movs	r1, #23
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fdd9 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	22c3      	movs	r2, #195	@ 0xc3
 80029fe:	2118      	movs	r1, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fdd3 	bl	80015ac <Powerstep01_CmdSetParam>
      Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2240      	movs	r2, #64	@ 0x40
 8002a0a:	2119      	movs	r1, #25
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fdcd 	bl	80015ac <Powerstep01_CmdSetParam>
      if (cmVm == POWERSTEP01_CM_VM_VOLTAGE)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d175      	bne.n	8002b04 <Powerstep01_SetRegisterToPredefinedValues+0x69c>
          Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002a18:	ed1f 0ac1 	vldr	s0, [pc, #-772]	@ 8002718 <Powerstep01_SetRegisterToPredefinedValues+0x2b0>
 8002a1c:	f000 fb88 	bl	8003130 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002a20:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8002a22:	461a      	mov	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	210d      	movs	r1, #13
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fdbf 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_KTherm_Comp_to_RegVal(
 8002a2e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002a32:	f000 fbaf 	bl	8003194 <Powerstep01_KTherm_Comp_to_RegVal>
 8002a36:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2111      	movs	r1, #17
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fdb4 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_StallOcd_Th_to_RegVal(
 8002a44:	ed1f 0acb 	vldr	s0, [pc, #-812]	@ 800271c <Powerstep01_SetRegisterToPredefinedValues+0x2b4>
 8002a48:	f000 fc8c 	bl	8003364 <Powerstep01_StallOcd_Th_to_RegVal>
 8002a4c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2114      	movs	r1, #20
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fda9 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a5a:	ed1f 0acf 	vldr	s0, [pc, #-828]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a5e:	f000 fbd5 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002a62:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2109      	movs	r1, #9
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd9e 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a70:	ed1f 0ad5 	vldr	s0, [pc, #-852]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a74:	f000 fbca 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002a78:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	210a      	movs	r1, #10
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fd93 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a86:	ed1f 0ada 	vldr	s0, [pc, #-872]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002a8a:	f000 fbbf 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002a8e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002a90:	461a      	mov	r2, r3
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	210b      	movs	r1, #11
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fd88 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Kval_Perc_to_RegVal(
 8002a9c:	ed1f 0ae0 	vldr	s0, [pc, #-896]	@ 8002720 <Powerstep01_SetRegisterToPredefinedValues+0x2b8>
 8002aa0:	f000 fbb4 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002aa4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	210c      	movs	r1, #12
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe fd7d 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002ab2:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8002bac <Powerstep01_SetRegisterToPredefinedValues+0x744>
 8002ab6:	f000 fad3 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002aba:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002abc:	461a      	mov	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	210e      	movs	r1, #14
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fd72 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002ac8:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8002bb0 <Powerstep01_SetRegisterToPredefinedValues+0x748>
 8002acc:	f000 fac8 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002ad0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fd67 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_BEMFslope_Perc_to_RegVal(
 8002ade:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8002bb0 <Powerstep01_SetRegisterToPredefinedValues+0x748>
 8002ae2:	f000 fabd 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002ae6:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002ae8:	461a      	mov	r2, r3
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2110      	movs	r1, #16
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fd5c 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f642 6208 	movw	r2, #11784	@ 0x2e08
 8002afa:	211a      	movs	r1, #26
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fd55 	bl	80015ac <Powerstep01_CmdSetParam>
      break;
 8002b02:	e04e      	b.n	8002ba2 <Powerstep01_SetRegisterToPredefinedValues+0x73a>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002b04:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8002bb4 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002b08:	f000 fc68 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002b0c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002b0e:	461a      	mov	r2, r3
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2109      	movs	r1, #9
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fd49 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002b1a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002bb4 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002b1e:	f000 fc5d 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002b22:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	210a      	movs	r1, #10
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fd3e 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002b30:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002bb4 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002b34:	f000 fc52 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002b38:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	210b      	movs	r1, #11
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fd33 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002b46:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002bb4 <Powerstep01_SetRegisterToPredefinedValues+0x74c>
 8002b4a:	f000 fc47 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002b4e:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002b50:	461a      	mov	r2, r3
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	210c      	movs	r1, #12
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fd28 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	2235      	movs	r2, #53	@ 0x35
 8002b60:	210e      	movs	r1, #14
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fd22 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002b68:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002b6c:	f000 fc72 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002b70:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002b72:	461a      	mov	r2, r3
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	210f      	movs	r1, #15
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fd17 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002b7e:	eeb3 0a05 	vmov.f32	s0, #53	@ 0x41a80000  21.0
 8002b82:	f000 fc67 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002b86:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002b88:	461a      	mov	r2, r3
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fd0c 	bl	80015ac <Powerstep01_CmdSetParam>
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f243 2208 	movw	r2, #12808	@ 0x3208
 8002b9a:	211a      	movs	r1, #26
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fd05 	bl	80015ac <Powerstep01_CmdSetParam>
      break;
 8002ba2:	bf00      	nop
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	3d1c432d 	.word	0x3d1c432d
 8002bb0:	3d801f75 	.word	0x3d801f75
 8002bb4:	43a40f5c 	.word	0x43a40f5c

08002bb8 <Powerstep01_SetDeviceParamsToGivenValues>:
 * parameters
 * @retval None
 **********************************************************/
void Powerstep01_SetDeviceParamsToGivenValues(uint8_t deviceId,
                                              powerstep01_Init_u_t *initPrm)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	71fb      	strb	r3, [r7, #7]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ABS_POS, 0);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fcee 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_EL_POS, 0);
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fce8 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MARK, 0);
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2103      	movs	r1, #3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fce2 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.acceleration));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bee:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf2:	f000 fa03 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002bf6:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ACC,
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2105      	movs	r1, #5
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fcd4 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
    Powerstep01_AccDec_Steps_s2_to_RegVal(initPrm->cm.cp.deceleration));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	f000 f9f5 	bl	8002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>
 8002c12:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_DEC,
 8002c14:	461a      	mov	r2, r3
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2106      	movs	r1, #6
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fcc6 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.maxSpeed));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c26:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2a:	f000 fb21 	bl	8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002c2e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MAX_SPEED,
 8002c30:	461a      	mov	r2, r3
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2107      	movs	r1, #7
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fcb8 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
    initPrm->cm.cp.lowSpeedOptimization|
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	8a9c      	ldrh	r4, [r3, #20]
    Powerstep01_MaxSpd_Steps_s_to_RegVal(initPrm->cm.cp.minSpeed));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c46:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4a:	f000 fb11 	bl	8003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>
 8002c4e:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_MIN_SPEED,
 8002c50:	4323      	orrs	r3, r4
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2108      	movs	r1, #8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fca6 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
    initPrm->cm.cp.boostMode|
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	8b9c      	ldrh	r4, [r3, #28]
    Powerstep01_FSSpd_Steps_s_to_RegVal(initPrm->cm.cp.fullStepSpeed));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6e:	f000 fa2b 	bl	80030c8 <Powerstep01_FSSpd_Steps_s_to_RegVal>
 8002c72:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FS_SPD,
 8002c74:	4323      	orrs	r3, r4
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2115      	movs	r1, #21
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fc94 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
    Powerstep01_StallOcd_Th_to_RegVal(initPrm->cm.cp.ocdThreshold));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	f000 fb69 	bl	8003364 <Powerstep01_StallOcd_Th_to_RegVal>
 8002c92:	4603      	mov	r3, r0
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_OCD_TH,
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2113      	movs	r1, #19
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fc86 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
    (uint8_t)initPrm->cm.cp.syncClockSelection|
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
    (uint8_t)initPrm->cm.cp.cmVmSelection|
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b2da      	uxtb	r2, r3
    (uint8_t)(uint8_t)initPrm->cm.cp.stepMode);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STEP_MODE,
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2116      	movs	r1, #22
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fc74 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
    initPrm->cm.cp.alarmsSelection);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ALARM_EN,
 8002cca:	461a      	mov	r2, r3
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2117      	movs	r1, #23
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe fc6b 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
    (uint16_t)initPrm->cm.cp.iGate|
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
    (uint16_t)initPrm->cm.cp.tcc|
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    (uint16_t)initPrm->cm.cp.iGate|
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
    (uint16_t)initPrm->cm.cp.tBoost|
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    (uint16_t)initPrm->cm.cp.tcc|
 8002cec:	4313      	orrs	r3, r2
    (uint16_t)initPrm->cm.cp.wdEn);
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    (uint16_t)initPrm->cm.cp.tBoost|
 8002cf2:	4313      	orrs	r3, r2
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG1,
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2118      	movs	r1, #24
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fc56 	bl	80015ac <Powerstep01_CmdSetParam>
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
    (uint16_t)initPrm->cm.cp.tBlank|
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
    (uint16_t)initPrm->cm.cp.tdt);  
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
  Powerstep01_CmdSetParam(deviceId, POWERSTEP01_GATECFG2,
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2119      	movs	r1, #25
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fc48 	bl	80015ac <Powerstep01_CmdSetParam>
  if (initPrm->cm.cp.cmVmSelection == POWERSTEP01_CM_VM_VOLTAGE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 80b6 	bne.w	8002e92 <Powerstep01_SetDeviceParamsToGivenValues+0x2da>
  {
    //Voltage mode
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
      Powerstep01_IntSpd_Steps_s_to_RegVal(
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	f000 f9fe 	bl	8003130 <Powerstep01_IntSpd_Steps_s_to_RegVal>
 8002d34:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_INT_SPD,
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	210d      	movs	r1, #13
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fc35 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.intersectSpeed));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
      Powerstep01_KTherm_Comp_to_RegVal(
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002d48:	eeb0 0a67 	vmov.f32	s0, s15
 8002d4c:	f000 fa22 	bl	8003194 <Powerstep01_KTherm_Comp_to_RegVal>
 8002d50:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_K_THERM,
 8002d52:	461a      	mov	r2, r3
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	2111      	movs	r1, #17
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fc27 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.thermalCompensationFactor)); 
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
      Powerstep01_StallOcd_Th_to_RegVal(
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002d64:	eeb0 0a67 	vmov.f32	s0, s15
 8002d68:	f000 fafc 	bl	8003364 <Powerstep01_StallOcd_Th_to_RegVal>
 8002d6c:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_STALL_TH,
 8002d6e:	461a      	mov	r2, r3
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	2114      	movs	r1, #20
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fc19 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.stallThreshold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
      Powerstep01_Kval_Perc_to_RegVal(
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002d80:	eeb0 0a67 	vmov.f32	s0, s15
 8002d84:	f000 fa42 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002d88:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_HOLD,
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2109      	movs	r1, #9
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fc0b 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.kvalHold));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
      Powerstep01_Kval_Perc_to_RegVal(
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002da0:	f000 fa34 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002da4:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_RUN,
 8002da6:	461a      	mov	r2, r3
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	210a      	movs	r1, #10
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fbfd 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.kvalRun));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
      Powerstep01_Kval_Perc_to_RegVal(
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	f000 fa26 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002dc0:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_ACC,
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	210b      	movs	r1, #11
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fbef 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.kvalAcc));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
      Powerstep01_Kval_Perc_to_RegVal(
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd8:	f000 fa18 	bl	800320c <Powerstep01_Kval_Perc_to_RegVal>
 8002ddc:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_KVAL_DEC,
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	210c      	movs	r1, #12
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fbe1 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.kvalDec));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002df0:	eeb0 0a67 	vmov.f32	s0, s15
 8002df4:	f000 f934 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002df8:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_ST_SLP,
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	210e      	movs	r1, #14
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe fbd3 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.startSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e10:	f000 f926 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002e14:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_ACC,
 8002e16:	461a      	mov	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	210f      	movs	r1, #15
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fbc5 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.accelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
      Powerstep01_BEMFslope_Perc_to_RegVal(
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e28:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2c:	f000 f918 	bl	8003060 <Powerstep01_BEMFslope_Perc_to_RegVal>
 8002e30:	4603      	mov	r3, r0
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_FN_SLP_DEC,
 8002e32:	461a      	mov	r2, r3
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2110      	movs	r1, #16
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fbb7 	bl	80015ac <Powerstep01_CmdSetParam>
        initPrm->vm.decelerationFinalSlope));
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
      (uint16_t)initPrm->vm.oscClkSel| 
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
      (uint16_t)initPrm->vm.swMode | 
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
      (uint16_t)initPrm->vm.enVsComp| 
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b2da      	uxtb	r2, r3
      (uint16_t)initPrm->vm.ocSd| 
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
      (uint16_t)initPrm->vm.enVsComp| 
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
      (uint16_t)initPrm->vm.uvloVal| 
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
      (uint16_t)initPrm->vm.ocSd| 
 8002e6a:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.vccVal| 
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
      (uint16_t)initPrm->vm.uvloVal| 
 8002e72:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmInt| 
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
      (uint16_t)initPrm->vm.vccVal| 
 8002e7a:	4313      	orrs	r3, r2
      (uint16_t)initPrm->vm.fPwmDec);
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	f8b2 2062 	ldrh.w	r2, [r2, #98]	@ 0x62
      (uint16_t)initPrm->vm.fPwmInt| 
 8002e82:	4313      	orrs	r3, r2
    Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002e84:	461a      	mov	r2, r3
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	211a      	movs	r1, #26
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fb8e 	bl	80015ac <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.uvloVal| 
          (uint16_t)initPrm->cm.vccVal|
          (uint16_t)initPrm->cm.tsw|
          (uint16_t)initPrm->cm.predEn);
  }
}
 8002e90:	e08a      	b.n	8002fa8 <Powerstep01_SetDeviceParamsToGivenValues+0x3f0>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002e98:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9c:	f000 fa9e 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ea0:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_HOLD,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	2109      	movs	r1, #9
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fb7f 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	f000 fa90 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ebc:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_RUN,
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	210a      	movs	r1, #10
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fb71 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed4:	f000 fa82 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ed8:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_ACC,
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	210b      	movs	r1, #11
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fb63 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tval_RefVoltage_to_RegVal(
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	f000 fa74 	bl	80033dc <Powerstep01_Tval_RefVoltage_to_RegVal>
 8002ef4:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TVAL_DEC,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	210c      	movs	r1, #12
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fb55 	bl	80015ac <Powerstep01_CmdSetParam>
          (uint8_t)initPrm->cm.toffFast|
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
          (uint8_t)initPrm->cm.fastStep);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_T_FAST,
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	210e      	movs	r1, #14
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fb47 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002f24:	eeb0 0a67 	vmov.f32	s0, s15
 8002f28:	f000 fa94 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002f2c:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TON_MIN,
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	210f      	movs	r1, #15
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fb39 	bl	80015ac <Powerstep01_CmdSetParam>
          Powerstep01_Tmin_Time_to_RegVal(
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002f40:	eeb0 0a67 	vmov.f32	s0, s15
 8002f44:	f000 fa86 	bl	8003454 <Powerstep01_Tmin_Time_to_RegVal>
 8002f48:	4603      	mov	r3, r0
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_TOFF_MIN,
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2110      	movs	r1, #16
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fb2b 	bl	80015ac <Powerstep01_CmdSetParam>
          (uint16_t)initPrm->cm.oscClkSel| 
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
          (uint16_t)initPrm->cm.swMode| 
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
          (uint16_t)initPrm->cm.tqReg| 
 8002f62:	4313      	orrs	r3, r2
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b2da      	uxtb	r2, r3
          (uint16_t)initPrm->cm.ocSd| 
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
          (uint16_t)initPrm->cm.tqReg| 
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
          (uint16_t)initPrm->cm.uvloVal| 
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
          (uint16_t)initPrm->cm.ocSd| 
 8002f82:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.vccVal|
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
          (uint16_t)initPrm->cm.uvloVal| 
 8002f8a:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.tsw|
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
          (uint16_t)initPrm->cm.vccVal|
 8002f92:	4313      	orrs	r3, r2
          (uint16_t)initPrm->cm.predEn);
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
          (uint16_t)initPrm->cm.tsw|
 8002f9a:	4313      	orrs	r3, r2
        Powerstep01_CmdSetParam(deviceId, POWERSTEP01_CONFIG,
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	211a      	movs	r1, #26
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fb02 	bl	80015ac <Powerstep01_CmdSetParam>
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <Powerstep01_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 *********************************************************/
void Powerstep01_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  if (Powerstep01_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <Powerstep01_WriteBytes+0x40>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fdb1 	bl	8003b2c <Powerstep01_Board_SpiWriteBytes>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <Powerstep01_WriteBytes+0x28>
  {
    Powerstep01_ErrorHandler(POWERSTEP01_ERROR_1);
 8002fd0:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8002fd4:	f7ff f954 	bl	8002280 <Powerstep01_ErrorHandler>
  }
  
  if (isrFlag)
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <Powerstep01_WriteBytes+0x44>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <Powerstep01_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002fe2:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <Powerstep01_WriteBytes+0x48>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
  }
}                     
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000470 	.word	0x20000470
 8002ff4:	2000048d 	.word	0x2000048d
 8002ff8:	2000048c 	.word	0x2000048c

08002ffc <Powerstep01_AccDec_Steps_s2_to_RegVal>:
 * @param[in] steps_s2 the acceleration or deceleration as
 * steps/s^2, range 14.55 to 59590 steps/s^2
 * @retval The acceleration or deceleration as steps/tick^2
 **********************************************************/
inline uint16_t Powerstep01_AccDec_Steps_s2_to_RegVal(float steps_s2)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s2)*0.068719476736f)+0.5f));
 8003006:	edd7 7a01 	vldr	s15, [r7, #4]
 800300a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003030 <Powerstep01_AccDec_Steps_s2_to_RegVal+0x34>
 800300e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003012:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800301a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301e:	ee17 3a90 	vmov	r3, s15
 8003022:	b29b      	uxth	r3, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	3d8cbccc 	.word	0x3d8cbccc

08003034 <Powerstep01_AccDec_RegVal_to_Steps_s2>:
 * @brief Convert the ACC or DEC register value into step/s^2
 * @param[in] regVal The ACC or DEC register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_AccDec_RegVal_to_Steps_s2(uint32_t regVal)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*14.5519152283f);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800305c <Powerstep01_AccDec_RegVal_to_Steps_s2+0x28>
 800304a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800304e:	eeb0 0a67 	vmov.f32	s0, s15
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	4168d4a5 	.word	0x4168d4a5

08003060 <Powerstep01_BEMFslope_Perc_to_RegVal>:
 * @param[in] percentage BEMF compensation slope percentage,
 * range 0 to 0.4% (0.004) s/step
 * @retval value for ST_SLP, FN_SLP_ACC or FN_SLP_DEC register
 **********************************************************/
inline uint8_t Powerstep01_BEMFslope_Perc_to_RegVal(float percentage)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*637.5f)+0.5f));
 800306a:	edd7 7a01 	vldr	s15, [r7, #4]
 800306e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003098 <Powerstep01_BEMFslope_Perc_to_RegVal+0x38>
 8003072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003076:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800307a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800307e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003082:	edc7 7a00 	vstr	s15, [r7]
 8003086:	783b      	ldrb	r3, [r7, #0]
 8003088:	b2db      	uxtb	r3, r3
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	441f6000 	.word	0x441f6000

0800309c <Powerstep01_BEMFslope_RegVal_to_Perc>:
 * @param[in] regVal The ST_SLP, FN_SLP_ACC or FN_SLP_DEC
 * register value
 * @retval BEMF compensation slope percentage
 **********************************************************/
inline float Powerstep01_BEMFslope_RegVal_to_Perc(uint32_t regVal)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.00156862745098f);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80030c4 <Powerstep01_BEMFslope_RegVal_to_Perc+0x28>
 80030b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80030b6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	3acd9a67 	.word	0x3acd9a67

080030c8 <Powerstep01_FSSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_FSSpd_Steps_s_to_RegVal(float steps_s)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)((float)(steps_s)*0.065536f));
 80030d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80030d6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80030f4 <Powerstep01_FSSpd_Steps_s_to_RegVal+0x2c>
 80030da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e2:	ee17 3a90 	vmov	r3, s15
 80030e6:	b29b      	uxth	r3, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	3d8637bd 	.word	0x3d8637bd

080030f8 <Powerstep01_FSSpd_RegVal_to_Steps_s>:
 * @brief Convert the FS_SPD register value into step/s
 * @param[in] regVal The FS_SPD register value
 * @retval The full Step speed as steps/s
 **********************************************************/
inline float Powerstep01_FSSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return (((float)regVal+0.999f)*15.258789f);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003128 <Powerstep01_FSSpd_RegVal_to_Steps_s+0x30>
 800310e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003112:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800312c <Powerstep01_FSSpd_RegVal_to_Steps_s+0x34>
 8003116:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800311a:	eeb0 0a67 	vmov.f32	s0, s15
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	3f7fbe77 	.word	0x3f7fbe77
 800312c:	41742400 	.word	0x41742400

08003130 <Powerstep01_IntSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.5 steps/s
 * @retval The intersect speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_IntSpd_Steps_s_to_RegVal(float steps_s)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*16.777216f)+0.5f));
 800313a:	edd7 7a01 	vldr	s15, [r7, #4]
 800313e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003164 <Powerstep01_IntSpd_Steps_s_to_RegVal+0x34>
 8003142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003146:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800314a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800314e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003152:	ee17 3a90 	vmov	r3, s15
 8003156:	b29b      	uxth	r3, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	418637bd 	.word	0x418637bd

08003168 <Powerstep01_IntSpd_RegVal_to_Steps_s>:
 * @brief Convert the INT_SPEED register value into step/s
 * @param[in] regVal The INT_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_IntSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.0596045f);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003190 <Powerstep01_IntSpd_RegVal_to_Steps_s+0x28>
 800317e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003182:	eeb0 0a67 	vmov.f32	s0, s15
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	3d7423d9 	.word	0x3d7423d9

08003194 <Powerstep01_KTherm_Comp_to_RegVal>:
 * @param[in] compFactor the float formatted thermal 
 * compensation factor, range 1 to 1.46875
 * @retval value for K_THERM register
 **********************************************************/
inline uint8_t Powerstep01_KTherm_Comp_to_RegVal(float compFactor)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(compFactor)-1.0f)*32.0f)+0.5f));
 800319e:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80031d4 <Powerstep01_KTherm_Comp_to_RegVal+0x40>
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031be:	edc7 7a00 	vstr	s15, [r7]
 80031c2:	783b      	ldrb	r3, [r7, #0]
 80031c4:	b2db      	uxtb	r3, r3
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	42000000 	.word	0x42000000

080031d8 <Powerstep01_KTherm_RegVal_to_Comp>:
 * formatted thermal compensation factor
 * @param[in] regVal The K_THERM register value
 * @retval The float formatted thermal compensation factor
 **********************************************************/
inline float Powerstep01_KTherm_RegVal_to_Comp(uint32_t regVal)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.03125f+1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003208 <Powerstep01_KTherm_RegVal_to_Comp+0x30>
 80031ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031f6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80031fa:	eeb0 0a67 	vmov.f32	s0, s15
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	3d000000 	.word	0x3d000000

0800320c <Powerstep01_Kval_Perc_to_RegVal>:
 * @retval value for KVAL_RUN, KVAL_HOLD, KVAL_ACC or
 * KVAL_DEC register
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline uint8_t Powerstep01_Kval_Perc_to_RegVal(float percentage)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((float)(percentage)*2.56f)+0.5f));
 8003216:	edd7 7a01 	vldr	s15, [r7, #4]
 800321a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003244 <Powerstep01_Kval_Perc_to_RegVal+0x38>
 800321e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003222:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800322a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800322e:	edc7 7a00 	vstr	s15, [r7]
 8003232:	783b      	ldrb	r3, [r7, #0]
 8003234:	b2db      	uxtb	r3, r3
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	4023d70a 	.word	0x4023d70a

08003248 <Powerstep01_Kval_RegVal_to_Perc>:
 * @retval percentage of the power supply voltage applied to
 * the motor windings
 * @note The voltage applied is sinusoidal
 **********************************************************/
inline float Powerstep01_Kval_RegVal_to_Perc(uint32_t regVal)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.390625f);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325a:	eeb5 7a09 	vmov.f32	s14, #89	@ 0x3ec80000  0.3906250
 800325e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <Powerstep01_MaxSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 15.25 to 15610 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MaxSpd_Steps_s_to_RegVal(float steps_s)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*0.065536f)+0.5f));
 800327a:	edd7 7a01 	vldr	s15, [r7, #4]
 800327e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80032a4 <Powerstep01_MaxSpd_Steps_s_to_RegVal+0x34>
 8003282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003286:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800328a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800328e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003292:	ee17 3a90 	vmov	r3, s15
 8003296:	b29b      	uxth	r3, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	3d8637bd 	.word	0x3d8637bd

080032a8 <Powerstep01_MaxSpd_RegVal_to_Steps_s>:
 * @brief Convert the MAX_SPEED register value into step/s
 * @param[in] regVal The MAX_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MaxSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*15.258789f);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80032d0 <Powerstep01_MaxSpd_RegVal_to_Steps_s+0x28>
 80032be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80032c2:	eeb0 0a67 	vmov.f32	s0, s15
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	41742400 	.word	0x41742400

080032d4 <Powerstep01_MinSpd_Steps_s_to_RegVal>:
 * register value
 * @param[in] steps_s the speed as steps/s, range 0 to 976.3 steps/s
 * @retval The speed as steps/tick
 **********************************************************/
inline uint16_t Powerstep01_MinSpd_Steps_s_to_RegVal(float steps_s)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint16_t)(((float)(steps_s)*4.194304f)+0.5f));
 80032de:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003308 <Powerstep01_MinSpd_Steps_s_to_RegVal+0x34>
 80032e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f6:	ee17 3a90 	vmov	r3, s15
 80032fa:	b29b      	uxth	r3, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	408637bd 	.word	0x408637bd

0800330c <Powerstep01_MinSpd_RegVal_to_Steps_s>:
 * @brief Convert the MIN_SPEED register value into step/s
 * @param[in] regVal The MIN_SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_MinSpd_RegVal_to_Steps_s(uint32_t regVal)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.238418579f);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003334 <Powerstep01_MinSpd_RegVal_to_Steps_s+0x28>
 8003322:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003326:	eeb0 0a67 	vmov.f32	s0, s15
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	3e742400 	.word	0x3e742400

08003338 <Powerstep01_Speed_RegVal_to_Steps_s>:
 * @brief Convert the SPEED register value into step/s
 * @param[in] regVal The SPEED register value
 * @retval The speed as steps/s
 **********************************************************/
inline float Powerstep01_Speed_RegVal_to_Steps_s(uint32_t regVal)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return (((float)(regVal))*0.01490116119f);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003360 <Powerstep01_Speed_RegVal_to_Steps_s+0x28>
 800334e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	3c742400 	.word	0x3c742400

08003364 <Powerstep01_StallOcd_Th_to_RegVal>:
 * values for STALL_TH or OCD_TH register
 * @param[in] mV voltage in mV, range 31.25mV to 1000mV
 * @retval value for STALL_TH or OCD_TH register
 **********************************************************/
inline uint8_t Powerstep01_StallOcd_Th_to_RegVal(float mV)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(mV)-31.25f)*0.032f)+0.5f));
 800336e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003372:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80033a4 <Powerstep01_StallOcd_Th_to_RegVal+0x40>
 8003376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800337a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80033a8 <Powerstep01_StallOcd_Th_to_RegVal+0x44>
 800337e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003382:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800338a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338e:	edc7 7a00 	vstr	s15, [r7]
 8003392:	783b      	ldrb	r3, [r7, #0]
 8003394:	b2db      	uxtb	r3, r3
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	41fa0000 	.word	0x41fa0000
 80033a8:	3d03126f 	.word	0x3d03126f

080033ac <Powerstep01_StallOcd_RegVal_to_Th>:
 * to mV
 * @param[in] regVal The STALL_TH or OCD_TH register value
 * @retval voltage in mV
 **********************************************************/
inline float Powerstep01_StallOcd_RegVal_to_Th(uint32_t regVal)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*31.25f);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	ee07 3a90 	vmov	s15, r3
 80033bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c0:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80033d8 <Powerstep01_StallOcd_RegVal_to_Th+0x2c>
 80033c4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	41fa0000 	.word	0x41fa0000

080033dc <Powerstep01_Tval_RefVoltage_to_RegVal>:
 * TVAL_DEC register
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline uint8_t Powerstep01_Tval_RefVoltage_to_RegVal(float voltage_mV)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(voltage_mV)-7.8125f)*0.128f)+0.5f));
 80033e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ea:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800341c <Powerstep01_Tval_RefVoltage_to_RegVal+0x40>
 80033ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003420 <Powerstep01_Tval_RefVoltage_to_RegVal+0x44>
 80033f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003406:	edc7 7a00 	vstr	s15, [r7]
 800340a:	783b      	ldrb	r3, [r7, #0]
 800340c:	b2db      	uxtb	r3, r3
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40fa0000 	.word	0x40fa0000
 8003420:	3e03126f 	.word	0x3e03126f

08003424 <Powerstep01_Tval_RegVal_to_RefVoltage>:
 * @retval voltage in mV
 * @note The voltage corresponds to a peak output current
 * accross the external sense power resistor
 **********************************************************/
inline float Powerstep01_Tval_RegVal_to_RefVoltage(uint32_t regVal)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*7.8125f);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3301      	adds	r3, #1
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003438:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003450 <Powerstep01_Tval_RegVal_to_RefVoltage+0x2c>
 800343c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003440:	eeb0 0a67 	vmov.f32	s0, s15
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40fa0000 	.word	0x40fa0000

08003454 <Powerstep01_Tmin_Time_to_RegVal>:
 * @brief Convert time in us to values for TON_MIN register
 * @param[in] tmin_us time in us, range 0.5us to 64us
 * @retval value for TON_MIN register
 **********************************************************/
inline uint8_t Powerstep01_Tmin_Time_to_RegVal(float tmin_us)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)((((float)(tmin_us)-0.5f)*2.0f)+0.5f));
 800345e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003462:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800346a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800346e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800347a:	edc7 7a00 	vstr	s15, [r7]
 800347e:	783b      	ldrb	r3, [r7, #0]
 8003480:	b2db      	uxtb	r3, r3
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <Powerstep01_Tmin_RegVal_to_Time>:
 * @brief Convert values for TON_MIN or TOFF_MIN register to time in us
 * @param[in] regVal The TON_MIN or TOFF_MIN register value
 * @retval time in us
 **********************************************************/
inline float Powerstep01_Tmin_RegVal_to_Time(uint32_t regVal)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  return (((float)(regVal+1))*0.5f);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3301      	adds	r3, #1
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80034aa:	eeb0 0a67 	vmov.f32	s0, s15
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <HAL_MspInit+0x4c>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003504 <HAL_MspInit+0x4c>)
 80034c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <HAL_MspInit+0x4c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <HAL_MspInit+0x4c>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	4a08      	ldr	r2, [pc, #32]	@ (8003504 <HAL_MspInit+0x4c>)
 80034e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_MspInit+0x4c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034f6:	2007      	movs	r0, #7
 80034f8:	f000 ff6c 	bl	80043d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_SPI_MspInit+0x84>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12b      	bne.n	8003582 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <HAL_SPI_MspInit+0x88>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <HAL_SPI_MspInit+0x88>)
 8003534:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003538:	6453      	str	r3, [r2, #68]	@ 0x44
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <HAL_SPI_MspInit+0x88>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_SPI_MspInit+0x88>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	4a10      	ldr	r2, [pc, #64]	@ (8003590 <HAL_SPI_MspInit+0x88>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6313      	str	r3, [r2, #48]	@ 0x30
 8003556:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <HAL_SPI_MspInit+0x88>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003562:	23e0      	movs	r3, #224	@ 0xe0
 8003564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356e:	2303      	movs	r3, #3
 8003570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003572:	2305      	movs	r3, #5
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	4805      	ldr	r0, [pc, #20]	@ (8003594 <HAL_SPI_MspInit+0x8c>)
 800357e:	f000 fffd 	bl	800457c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003582:	bf00      	nop
 8003584:	3728      	adds	r7, #40	@ 0x28
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40013000 	.word	0x40013000
 8003590:	40023800 	.word	0x40023800
 8003594:	40020000 	.word	0x40020000

08003598 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0e      	ldr	r2, [pc, #56]	@ (80035e0 <HAL_TIM_PWM_MspInit+0x48>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d115      	bne.n	80035d6 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b0d      	ldr	r3, [pc, #52]	@ (80035e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	4a0c      	ldr	r2, [pc, #48]	@ (80035e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ba:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	201d      	movs	r0, #29
 80035cc:	f000 ff0d 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035d0:	201d      	movs	r0, #29
 80035d2:	f000 ff26 	bl	8004422 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40023800 	.word	0x40023800

080035e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 030c 	add.w	r3, r7, #12
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a12      	ldr	r2, [pc, #72]	@ (8003650 <HAL_TIM_MspPostInit+0x68>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d11d      	bne.n	8003646 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <HAL_TIM_MspPostInit+0x6c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a10      	ldr	r2, [pc, #64]	@ (8003654 <HAL_TIM_MspPostInit+0x6c>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b0e      	ldr	r3, [pc, #56]	@ (8003654 <HAL_TIM_MspPostInit+0x6c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = STEP_CLOCK_Pin_Pin;
 8003626:	2380      	movs	r3, #128	@ 0x80
 8003628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003636:	2302      	movs	r3, #2
 8003638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_CLOCK_Pin_GPIO_Port, &GPIO_InitStruct);
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	4619      	mov	r1, r3
 8003640:	4805      	ldr	r0, [pc, #20]	@ (8003658 <HAL_TIM_MspPostInit+0x70>)
 8003642:	f000 ff9b 	bl	800457c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003646:	bf00      	nop
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40000400 	.word	0x40000400
 8003654:	40023800 	.word	0x40023800
 8003658:	40020800 	.word	0x40020800

0800365c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	@ (80036f0 <HAL_UART_MspInit+0x94>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d133      	bne.n	80036e6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <HAL_UART_MspInit+0x98>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_UART_MspInit+0x98>)
 8003688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800368c:	6413      	str	r3, [r2, #64]	@ 0x40
 800368e:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_UART_MspInit+0x98>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <HAL_UART_MspInit+0x98>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	4a14      	ldr	r2, [pc, #80]	@ (80036f4 <HAL_UART_MspInit+0x98>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_UART_MspInit+0x98>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036b6:	230c      	movs	r3, #12
 80036b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036c6:	2307      	movs	r3, #7
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4809      	ldr	r0, [pc, #36]	@ (80036f8 <HAL_UART_MspInit+0x9c>)
 80036d2:	f000 ff53 	bl	800457c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	2026      	movs	r0, #38	@ 0x26
 80036dc:	f000 fe85 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036e0:	2026      	movs	r0, #38	@ 0x26
 80036e2:	f000 fe9e 	bl	8004422 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	@ 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40004400 	.word	0x40004400
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020000 	.word	0x40020000

080036fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <NMI_Handler+0x4>

08003704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <HardFault_Handler+0x4>

0800370c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <MemManage_Handler+0x4>

08003714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <BusFault_Handler+0x4>

0800371c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <UsageFault_Handler+0x4>

08003724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003752:	f000 fd2b 	bl	80041ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}

0800375a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUSY_Pin_Pin);
 800375e:	2020      	movs	r0, #32
 8003760:	f001 f8d2 	bl	8004908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}

08003768 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <TIM3_IRQHandler+0x10>)
 800376e:	f002 fc09 	bl	8005f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000234 	.word	0x20000234

0800377c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <USART2_IRQHandler+0x10>)
 8003782:	f003 fb51 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000027c 	.word	0x2000027c

08003790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FLAG_Pin_Pin);
 8003794:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003798:	f001 f8b6 	bl	8004908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a8:	4a14      	ldr	r2, [pc, #80]	@ (80037fc <_sbrk+0x5c>)
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <_sbrk+0x60>)
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037b4:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <_sbrk+0x64>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037bc:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <_sbrk+0x64>)
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <_sbrk+0x68>)
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d207      	bcs.n	80037e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d0:	f004 fb2a 	bl	8007e28 <__errno>
 80037d4:	4603      	mov	r3, r0
 80037d6:	220c      	movs	r2, #12
 80037d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e009      	b.n	80037f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e0:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037e6:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <_sbrk+0x64>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <_sbrk+0x64>)
 80037f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20020000 	.word	0x20020000
 8003800:	00000400 	.word	0x00000400
 8003804:	20000490 	.word	0x20000490
 8003808:	20000688 	.word	0x20000688

0800380c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <SystemInit+0x20>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <SystemInit+0x20>)
 8003818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800381c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <Powerstep01_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void Powerstep01_Board_Delay(uint32_t delay)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fcd7 	bl	80041ec <HAL_Delay>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <Powerstep01_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_DisableIrq(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800384a:	b672      	cpsid	i
}
 800384c:	bf00      	nop
  __disable_irq();
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <Powerstep01_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void Powerstep01_Board_EnableIrq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800385c:	b662      	cpsie	i
}
 800385e:	bf00      	nop
  __enable_irq();
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <Powerstep01_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the powerSTEP01s
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
  **********************************************************/
void Powerstep01_Board_GpioInit(uint8_t deviceId)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  if (deviceId==0)
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 8082 	bne.w	8003982 <Powerstep01_Board_GpioInit+0x116>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	4b42      	ldr	r3, [pc, #264]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	4a41      	ldr	r2, [pc, #260]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	6313      	str	r3, [r2, #48]	@ 0x30
 800388e:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a3a      	ldr	r2, [pc, #232]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b38      	ldr	r3, [pc, #224]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	4b34      	ldr	r3, [pc, #208]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	4a33      	ldr	r2, [pc, #204]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c6:	4b31      	ldr	r3, [pc, #196]	@ (800398c <Powerstep01_Board_GpioInit+0x120>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure Powerstep01 - Busy pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_BUSY_PIN;
 80038d2:	2320      	movs	r3, #32
 80038d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80038d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80038da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038dc:	2301      	movs	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80038e0:	2301      	movs	r3, #1
 80038e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	4829      	ldr	r0, [pc, #164]	@ (8003990 <Powerstep01_Board_GpioInit+0x124>)
 80038ec:	f000 fe46 	bl	800457c <HAL_GPIO_Init>
    
    /* Set Priority of Exti line Interrupt used for the busy interrupt*/ 
    HAL_NVIC_SetPriority(BUSY_EXTI_LINE_IRQn, 6, 0);
 80038f0:	2200      	movs	r2, #0
 80038f2:	2106      	movs	r1, #6
 80038f4:	2017      	movs	r0, #23
 80038f6:	f000 fd78 	bl	80043ea <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line Interrupt used for the busy interrupt*/
    HAL_NVIC_EnableIRQ(BUSY_EXTI_LINE_IRQn);    
 80038fa:	2017      	movs	r0, #23
 80038fc:	f000 fd91 	bl	8004422 <HAL_NVIC_EnableIRQ>
    
    /* Configure Powerstep01 - Flag pin --------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003906:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800390a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800390c:	2301      	movs	r3, #1
 800390e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003910:	2301      	movs	r3, #1
 8003912:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	4619      	mov	r1, r3
 800391a:	481e      	ldr	r0, [pc, #120]	@ (8003994 <Powerstep01_Board_GpioInit+0x128>)
 800391c:	f000 fe2e 	bl	800457c <HAL_GPIO_Init>
    
    /* Set Priority of Exti lineInterrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(FLAG_EXTI_LINE_IRQn, 5, 0);
 8003920:	2200      	movs	r2, #0
 8003922:	2105      	movs	r1, #5
 8003924:	2028      	movs	r0, #40	@ 0x28
 8003926:	f000 fd60 	bl	80043ea <HAL_NVIC_SetPriority>
      
    /* Enable the Exti line  Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(FLAG_EXTI_LINE_IRQn);    
 800392a:	2028      	movs	r0, #40	@ 0x28
 800392c:	f000 fd79 	bl	8004422 <HAL_NVIC_EnableIRQ>
  
    /* Configure Powerstep01 - CS pin ----------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003930:	2340      	movs	r3, #64	@ 0x40
 8003932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003934:	2301      	movs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800393c:	2301      	movs	r3, #1
 800393e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	4812      	ldr	r0, [pc, #72]	@ (8003990 <Powerstep01_Board_GpioInit+0x124>)
 8003948:	f000 fe18 	bl	800457c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 800394c:	2201      	movs	r2, #1
 800394e:	2140      	movs	r1, #64	@ 0x40
 8003950:	480f      	ldr	r0, [pc, #60]	@ (8003990 <Powerstep01_Board_GpioInit+0x124>)
 8003952:	f000 ffbf 	bl	80048d4 <HAL_GPIO_WritePin>
    
    /* Configure Powerstep01 - STBY/RESET pin --------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN;
 8003956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800395a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395c:	2301      	movs	r3, #1
 800395e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003964:	2301      	movs	r3, #1
 8003966:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	4809      	ldr	r0, [pc, #36]	@ (8003994 <Powerstep01_Board_GpioInit+0x128>)
 8003970:	f000 fe04 	bl	800457c <HAL_GPIO_Init>
    
    /* Reset Powerstep0*/
    Powerstep01_Board_Reset(deviceId);
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f88e 	bl	8003a98 <Powerstep01_Board_Reset>
    
    /* Let a delay after reset */
    Powerstep01_Board_Delay(1); 
 800397c:	2001      	movs	r0, #1
 800397e:	f7ff ff57 	bl	8003830 <Powerstep01_Board_Delay>
  }
}
 8003982:	bf00      	nop
 8003984:	3728      	adds	r7, #40	@ 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	40020400 	.word	0x40020400
 8003994:	40020000 	.word	0x40020000

08003998 <Powerstep01_Board_StepClockInit>:
 * @brief  Initialises the step clock by setting 
 * corresponding GPIO, Timer, Pwm,...
 * @retval None
 **********************************************************/
void Powerstep01_Board_StepClockInit(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08e      	sub	sp, #56	@ 0x38
 800399c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_ClockConfigTypeDef sClockSourceConfig;
  
  hTimStepClock.Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_STEP_CLOCK;
 800399e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a10 <Powerstep01_Board_StepClockInit+0x78>)
 80039a2:	601a      	str	r2, [r3, #0]
  hTimStepClock.Init.Prescaler = TIMER_PRESCALER -1;
 80039a4:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039a6:	223f      	movs	r2, #63	@ 0x3f
 80039a8:	605a      	str	r2, [r3, #4]
  hTimStepClock.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039aa:	4b18      	ldr	r3, [pc, #96]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  hTimStepClock.Init.Period = 0;
 80039b0:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
  hTimStepClock.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b6:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(&hTimStepClock);
 80039bc:	4813      	ldr	r0, [pc, #76]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039be:	f002 f8bd 	bl	8005b3c <HAL_TIM_PWM_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c6:	607b      	str	r3, [r7, #4]
  HAL_TIM_ConfigClockSource(&hTimStepClock, &sClockSourceConfig);
 80039c8:	1d3b      	adds	r3, r7, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	480f      	ldr	r0, [pc, #60]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039ce:	f002 fc8b 	bl	80062e8 <HAL_TIM_ConfigClockSource>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039d2:	2360      	movs	r3, #96	@ 0x60
 80039d4:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039de:	2300      	movs	r3, #0
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_TIM_PWM_ConfigChannel(&hTimStepClock, &sConfigOC, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	2204      	movs	r2, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4808      	ldr	r0, [pc, #32]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 80039ec:	f002 fbba 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
  HAL_TIMEx_MasterConfigSynchronization(&hTimStepClock, &sMasterConfig);
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	4619      	mov	r1, r3
 80039fe:	4803      	ldr	r0, [pc, #12]	@ (8003a0c <Powerstep01_Board_StepClockInit+0x74>)
 8003a00:	f003 f882 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003a04:	bf00      	nop
 8003a06:	3738      	adds	r7, #56	@ 0x38
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200004ec 	.word	0x200004ec
 8003a10:	40000400 	.word	0x40000400

08003a14 <Powerstep01_Board_StartStepClock>:
 * @param[in] newFreq in Hz of the step clock
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void Powerstep01_Board_StartStepClock(uint16_t newFreq)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003a1e:	f001 f8b1 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8003a22:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * newFreq)) - 1;
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	019b      	lsls	r3, r3, #6
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a30:	3b01      	subs	r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimStepClock, period);
 8003a34:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <Powerstep01_Board_StartStepClock+0x48>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a3c:	4a07      	ldr	r2, [pc, #28]	@ (8003a5c <Powerstep01_Board_StartStepClock+0x48>)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK, period >> 1);
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <Powerstep01_Board_StartStepClock+0x48>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	0852      	lsrs	r2, r2, #1
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start_IT(&hTimStepClock, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);  
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	4803      	ldr	r0, [pc, #12]	@ (8003a5c <Powerstep01_Board_StartStepClock+0x48>)
 8003a50:	f002 f8c4 	bl	8005bdc <HAL_TIM_PWM_Start_IT>
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200004ec 	.word	0x200004ec

08003a60 <Powerstep01_Board_StopStepClock>:
/******************************************************//**
 * @brief  Stops the PWM uses for the step clock
 * @retval None
 **********************************************************/
void Powerstep01_Board_StopStepClock(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop_IT(&hTimStepClock,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_STEP_CLOCK);
 8003a64:	2104      	movs	r1, #4
 8003a66:	4802      	ldr	r0, [pc, #8]	@ (8003a70 <Powerstep01_Board_StopStepClock+0x10>)
 8003a68:	f002 f9ce 	bl	8005e08 <HAL_TIM_PWM_Stop_IT>
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	200004ec 	.word	0x200004ec

08003a74 <Powerstep01_Board_ReleaseReset>:
 * @brief  Releases the powerSTEP01 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_ReleaseReset(uint8_t deviceId)
{ 
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_SET); 
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a84:	4803      	ldr	r0, [pc, #12]	@ (8003a94 <Powerstep01_Board_ReleaseReset+0x20>)
 8003a86:	f000 ff25 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40020000 	.word	0x40020000

08003a98 <Powerstep01_Board_Reset>:
 * @brief  Resets the powerSTEP01 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void Powerstep01_Board_Reset(uint8_t deviceId)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_STBY_RESET_PIN, GPIO_PIN_RESET); 
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aa8:	4803      	ldr	r0, [pc, #12]	@ (8003ab8 <Powerstep01_Board_Reset+0x20>)
 8003aaa:	f000 ff13 	bl	80048d4 <HAL_GPIO_WritePin>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40020000 	.word	0x40020000

08003abc <Powerstep01_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by powerSTEP01
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t Powerstep01_Board_SpiInit(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003ac2:	4b18      	ldr	r3, [pc, #96]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003ac4:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <Powerstep01_Board_SpiInit+0x6c>)
 8003ac6:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003ac8:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003aca:	2220      	movs	r2, #32
 8003acc:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003ace:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003ada:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003adc:	2202      	movs	r2, #2
 8003ade:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003ae0:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003aec:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003af2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afe:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003b00:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	625a      	str	r2, [r3, #36]	@ 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003b06:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b0c:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003b0e:	4805      	ldr	r0, [pc, #20]	@ (8003b24 <Powerstep01_Board_SpiInit+0x68>)
 8003b10:	f001 fd06 	bl	8005520 <HAL_SPI_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8003b18:	79fb      	ldrb	r3, [r7, #7]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000494 	.word	0x20000494
 8003b28:	40013000 	.word	0x40013000

08003b2c <Powerstep01_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t Powerstep01_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2140      	movs	r1, #64	@ 0x40
 8003b3e:	4816      	ldr	r0, [pc, #88]	@ (8003b98 <Powerstep01_Board_SpiWriteBytes+0x6c>)
 8003b40:	f000 fec8 	bl	80048d4 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e016      	b.n	8003b78 <Powerstep01_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8003b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2301      	movs	r3, #1
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	4811      	ldr	r0, [pc, #68]	@ (8003b9c <Powerstep01_Board_SpiWriteBytes+0x70>)
 8003b58:	f001 fd6b 	bl	8005632 <HAL_SPI_TransmitReceive>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <Powerstep01_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d3e4      	bcc.n	8003b4a <Powerstep01_Board_SpiWriteBytes+0x1e>
 8003b80:	e000      	b.n	8003b84 <Powerstep01_Board_SpiWriteBytes+0x58>
      break;
 8003b82:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003b84:	2201      	movs	r2, #1
 8003b86:	2140      	movs	r1, #64	@ 0x40
 8003b88:	4803      	ldr	r0, [pc, #12]	@ (8003b98 <Powerstep01_Board_SpiWriteBytes+0x6c>)
 8003b8a:	f000 fea3 	bl	80048d4 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	20000494 	.word	0x20000494

08003ba0 <Powerstep01_Board_BUSY_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the BUSY pin state.
 * @retval The BUSY pin value.
 **********************************************************/
uint32_t Powerstep01_Board_BUSY_PIN_GetState(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_BUSY_PORT, BSP_MOTOR_CONTROL_BOARD_BUSY_PIN);
 8003ba4:	2120      	movs	r1, #32
 8003ba6:	4803      	ldr	r0, [pc, #12]	@ (8003bb4 <Powerstep01_Board_BUSY_PIN_GetState+0x14>)
 8003ba8:	f000 fe7c 	bl	80048a4 <HAL_GPIO_ReadPin>
 8003bac:	4603      	mov	r3, r0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40020400 	.word	0x40020400

08003bb8 <Powerstep01_Board_FLAG_PIN_GetState>:
/******************************************************//**
 * @brief  Returns the FLAG pin state.
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t Powerstep01_Board_FLAG_PIN_GetState(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, BSP_MOTOR_CONTROL_BOARD_FLAG_PIN);
 8003bbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bc0:	4802      	ldr	r0, [pc, #8]	@ (8003bcc <Powerstep01_Board_FLAG_PIN_GetState+0x14>)
 8003bc2:	f000 fe6f 	bl	80048a4 <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <L6474_GetMotorHandle>:

/** @defgroup MOTOR_CONTROL_Weak_Private_Functions MOTOR CONTROL Weak Private Functions
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <l647x_GetMotorHandle>:
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	2300      	movs	r3, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <L6206_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	2300      	movs	r3, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	2300      	movs	r3, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	2300      	movs	r3, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	2300      	movs	r3, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <BSP_MotorControl_AttachErrorHandler+0x26>
 8003c50:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
 8003c64:	e004      	b.n	8003c70 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003c66:	f640 0002 	movw	r0, #2050	@ 0x802
 8003c6a:	f000 f843 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }
}
 8003c6e:	bf00      	nop
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000534 	.word	0x20000534

08003c7c <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003c96:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
 8003ca0:	e004      	b.n	8003cac <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003ca2:	f640 0003 	movw	r0, #2051	@ 0x803
 8003ca6:	f000 f825 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000534 	.word	0x20000534

08003cb8 <BSP_MotorControl_AttachBusyInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Busy interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachBusyInterrupt(void (*callback)(void))
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachBusyInterrupt != 0))
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <BSP_MotorControl_AttachBusyInterrupt+0x26>
 8003cc8:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <BSP_MotorControl_AttachBusyInterrupt+0x26>
  {
    motorDrvHandle->AttachBusyInterrupt(callback);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <BSP_MotorControl_AttachBusyInterrupt+0x38>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
 8003cdc:	e004      	b.n	8003ce8 <BSP_MotorControl_AttachBusyInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003cde:	f640 0004 	movw	r0, #2052	@ 0x804
 8003ce2:	f000 f807 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000534 	.word	0x20000534

08003cf4 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <BSP_MotorControl_ErrorHandler+0x38>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <BSP_MotorControl_ErrorHandler+0x2e>
 8003d06:	4b09      	ldr	r3, [pc, #36]	@ (8003d2c <BSP_MotorControl_ErrorHandler+0x38>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <BSP_MotorControl_ErrorHandler+0x38>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003d20:	e000      	b.n	8003d24 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003d22:	e7fe      	b.n	8003d22 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000534 	.word	0x20000534

08003d30 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <BSP_MotorControl_Init+0x3c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <BSP_MotorControl_Init+0x2a>
 8003d44:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <BSP_MotorControl_Init+0x3c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003d4e:	4b07      	ldr	r3, [pc, #28]	@ (8003d6c <BSP_MotorControl_Init+0x3c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6838      	ldr	r0, [r7, #0]
 8003d56:	4798      	blx	r3
 8003d58:	e004      	b.n	8003d64 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8003d5a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d5e:	f7ff ffc9 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000534 	.word	0x20000534

08003d70 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <BSP_MotorControl_GetPosition+0x44>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <BSP_MotorControl_GetPosition+0x30>
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <BSP_MotorControl_GetPosition+0x44>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 8003d90:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <BSP_MotorControl_GetPosition+0x44>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d96:	79fa      	ldrb	r2, [r7, #7]
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4798      	blx	r3
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	e003      	b.n	8003da8 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 8003da0:	f640 000e 	movw	r0, #2062	@ 0x80e
 8003da4:	f7ff ffa6 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000534 	.word	0x20000534

08003db8 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00f      	beq.n	8003dee <BSP_MotorControl_CmdGetStatus+0x36>
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003dda:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	79fa      	ldrb	r2, [r7, #7]
 8003de4:	4610      	mov	r0, r2
 8003de6:	4798      	blx	r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	81fb      	strh	r3, [r7, #14]
 8003dec:	e003      	b.n	8003df6 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003dee:	f640 0022 	movw	r0, #2082	@ 0x822
 8003df2:	f7ff ff7f 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003df6:	89fb      	ldrh	r3, [r7, #14]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000534 	.word	0x20000534

08003e04 <BSP_MotorControl_CheckBusyHw>:
 * busy pin position. 
 * The busy pin is shared between all devices.
 * @retval One if at least one device is busy, otherwise zero
 **********************************************************/
uint8_t BSP_MotorControl_CheckBusyHw(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CheckBusyHw != 0))
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <BSP_MotorControl_CheckBusyHw+0x2e>
 8003e16:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <BSP_MotorControl_CheckBusyHw+0x2e>
  {
    value = motorDrvHandle->CheckBusyHw();
 8003e22:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <BSP_MotorControl_CheckBusyHw+0x40>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e2a:	4798      	blx	r3
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	71fb      	strb	r3, [r7, #7]
 8003e30:	e003      	b.n	8003e3a <BSP_MotorControl_CheckBusyHw+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(43);
 8003e32:	f640 002b 	movw	r0, #2091	@ 0x82b
 8003e36:	f7ff ff5d 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000534 	.word	0x20000534

08003e48 <BSP_MotorControl_CmdHardHiZ>:
 * @note if two Brush DC motors use the same power bridge, the 
 * power bridge will be disable only if the two motors are
 * stopped
 **********************************************************/
void BSP_MotorControl_CmdHardHiZ(uint8_t deviceId)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdHardHiZ != 0))
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <BSP_MotorControl_CmdHardHiZ+0x40>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00d      	beq.n	8003e76 <BSP_MotorControl_CmdHardHiZ+0x2e>
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <BSP_MotorControl_CmdHardHiZ+0x40>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <BSP_MotorControl_CmdHardHiZ+0x2e>
  {
    motorDrvHandle->CmdHardHiZ(deviceId);
 8003e66:	4b08      	ldr	r3, [pc, #32]	@ (8003e88 <BSP_MotorControl_CmdHardHiZ+0x40>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e6e:	79fa      	ldrb	r2, [r7, #7]
 8003e70:	4610      	mov	r0, r2
 8003e72:	4798      	blx	r3
 8003e74:	e004      	b.n	8003e80 <BSP_MotorControl_CmdHardHiZ+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(46);
 8003e76:	f640 002e 	movw	r0, #2094	@ 0x82e
 8003e7a:	f7ff ff3b 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000534 	.word	0x20000534

08003e8c <BSP_MotorControl_CmdResetPos>:
 * @brief Issues Reset Pos command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdResetPos(uint8_t deviceId)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdResetPos != 0))
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <BSP_MotorControl_CmdResetPos+0x40>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <BSP_MotorControl_CmdResetPos+0x2e>
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <BSP_MotorControl_CmdResetPos+0x40>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <BSP_MotorControl_CmdResetPos+0x2e>
  {
    motorDrvHandle->CmdResetPos(deviceId);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <BSP_MotorControl_CmdResetPos+0x40>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003eb2:	79fa      	ldrb	r2, [r7, #7]
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4798      	blx	r3
 8003eb8:	e004      	b.n	8003ec4 <BSP_MotorControl_CmdResetPos+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(49);
 8003eba:	f640 0031 	movw	r0, #2097	@ 0x831
 8003ebe:	f7ff ff19 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000534 	.word	0x20000534

08003ed0 <BSP_MotorControl_SendQueuedCommands>:
 * @brief Sends commands stored in the queue by previously
 * BSP_MotorControl_QueueCommands
 * @retval None
 *********************************************************/
void BSP_MotorControl_SendQueuedCommands(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SendQueuedCommands != 0))
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <BSP_MotorControl_SendQueuedCommands+0x34>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <BSP_MotorControl_SendQueuedCommands+0x24>
 8003edc:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <BSP_MotorControl_SendQueuedCommands+0x34>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <BSP_MotorControl_SendQueuedCommands+0x24>
  {
    motorDrvHandle->SendQueuedCommands();
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <BSP_MotorControl_SendQueuedCommands+0x34>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ef0:	4798      	blx	r3
 8003ef2:	e004      	b.n	8003efe <BSP_MotorControl_SendQueuedCommands+0x2e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(57);
 8003ef4:	f640 0039 	movw	r0, #2105	@ 0x839
 8003ef8:	f7ff fefc 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000534 	.word	0x20000534

08003f08 <BSP_MotorControl_QueueCommands>:
 * except SET_PARAM, GET_PARAM, GET_STATUS)
 * @param[in] value argument of the command to queue
 * @retval None
 *********************************************************/
void BSP_MotorControl_QueueCommands(uint8_t deviceId, uint8_t command, int32_t value)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	603a      	str	r2, [r7, #0]
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	460b      	mov	r3, r1
 8003f16:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->QueueCommands != 0))
 8003f18:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <BSP_MotorControl_QueueCommands+0x48>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <BSP_MotorControl_QueueCommands+0x36>
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <BSP_MotorControl_QueueCommands+0x48>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <BSP_MotorControl_QueueCommands+0x36>
  {
    motorDrvHandle->QueueCommands(deviceId, command, value);
 8003f2c:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <BSP_MotorControl_QueueCommands+0x48>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f34:	79b9      	ldrb	r1, [r7, #6]
 8003f36:	79f8      	ldrb	r0, [r7, #7]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	4798      	blx	r3
 8003f3c:	e004      	b.n	8003f48 <BSP_MotorControl_QueueCommands+0x40>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(58);
 8003f3e:	f640 003a 	movw	r0, #2106	@ 0x83a
 8003f42:	f7ff fed7 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000534 	.word	0x20000534

08003f54 <BSP_MotorControl_CmdSoftStop>:
 * @brief Issues Soft Stop command
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @retval None
 **********************************************************/
void BSP_MotorControl_CmdSoftStop(uint8_t deviceId)
{	
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdSoftStop != 0))
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <BSP_MotorControl_CmdSoftStop+0x40>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <BSP_MotorControl_CmdSoftStop+0x2e>
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <BSP_MotorControl_CmdSoftStop+0x40>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <BSP_MotorControl_CmdSoftStop+0x2e>
  {
    motorDrvHandle->CmdSoftStop(deviceId);
 8003f72:	4b08      	ldr	r3, [pc, #32]	@ (8003f94 <BSP_MotorControl_CmdSoftStop+0x40>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003f7a:	79fa      	ldrb	r2, [r7, #7]
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4798      	blx	r3
 8003f80:	e004      	b.n	8003f8c <BSP_MotorControl_CmdSoftStop+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(62);
 8003f82:	f640 003e 	movw	r0, #2110	@ 0x83e
 8003f86:	f7ff feb5 	bl	8003cf4 <BSP_MotorControl_ErrorHandler>
  }    
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000534 	.word	0x20000534

08003f98 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	80fb      	strh	r3, [r7, #6]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003fa8:	4a40      	ldr	r2, [pc, #256]	@ (80040ac <BSP_MotorControl_SetNbDevices+0x114>)
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	f641 124a 	movw	r2, #6474	@ 0x194a
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d105      	bne.n	8003fc8 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003fbc:	f7ff fe08 	bl	8003bd0 <L6474_GetMotorHandle>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e055      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003fce:	f7fd fc7d 	bl	80018cc <Powerstep01_GetMotorHandle>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4a36      	ldr	r2, [pc, #216]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e04c      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	f641 023e 	movw	r2, #6206	@ 0x183e
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d105      	bne.n	8003ff0 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003fe4:	f7ff fe0c 	bl	8003c00 <L6206_GetMotorHandle>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4a31      	ldr	r2, [pc, #196]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e041      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	f5b3 5fc2 	cmp.w	r3, #6208	@ 0x1840
 8003ff6:	d105      	bne.n	8004004 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003ff8:	f7ff fe0a 	bl	8003c10 <L6208_GetMotorHandle>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e037      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	2bdc      	cmp	r3, #220	@ 0xdc
 8004008:	d105      	bne.n	8004016 <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 800400a:	f7ff fe09 	bl	8003c20 <Stspin220_GetMotorHandle>
 800400e:	4603      	mov	r3, r0
 8004010:	4a27      	ldr	r2, [pc, #156]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e02e      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	f641 1246 	movw	r2, #6470	@ 0x1946
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <BSP_MotorControl_SetNbDevices+0x92>
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	f641 1248 	movw	r2, #6472	@ 0x1948
 8004026:	4293      	cmp	r3, r2
 8004028:	d105      	bne.n	8004036 <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 800402a:	f7ff fdd9 	bl	8003be0 <l647x_GetMotorHandle>
 800402e:	4603      	mov	r3, r0
 8004030:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e01e      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	f641 1250 	movw	r2, #6480	@ 0x1950
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <BSP_MotorControl_SetNbDevices+0xb2>
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	f641 1252 	movw	r2, #6482	@ 0x1952
 8004046:	4293      	cmp	r3, r2
 8004048:	d105      	bne.n	8004056 <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 800404a:	f7ff fdd1 	bl	8003bf0 <l648x_GetMotorHandle>
 800404e:	4603      	mov	r3, r0
 8004050:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e00e      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	2bf0      	cmp	r3, #240	@ 0xf0
 800405a:	d002      	beq.n	8004062 <BSP_MotorControl_SetNbDevices+0xca>
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	2bfa      	cmp	r3, #250	@ 0xfa
 8004060:	d105      	bne.n	800406e <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8004062:	f7ff fde5 	bl	8003c30 <Stspin240_250_GetMotorHandle>
 8004066:	4603      	mov	r3, r0
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e002      	b.n	8004074 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 800406e:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d011      	beq.n	80040a0 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 800407c:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
  if ((motorDrvHandle != 0)&&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004088:	797b      	ldrb	r3, [r7, #5]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <BSP_MotorControl_SetNbDevices+0x118>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8004096:	797a      	ldrb	r2, [r7, #5]
 8004098:	4610      	mov	r0, r2
 800409a:	4798      	blx	r3
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000538 	.word	0x20000538
 80040b0:	20000534 	.word	0x20000534

080040b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80040b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80040b8:	f7ff fba8 	bl	800380c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040bc:	480c      	ldr	r0, [pc, #48]	@ (80040f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040be:	490d      	ldr	r1, [pc, #52]	@ (80040f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040c0:	4a0d      	ldr	r2, [pc, #52]	@ (80040f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c4:	e002      	b.n	80040cc <LoopCopyDataInit>

080040c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ca:	3304      	adds	r3, #4

080040cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040d0:	d3f9      	bcc.n	80040c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040d2:	4a0a      	ldr	r2, [pc, #40]	@ (80040fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040d4:	4c0a      	ldr	r4, [pc, #40]	@ (8004100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d8:	e001      	b.n	80040de <LoopFillZerobss>

080040da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040dc:	3204      	adds	r2, #4

080040de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040e0:	d3fb      	bcc.n	80040da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80040e2:	f003 fea7 	bl	8007e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040e6:	f7fc fa81 	bl	80005ec <main>
  bx  lr    
 80040ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f4:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 80040f8:	08009450 	.word	0x08009450
  ldr r2, =_sbss
 80040fc:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8004100:	20000688 	.word	0x20000688

08004104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004104:	e7fe      	b.n	8004104 <ADC_IRQHandler>
	...

08004108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800410c:	4b0e      	ldr	r3, [pc, #56]	@ (8004148 <HAL_Init+0x40>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0d      	ldr	r2, [pc, #52]	@ (8004148 <HAL_Init+0x40>)
 8004112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_Init+0x40>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0a      	ldr	r2, [pc, #40]	@ (8004148 <HAL_Init+0x40>)
 800411e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004124:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <HAL_Init+0x40>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a07      	ldr	r2, [pc, #28]	@ (8004148 <HAL_Init+0x40>)
 800412a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004130:	2003      	movs	r0, #3
 8004132:	f000 f94f 	bl	80043d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004136:	2000      	movs	r0, #0
 8004138:	f000 f808 	bl	800414c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800413c:	f7ff f9bc 	bl	80034b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023c00 	.word	0x40023c00

0800414c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_InitTick+0x54>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <HAL_InitTick+0x58>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4619      	mov	r1, r3
 800415e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004162:	fbb3 f3f1 	udiv	r3, r3, r1
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f967 	bl	800443e <HAL_SYSTICK_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e00e      	b.n	8004198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d80a      	bhi.n	8004196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004180:	2200      	movs	r2, #0
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	f000 f92f 	bl	80043ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800418c:	4a06      	ldr	r2, [pc, #24]	@ (80041a8 <HAL_InitTick+0x5c>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000164 	.word	0x20000164
 80041a4:	2000016c 	.word	0x2000016c
 80041a8:	20000168 	.word	0x20000168

080041ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_IncTick+0x20>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_IncTick+0x24>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4413      	add	r3, r2
 80041bc:	4a04      	ldr	r2, [pc, #16]	@ (80041d0 <HAL_IncTick+0x24>)
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	2000016c 	.word	0x2000016c
 80041d0:	2000053c 	.word	0x2000053c

080041d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return uwTick;
 80041d8:	4b03      	ldr	r3, [pc, #12]	@ (80041e8 <HAL_GetTick+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000053c 	.word	0x2000053c

080041ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f4:	f7ff ffee 	bl	80041d4 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d005      	beq.n	8004212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004206:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <HAL_Delay+0x44>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004212:	bf00      	nop
 8004214:	f7ff ffde 	bl	80041d4 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	429a      	cmp	r2, r3
 8004222:	d8f7      	bhi.n	8004214 <HAL_Delay+0x28>
  {
  }
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	2000016c 	.word	0x2000016c

08004234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004250:	4013      	ands	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800425c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004266:	4a04      	ldr	r2, [pc, #16]	@ (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	60d3      	str	r3, [r2, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004280:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <__NVIC_GetPriorityGrouping+0x18>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0307 	and.w	r3, r3, #7
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db0b      	blt.n	80042c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	4907      	ldr	r1, [pc, #28]	@ (80042d0 <__NVIC_EnableIRQ+0x38>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2001      	movs	r0, #1
 80042ba:	fa00 f202 	lsl.w	r2, r0, r2
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e100 	.word	0xe000e100

080042d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db0a      	blt.n	80042fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	490c      	ldr	r1, [pc, #48]	@ (8004320 <__NVIC_SetPriority+0x4c>)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	440b      	add	r3, r1
 80042f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042fc:	e00a      	b.n	8004314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4908      	ldr	r1, [pc, #32]	@ (8004324 <__NVIC_SetPriority+0x50>)
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	3b04      	subs	r3, #4
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	440b      	add	r3, r1
 8004312:	761a      	strb	r2, [r3, #24]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	@ 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f1c3 0307 	rsb	r3, r3, #7
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf28      	it	cs
 8004346:	2304      	movcs	r3, #4
 8004348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3304      	adds	r3, #4
 800434e:	2b06      	cmp	r3, #6
 8004350:	d902      	bls.n	8004358 <NVIC_EncodePriority+0x30>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3b03      	subs	r3, #3
 8004356:	e000      	b.n	800435a <NVIC_EncodePriority+0x32>
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	f04f 32ff 	mov.w	r2, #4294967295
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	401a      	ands	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004370:	f04f 31ff 	mov.w	r1, #4294967295
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	43d9      	mvns	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	4313      	orrs	r3, r2
         );
}
 8004382:	4618      	mov	r0, r3
 8004384:	3724      	adds	r7, #36	@ 0x24
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043a0:	d301      	bcc.n	80043a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00f      	b.n	80043c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a6:	4a0a      	ldr	r2, [pc, #40]	@ (80043d0 <SysTick_Config+0x40>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ae:	210f      	movs	r1, #15
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f7ff ff8e 	bl	80042d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <SysTick_Config+0x40>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <SysTick_Config+0x40>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010

080043d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff29 	bl	8004234 <__NVIC_SetPriorityGrouping>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043fc:	f7ff ff3e 	bl	800427c <__NVIC_GetPriorityGrouping>
 8004400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff ff8e 	bl	8004328 <NVIC_EncodePriority>
 800440c:	4602      	mov	r2, r0
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff5d 	bl	80042d4 <__NVIC_SetPriority>
}
 800441a:	bf00      	nop
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	4603      	mov	r3, r0
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff31 	bl	8004298 <__NVIC_EnableIRQ>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ffa2 	bl	8004390 <SysTick_Config>
 800444c:	4603      	mov	r3, r0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7ff feb6 	bl	80041d4 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d008      	beq.n	8004488 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2280      	movs	r2, #128	@ 0x80
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e052      	b.n	800452e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0216 	bic.w	r2, r2, #22
 8004496:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <HAL_DMA_Abort+0x62>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0208 	bic.w	r2, r2, #8
 80044c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044d8:	e013      	b.n	8004502 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044da:	f7ff fe7b 	bl	80041d4 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d90c      	bls.n	8004502 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2203      	movs	r2, #3
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e015      	b.n	800452e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e4      	bne.n	80044da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	223f      	movs	r2, #63	@ 0x3f
 8004516:	409a      	lsls	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d004      	beq.n	8004554 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2280      	movs	r2, #128	@ 0x80
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e00c      	b.n	800456e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2205      	movs	r2, #5
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	@ 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e165      	b.n	8004864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	f040 8154 	bne.w	800485e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d005      	beq.n	80045ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d130      	bne.n	8004630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004604:	2201      	movs	r2, #1
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4013      	ands	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 0201 	and.w	r2, r3, #1
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b03      	cmp	r3, #3
 800463a:	d017      	beq.n	800466c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d123      	bne.n	80046c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	08da      	lsrs	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3208      	adds	r2, #8
 8004680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	220f      	movs	r2, #15
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	08da      	lsrs	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3208      	adds	r2, #8
 80046ba:	69b9      	ldr	r1, [r7, #24]
 80046bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	2203      	movs	r2, #3
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0203 	and.w	r2, r3, #3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80ae 	beq.w	800485e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	4b5d      	ldr	r3, [pc, #372]	@ (800487c <HAL_GPIO_Init+0x300>)
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	4a5c      	ldr	r2, [pc, #368]	@ (800487c <HAL_GPIO_Init+0x300>)
 800470c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004710:	6453      	str	r3, [r2, #68]	@ 0x44
 8004712:	4b5a      	ldr	r3, [pc, #360]	@ (800487c <HAL_GPIO_Init+0x300>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800471e:	4a58      	ldr	r2, [pc, #352]	@ (8004880 <HAL_GPIO_Init+0x304>)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	3302      	adds	r3, #2
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	220f      	movs	r2, #15
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4f      	ldr	r2, [pc, #316]	@ (8004884 <HAL_GPIO_Init+0x308>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d025      	beq.n	8004796 <HAL_GPIO_Init+0x21a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a4e      	ldr	r2, [pc, #312]	@ (8004888 <HAL_GPIO_Init+0x30c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01f      	beq.n	8004792 <HAL_GPIO_Init+0x216>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4d      	ldr	r2, [pc, #308]	@ (800488c <HAL_GPIO_Init+0x310>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d019      	beq.n	800478e <HAL_GPIO_Init+0x212>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a4c      	ldr	r2, [pc, #304]	@ (8004890 <HAL_GPIO_Init+0x314>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_GPIO_Init+0x20e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a4b      	ldr	r2, [pc, #300]	@ (8004894 <HAL_GPIO_Init+0x318>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00d      	beq.n	8004786 <HAL_GPIO_Init+0x20a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a4a      	ldr	r2, [pc, #296]	@ (8004898 <HAL_GPIO_Init+0x31c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <HAL_GPIO_Init+0x206>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a49      	ldr	r2, [pc, #292]	@ (800489c <HAL_GPIO_Init+0x320>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_GPIO_Init+0x202>
 800477a:	2306      	movs	r3, #6
 800477c:	e00c      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 800477e:	2307      	movs	r3, #7
 8004780:	e00a      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004782:	2305      	movs	r3, #5
 8004784:	e008      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004786:	2304      	movs	r3, #4
 8004788:	e006      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 800478a:	2303      	movs	r3, #3
 800478c:	e004      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 800478e:	2302      	movs	r3, #2
 8004790:	e002      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_GPIO_Init+0x21c>
 8004796:	2300      	movs	r3, #0
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	f002 0203 	and.w	r2, r2, #3
 800479e:	0092      	lsls	r2, r2, #2
 80047a0:	4093      	lsls	r3, r2
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a8:	4935      	ldr	r1, [pc, #212]	@ (8004880 <HAL_GPIO_Init+0x304>)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	3302      	adds	r3, #2
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047b6:	4b3a      	ldr	r3, [pc, #232]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047da:	4a31      	ldr	r2, [pc, #196]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047e0:	4b2f      	ldr	r3, [pc, #188]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004804:	4a26      	ldr	r2, [pc, #152]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800480a:	4b25      	ldr	r3, [pc, #148]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800482e:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004834:	4b1a      	ldr	r3, [pc, #104]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <HAL_GPIO_Init+0x324>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b0f      	cmp	r3, #15
 8004868:	f67f ae96 	bls.w	8004598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3724      	adds	r7, #36	@ 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	40013800 	.word	0x40013800
 8004884:	40020000 	.word	0x40020000
 8004888:	40020400 	.word	0x40020400
 800488c:	40020800 	.word	0x40020800
 8004890:	40020c00 	.word	0x40020c00
 8004894:	40021000 	.word	0x40021000
 8004898:	40021400 	.word	0x40021400
 800489c:	40021800 	.word	0x40021800
 80048a0:	40013c00 	.word	0x40013c00

080048a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	887b      	ldrh	r3, [r7, #2]
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	e001      	b.n	80048c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
 80048e0:	4613      	mov	r3, r2
 80048e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048e4:	787b      	ldrb	r3, [r7, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ea:	887a      	ldrh	r2, [r7, #2]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048f0:	e003      	b.n	80048fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048f2:	887b      	ldrh	r3, [r7, #2]
 80048f4:	041a      	lsls	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	619a      	str	r2, [r3, #24]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004912:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800491e:	4a05      	ldr	r2, [pc, #20]	@ (8004934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f806 	bl	8004938 <HAL_GPIO_EXTI_Callback>
  }
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40013c00 	.word	0x40013c00

08004938 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0cc      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b68      	ldr	r3, [pc, #416]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d90c      	bls.n	800498c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b63      	ldr	r3, [pc, #396]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b8      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	4b59      	ldr	r3, [pc, #356]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a58      	ldr	r2, [pc, #352]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049bc:	4b53      	ldr	r3, [pc, #332]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a52      	ldr	r2, [pc, #328]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	494d      	ldr	r1, [pc, #308]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d044      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	4b47      	ldr	r3, [pc, #284]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d119      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e067      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b37      	ldr	r3, [pc, #220]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4934      	ldr	r1, [pc, #208]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7ff fbc8 	bl	80041d4 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7ff fbc4 	bl	80041d4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e04f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d20c      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e032      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	490e      	ldr	r1, [pc, #56]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ad6:	f000 f855 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	490a      	ldr	r1, [pc, #40]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	5ccb      	ldrb	r3, [r1, r3]
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fb28 	bl	800414c <HAL_InitTick>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023c00 	.word	0x40023c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	080092d8 	.word	0x080092d8
 8004b14:	20000164 	.word	0x20000164
 8004b18:	20000168 	.word	0x20000168

08004b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000164 	.word	0x20000164

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff fff0 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0a9b      	lsrs	r3, r3, #10
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	080092e8 	.word	0x080092e8

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b60:	f7ff ffdc 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0b5b      	lsrs	r3, r3, #13
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	080092e8 	.word	0x080092e8

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b0ae      	sub	sp, #184	@ 0xb8
 8004b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4bcb      	ldr	r3, [pc, #812]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	f200 8206 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x440>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004fc5 	.word	0x08004fc5
 8004bc8:	08004fc5 	.word	0x08004fc5
 8004bcc:	08004fc5 	.word	0x08004fc5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004fc5 	.word	0x08004fc5
 8004bd8:	08004fc5 	.word	0x08004fc5
 8004bdc:	08004fc5 	.word	0x08004fc5
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004fc5 	.word	0x08004fc5
 8004be8:	08004fc5 	.word	0x08004fc5
 8004bec:	08004fc5 	.word	0x08004fc5
 8004bf0:	08004df5 	.word	0x08004df5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4bb9      	ldr	r3, [pc, #740]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x358>)
 8004bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bfa:	e1e7      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfc:	4bb8      	ldr	r3, [pc, #736]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c02:	e1e3      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c04:	4bb4      	ldr	r3, [pc, #720]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c10:	4bb1      	ldr	r3, [pc, #708]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d071      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4bae      	ldr	r3, [pc, #696]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c74:	4649      	mov	r1, r9
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4641      	mov	r1, r8
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4641      	mov	r1, r8
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4641      	mov	r1, r8
 8004c84:	1a51      	subs	r1, r2, r1
 8004c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c88:	4649      	mov	r1, r9
 8004c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	460a      	mov	r2, r1
 8004cba:	eb42 0303 	adc.w	r3, r2, r3
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ccc:	4629      	mov	r1, r5
 8004cce:	024b      	lsls	r3, r1, #9
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	024a      	lsls	r2, r1, #9
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004cf0:	f7fb fae6 	bl	80002c0 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cfe:	e067      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d00:	4b75      	ldr	r3, [pc, #468]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	f04f 0000 	mov.w	r0, #0
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	0159      	lsls	r1, r3, #5
 8004d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d34:	0150      	lsls	r0, r2, #5
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	1a51      	subs	r1, r2, r1
 8004d3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb63 0301 	sbc.w	r3, r3, r1
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d54:	4649      	mov	r1, r9
 8004d56:	018b      	lsls	r3, r1, #6
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d5e:	4641      	mov	r1, r8
 8004d60:	018a      	lsls	r2, r1, #6
 8004d62:	4641      	mov	r1, r8
 8004d64:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d68:	4649      	mov	r1, r9
 8004d6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d82:	4692      	mov	sl, r2
 8004d84:	469b      	mov	fp, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	eb1a 0303 	adds.w	r3, sl, r3
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	462b      	mov	r3, r5
 8004d90:	eb4b 0303 	adc.w	r3, fp, r3
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004da2:	4629      	mov	r1, r5
 8004da4:	028b      	lsls	r3, r1, #10
 8004da6:	4621      	mov	r1, r4
 8004da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dac:	4621      	mov	r1, r4
 8004dae:	028a      	lsls	r2, r1, #10
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004db8:	2200      	movs	r2, #0
 8004dba:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004dc2:	f7fb fa7d 	bl	80002c0 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dd0:	4b41      	ldr	r3, [pc, #260]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004df2:	e0eb      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df4:	4b38      	ldr	r3, [pc, #224]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e00:	4b35      	ldr	r3, [pc, #212]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d06b      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0c:	4b32      	ldr	r3, [pc, #200]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	2200      	movs	r2, #0
 8004e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e20:	2300      	movs	r3, #0
 8004e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	f04f 0000 	mov.w	r0, #0
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	0159      	lsls	r1, r3, #5
 8004e36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e3a:	0150      	lsls	r0, r2, #5
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4621      	mov	r1, r4
 8004e42:	1a51      	subs	r1, r2, r1
 8004e44:	61b9      	str	r1, [r7, #24]
 8004e46:	4629      	mov	r1, r5
 8004e48:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	018b      	lsls	r3, r1, #6
 8004e5e:	4651      	mov	r1, sl
 8004e60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e64:	4651      	mov	r1, sl
 8004e66:	018a      	lsls	r2, r1, #6
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e6e:	4659      	mov	r1, fp
 8004e70:	eb63 0901 	sbc.w	r9, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e88:	4690      	mov	r8, r2
 8004e8a:	4699      	mov	r9, r3
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	eb18 0303 	adds.w	r3, r8, r3
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	462b      	mov	r3, r5
 8004e96:	eb49 0303 	adc.w	r3, r9, r3
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	024b      	lsls	r3, r1, #9
 8004eac:	4621      	mov	r1, r4
 8004eae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	024a      	lsls	r2, r1, #9
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ec2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ec4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ec8:	f7fb f9fa 	bl	80002c0 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed6:	e065      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x420>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x458>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	2200      	movs	r2, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	4611      	mov	r1, r2
 8004ef0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004efa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004efe:	4642      	mov	r2, r8
 8004f00:	464b      	mov	r3, r9
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f04f 0100 	mov.w	r1, #0
 8004f0a:	0159      	lsls	r1, r3, #5
 8004f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f10:	0150      	lsls	r0, r2, #5
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4641      	mov	r1, r8
 8004f18:	1a51      	subs	r1, r2, r1
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f30:	4659      	mov	r1, fp
 8004f32:	018b      	lsls	r3, r1, #6
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	018a      	lsls	r2, r1, #6
 8004f3e:	4651      	mov	r1, sl
 8004f40:	1a54      	subs	r4, r2, r1
 8004f42:	4659      	mov	r1, fp
 8004f44:	eb63 0501 	sbc.w	r5, r3, r1
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	00eb      	lsls	r3, r5, #3
 8004f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f56:	00e2      	lsls	r2, r4, #3
 8004f58:	4614      	mov	r4, r2
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	18e3      	adds	r3, r4, r3
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	464b      	mov	r3, r9
 8004f64:	eb45 0303 	adc.w	r3, r5, r3
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f96:	f7fb f993 	bl	80002c0 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x458>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0f1b      	lsrs	r3, r3, #28
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fc2:	e003      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	37b8      	adds	r7, #184	@ 0xb8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	00f42400 	.word	0x00f42400

08004fe4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e28d      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8083 	beq.w	800510a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005004:	4b94      	ldr	r3, [pc, #592]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b04      	cmp	r3, #4
 800500e:	d019      	beq.n	8005044 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005010:	4b91      	ldr	r3, [pc, #580]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
        || \
 8005018:	2b08      	cmp	r3, #8
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800501c:	4b8e      	ldr	r3, [pc, #568]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005028:	d00c      	beq.n	8005044 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502a:	4b8b      	ldr	r3, [pc, #556]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005032:	2b0c      	cmp	r3, #12
 8005034:	d112      	bne.n	800505c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b88      	ldr	r3, [pc, #544]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005042:	d10b      	bne.n	800505c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	4b84      	ldr	r3, [pc, #528]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05b      	beq.n	8005108 <HAL_RCC_OscConfig+0x124>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d157      	bne.n	8005108 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e25a      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x90>
 8005066:	4b7c      	ldr	r3, [pc, #496]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7b      	ldr	r2, [pc, #492]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e01d      	b.n	80050b0 <HAL_RCC_OscConfig+0xcc>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0xb4>
 800507e:	4b76      	ldr	r3, [pc, #472]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a75      	ldr	r2, [pc, #468]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b73      	ldr	r3, [pc, #460]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a72      	ldr	r2, [pc, #456]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0xcc>
 8005098:	4b6f      	ldr	r3, [pc, #444]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6e      	ldr	r2, [pc, #440]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6b      	ldr	r2, [pc, #428]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7ff f88c 	bl	80041d4 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7ff f888 	bl	80041d4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e21f      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b61      	ldr	r3, [pc, #388]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xdc>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7ff f878 	bl	80041d4 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7ff f874 	bl	80041d4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e20b      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	4b57      	ldr	r3, [pc, #348]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x104>
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d06f      	beq.n	80051f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005116:	4b50      	ldr	r3, [pc, #320]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005122:	4b4d      	ldr	r3, [pc, #308]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
        || \
 800512a:	2b08      	cmp	r3, #8
 800512c:	d105      	bne.n	800513a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800512e:	4b4a      	ldr	r3, [pc, #296]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b47      	ldr	r3, [pc, #284]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d11c      	bne.n	8005180 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b44      	ldr	r3, [pc, #272]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	4b41      	ldr	r3, [pc, #260]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RCC_OscConfig+0x186>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e1d3      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b3b      	ldr	r3, [pc, #236]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4937      	ldr	r1, [pc, #220]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517e:	e03a      	b.n	80051f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005188:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_RCC_OscConfig+0x278>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7ff f821 	bl	80041d4 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005196:	f7ff f81d 	bl	80041d4 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e1b4      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b28      	ldr	r3, [pc, #160]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4925      	ldr	r1, [pc, #148]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ca:	4b24      	ldr	r3, [pc, #144]	@ (800525c <HAL_RCC_OscConfig+0x278>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7ff f800 	bl	80041d4 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fe fffc 	bl	80041d4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e193      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d036      	beq.n	8005270 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_RCC_OscConfig+0x27c>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fe ffe0 	bl	80041d4 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005218:	f7fe ffdc 	bl	80041d4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e173      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800522c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x234>
 8005236:	e01b      	b.n	8005270 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCC_OscConfig+0x27c>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fe ffc9 	bl	80041d4 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	e00e      	b.n	8005264 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005246:	f7fe ffc5 	bl	80041d4 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e15c      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b8a      	ldr	r3, [pc, #552]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ea      	bne.n	8005246 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8097 	beq.w	80053ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b83      	ldr	r3, [pc, #524]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b7f      	ldr	r3, [pc, #508]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	4a7e      	ldr	r2, [pc, #504]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	@ 0x40
 800529e:	4b7c      	ldr	r3, [pc, #496]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b79      	ldr	r3, [pc, #484]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b76      	ldr	r3, [pc, #472]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a75      	ldr	r2, [pc, #468]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fe ff85 	bl	80041d4 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fe ff81 	bl	80041d4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e118      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x31e>
 80052f4:	4b66      	ldr	r3, [pc, #408]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	4a65      	ldr	r2, [pc, #404]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005300:	e01c      	b.n	800533c <HAL_RCC_OscConfig+0x358>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x340>
 800530a:	4b61      	ldr	r3, [pc, #388]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	4a60      	ldr	r2, [pc, #384]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6713      	str	r3, [r2, #112]	@ 0x70
 8005316:	4b5e      	ldr	r3, [pc, #376]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	4a5d      	ldr	r2, [pc, #372]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	@ 0x70
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0x358>
 8005324:	4b5a      	ldr	r3, [pc, #360]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a59      	ldr	r2, [pc, #356]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005330:	4b57      	ldr	r3, [pc, #348]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a56      	ldr	r2, [pc, #344]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fe ff46 	bl	80041d4 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fe ff42 	bl	80041d4 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0d7      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ee      	beq.n	800534c <HAL_RCC_OscConfig+0x368>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7fe ff30 	bl	80041d4 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fe ff2c 	bl	80041d4 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0c1      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	4b40      	ldr	r3, [pc, #256]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80ad 	beq.w	8005510 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b6:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d060      	beq.n	8005484 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d145      	bne.n	8005456 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b33      	ldr	r3, [pc, #204]	@ (8005498 <HAL_RCC_OscConfig+0x4b4>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe ff00 	bl	80041d4 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fe fefc 	bl	80041d4 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e093      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b29      	ldr	r3, [pc, #164]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	491b      	ldr	r1, [pc, #108]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005428:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <HAL_RCC_OscConfig+0x4b4>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fe fed1 	bl	80041d4 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005436:	f7fe fecd 	bl	80041d4 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e064      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005448:	4b11      	ldr	r3, [pc, #68]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x452>
 8005454:	e05c      	b.n	8005510 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <HAL_RCC_OscConfig+0x4b4>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fe feba 	bl	80041d4 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005464:	f7fe feb6 	bl	80041d4 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e04d      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x480>
 8005482:	e045      	b.n	8005510 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e040      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
 8005490:	40023800 	.word	0x40023800
 8005494:	40007000 	.word	0x40007000
 8005498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800549c:	4b1f      	ldr	r3, [pc, #124]	@ (800551c <HAL_RCC_OscConfig+0x538>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d030      	beq.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d129      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d122      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d119      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	3b01      	subs	r3, #1
 80054e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d10f      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800

08005520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07b      	b.n	800562a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005542:	d009      	beq.n	8005558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	e005      	b.n	8005558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd ffc8 	bl	8003508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800558e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055dc:	ea42 0103 	orr.w	r1, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	f003 0104 	and.w	r1, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	f003 0210 	and.w	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b08a      	sub	sp, #40	@ 0x28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005640:	2301      	movs	r3, #1
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005644:	f7fe fdc6 	bl	80041d4 <HAL_GetTick>
 8005648:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005650:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d00c      	beq.n	800567c <HAL_SPI_TransmitReceive+0x4a>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005668:	d106      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x46>
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	2b04      	cmp	r3, #4
 8005676:	d001      	beq.n	800567c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
 800567a:	e17f      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_SPI_TransmitReceive+0x5c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_SPI_TransmitReceive+0x5c>
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e174      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x6e>
 800569c:	2302      	movs	r3, #2
 800569e:	e16d      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d003      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2205      	movs	r2, #5
 80056b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	887a      	ldrh	r2, [r7, #2]
 80056d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	887a      	ldrh	r2, [r7, #2]
 80056de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d007      	beq.n	8005710 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005718:	d17e      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_SPI_TransmitReceive+0xf6>
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d16c      	bne.n	8005802 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	1c9a      	adds	r2, r3, #2
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800574c:	e059      	b.n	8005802 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d11b      	bne.n	8005794 <HAL_SPI_TransmitReceive+0x162>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x162>
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	2b01      	cmp	r3, #1
 800576a:	d113      	bne.n	8005794 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	881a      	ldrh	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	1c9a      	adds	r2, r3, #2
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d119      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x1a4>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d014      	beq.n	80057d6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	b292      	uxth	r2, r2
 80057b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057d2:	2301      	movs	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057d6:	f7fe fcfd 	bl	80041d4 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d80d      	bhi.n	8005802 <HAL_SPI_TransmitReceive+0x1d0>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d009      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0bc      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1a0      	bne.n	800574e <HAL_SPI_TransmitReceive+0x11c>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d19b      	bne.n	800574e <HAL_SPI_TransmitReceive+0x11c>
 8005816:	e082      	b.n	800591e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x1f4>
 8005820:	8afb      	ldrh	r3, [r7, #22]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d171      	bne.n	800590a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584c:	e05d      	b.n	800590a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d11c      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x264>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d017      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x264>
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	2b01      	cmp	r3, #1
 800586a:	d114      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d119      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x2a6>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d014      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058d4:	2301      	movs	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058d8:	f7fe fc7c 	bl	80041d4 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d803      	bhi.n	80058f0 <HAL_SPI_TransmitReceive+0x2be>
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x2c4>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e038      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d19c      	bne.n	800584e <HAL_SPI_TransmitReceive+0x21c>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d197      	bne.n	800584e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f8b6 	bl	8005a94 <SPI_EndRxTxTransaction>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e01d      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005948:	2300      	movs	r3, #0
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800597a:	2300      	movs	r3, #0
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3728      	adds	r7, #40	@ 0x28
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005994:	f7fe fc1e 	bl	80041d4 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4413      	add	r3, r2
 80059a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059a4:	f7fe fc16 	bl	80041d4 <HAL_GetTick>
 80059a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059aa:	4b39      	ldr	r3, [pc, #228]	@ (8005a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	015b      	lsls	r3, r3, #5
 80059b0:	0d1b      	lsrs	r3, r3, #20
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ba:	e055      	b.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d051      	beq.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059c4:	f7fe fc06 	bl	80041d4 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d902      	bls.n	80059da <SPI_WaitFlagStateUntilTimeout+0x56>
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d13d      	bne.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f2:	d111      	bne.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059fc:	d004      	beq.n	8005a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a06:	d107      	bne.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a20:	d10f      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e018      	b.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e002      	b.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d19a      	bne.n	80059bc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000164 	.word	0x20000164

08005a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff ff6a 	bl	8005984 <SPI_WaitFlagStateUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e032      	b.n	8005b2c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b34 <SPI_EndRxTxTransaction+0xa0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1b      	ldr	r2, [pc, #108]	@ (8005b38 <SPI_EndRxTxTransaction+0xa4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	0d5b      	lsrs	r3, r3, #21
 8005ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae4:	d112      	bne.n	8005b0c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	@ 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff ff47 	bl	8005984 <SPI_WaitFlagStateUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d016      	beq.n	8005b2a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b00:	f043 0220 	orr.w	r2, r3, #32
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e00f      	b.n	8005b2c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b22:	2b80      	cmp	r3, #128	@ 0x80
 8005b24:	d0f2      	beq.n	8005b0c <SPI_EndRxTxTransaction+0x78>
 8005b26:	e000      	b.n	8005b2a <SPI_EndRxTxTransaction+0x96>
        break;
 8005b28:	bf00      	nop
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000164 	.word	0x20000164
 8005b38:	165e9f81 	.word	0x165e9f81

08005b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e041      	b.n	8005bd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fd fd18 	bl	8003598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f000 fcae 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <HAL_TIM_PWM_Start_IT+0x28>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	bf14      	ite	ne
 8005bfc:	2301      	movne	r3, #1
 8005bfe:	2300      	moveq	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	e022      	b.n	8005c4a <HAL_TIM_PWM_Start_IT+0x6e>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d109      	bne.n	8005c1e <HAL_TIM_PWM_Start_IT+0x42>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	bf14      	ite	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	2300      	moveq	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	e015      	b.n	8005c4a <HAL_TIM_PWM_Start_IT+0x6e>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d109      	bne.n	8005c38 <HAL_TIM_PWM_Start_IT+0x5c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	bf14      	ite	ne
 8005c30:	2301      	movne	r3, #1
 8005c32:	2300      	moveq	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e008      	b.n	8005c4a <HAL_TIM_PWM_Start_IT+0x6e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0c7      	b.n	8005de2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start_IT+0x86>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_PWM_Start_IT+0xae>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_PWM_Start_IT+0x96>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_PWM_Start_IT+0xae>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_PWM_Start_IT+0xa6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_PWM_Start_IT+0xae>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b0c      	cmp	r3, #12
 8005c8e:	d841      	bhi.n	8005d14 <HAL_TIM_PWM_Start_IT+0x138>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ccd 	.word	0x08005ccd
 8005c9c:	08005d15 	.word	0x08005d15
 8005ca0:	08005d15 	.word	0x08005d15
 8005ca4:	08005d15 	.word	0x08005d15
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005d15 	.word	0x08005d15
 8005cb0:	08005d15 	.word	0x08005d15
 8005cb4:	08005d15 	.word	0x08005d15
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005d15 	.word	0x08005d15
 8005cc0:	08005d15 	.word	0x08005d15
 8005cc4:	08005d15 	.word	0x08005d15
 8005cc8:	08005d03 	.word	0x08005d03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0202 	orr.w	r2, r2, #2
 8005cda:	60da      	str	r2, [r3, #12]
      break;
 8005cdc:	e01d      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0204 	orr.w	r2, r2, #4
 8005cec:	60da      	str	r2, [r3, #12]
      break;
 8005cee:	e014      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	60da      	str	r2, [r3, #12]
      break;
 8005d00:	e00b      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0210 	orr.w	r2, r2, #16
 8005d10:	60da      	str	r2, [r3, #12]
      break;
 8005d12:	e002      	b.n	8005d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d15f      	bne.n	8005de0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2201      	movs	r2, #1
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fec7 	bl	8006abc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2e      	ldr	r2, [pc, #184]	@ (8005dec <HAL_TIM_PWM_Start_IT+0x210>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_PWM_Start_IT+0x166>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <HAL_TIM_PWM_Start_IT+0x214>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_PWM_Start_IT+0x16a>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_PWM_Start_IT+0x16c>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a22      	ldr	r2, [pc, #136]	@ (8005dec <HAL_TIM_PWM_Start_IT+0x210>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6e:	d01d      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_TIM_PWM_Start_IT+0x218>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_TIM_PWM_Start_IT+0x220>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a17      	ldr	r2, [pc, #92]	@ (8005df0 <HAL_TIM_PWM_Start_IT+0x214>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a18      	ldr	r2, [pc, #96]	@ (8005e00 <HAL_TIM_PWM_Start_IT+0x224>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a17      	ldr	r2, [pc, #92]	@ (8005e04 <HAL_TIM_PWM_Start_IT+0x228>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d111      	bne.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d010      	beq.n	8005de0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	e007      	b.n	8005de0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40001800 	.word	0x40001800

08005e08 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	d841      	bhi.n	8005ea0 <HAL_TIM_PWM_Stop_IT+0x98>
 8005e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e24 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005ea1 	.word	0x08005ea1
 8005e2c:	08005ea1 	.word	0x08005ea1
 8005e30:	08005ea1 	.word	0x08005ea1
 8005e34:	08005e6b 	.word	0x08005e6b
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	08005ea1 	.word	0x08005ea1
 8005e40:	08005ea1 	.word	0x08005ea1
 8005e44:	08005e7d 	.word	0x08005e7d
 8005e48:	08005ea1 	.word	0x08005ea1
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	08005e8f 	.word	0x08005e8f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0202 	bic.w	r2, r2, #2
 8005e66:	60da      	str	r2, [r3, #12]
      break;
 8005e68:	e01d      	b.n	8005ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0204 	bic.w	r2, r2, #4
 8005e78:	60da      	str	r2, [r3, #12]
      break;
 8005e7a:	e014      	b.n	8005ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0208 	bic.w	r2, r2, #8
 8005e8a:	60da      	str	r2, [r3, #12]
      break;
 8005e8c:	e00b      	b.n	8005ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0210 	bic.w	r2, r2, #16
 8005e9c:	60da      	str	r2, [r3, #12]
      break;
 8005e9e:	e002      	b.n	8005ea6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d161      	bne.n	8005f70 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe01 	bl	8006abc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8005f7c <HAL_TIM_PWM_Stop_IT+0x174>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIM_PWM_Stop_IT+0xc6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8005f80 <HAL_TIM_PWM_Stop_IT+0x178>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_PWM_Stop_IT+0xca>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <HAL_TIM_PWM_Stop_IT+0xcc>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d017      	beq.n	8005f08 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a1a      	ldr	r2, [r3, #32]
 8005ede:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10f      	bne.n	8005f08 <HAL_TIM_PWM_Stop_IT+0x100>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a1a      	ldr	r2, [r3, #32]
 8005eee:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_PWM_Stop_IT+0x100>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f06:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a1a      	ldr	r2, [r3, #32]
 8005f0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f12:	4013      	ands	r3, r2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10f      	bne.n	8005f38 <HAL_TIM_PWM_Stop_IT+0x130>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d107      	bne.n	8005f38 <HAL_TIM_PWM_Stop_IT+0x130>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <HAL_TIM_PWM_Stop_IT+0x140>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f46:	e013      	b.n	8005f70 <HAL_TIM_PWM_Stop_IT+0x168>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d104      	bne.n	8005f58 <HAL_TIM_PWM_Stop_IT+0x150>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f56:	e00b      	b.n	8005f70 <HAL_TIM_PWM_Stop_IT+0x168>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d104      	bne.n	8005f68 <HAL_TIM_PWM_Stop_IT+0x160>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f66:	e003      	b.n	8005f70 <HAL_TIM_PWM_Stop_IT+0x168>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40010400 	.word	0x40010400

08005f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d020      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0202 	mvn.w	r2, #2
 8005fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa65 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa57 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa68 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0204 	mvn.w	r2, #4
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa3f 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa31 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa42 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d020      	beq.n	8006080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01b      	beq.n	8006080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0208 	mvn.w	r2, #8
 8006050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2204      	movs	r2, #4
 8006056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa19 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa0b 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa1c 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b00      	cmp	r3, #0
 8006088:	d020      	beq.n	80060cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0210 	mvn.w	r2, #16
 800609c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2208      	movs	r2, #8
 80060a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9f3 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9e5 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f9f6 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d007      	beq.n	80060f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0201 	mvn.w	r2, #1
 80060e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f9c3 	bl	8006476 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00c      	beq.n	8006114 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fd80 	bl	8006c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00c      	beq.n	8006138 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9c7 	bl	80064c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00c      	beq.n	800615c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0220 	mvn.w	r2, #32
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fd52 	bl	8006c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800617e:	2302      	movs	r3, #2
 8006180:	e0ae      	b.n	80062e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	f200 809f 	bhi.w	80062d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006192:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080062d1 	.word	0x080062d1
 80061a0:	080062d1 	.word	0x080062d1
 80061a4:	080062d1 	.word	0x080062d1
 80061a8:	0800620d 	.word	0x0800620d
 80061ac:	080062d1 	.word	0x080062d1
 80061b0:	080062d1 	.word	0x080062d1
 80061b4:	080062d1 	.word	0x080062d1
 80061b8:	0800624f 	.word	0x0800624f
 80061bc:	080062d1 	.word	0x080062d1
 80061c0:	080062d1 	.word	0x080062d1
 80061c4:	080062d1 	.word	0x080062d1
 80061c8:	0800628f 	.word	0x0800628f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fa28 	bl	8006628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
      break;
 800620a:	e064      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa78 	bl	8006708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	619a      	str	r2, [r3, #24]
      break;
 800624c:	e043      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 facd 	bl	80067f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0208 	orr.w	r2, r2, #8
 8006268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0204 	bic.w	r2, r2, #4
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	61da      	str	r2, [r3, #28]
      break;
 800628c:	e023      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fb21 	bl	80068dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	021a      	lsls	r2, r3, #8
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	61da      	str	r2, [r3, #28]
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
      break;
 80062d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIM_ConfigClockSource+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e0b4      	b.n	800646e <HAL_TIM_ConfigClockSource+0x186>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800632a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800633c:	d03e      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0xd4>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006342:	f200 8087 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800634a:	f000 8086 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x172>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006352:	d87f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b70      	cmp	r3, #112	@ 0x70
 8006356:	d01a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0xa6>
 8006358:	2b70      	cmp	r3, #112	@ 0x70
 800635a:	d87b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b60      	cmp	r3, #96	@ 0x60
 800635e:	d050      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x11a>
 8006360:	2b60      	cmp	r3, #96	@ 0x60
 8006362:	d877      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b50      	cmp	r3, #80	@ 0x50
 8006366:	d03c      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006368:	2b50      	cmp	r3, #80	@ 0x50
 800636a:	d873      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d058      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x13a>
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d86f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b30      	cmp	r3, #48	@ 0x30
 8006376:	d064      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	2b30      	cmp	r3, #48	@ 0x30
 800637a:	d86b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b20      	cmp	r3, #32
 800637e:	d060      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d867      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05c      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d05a      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	e062      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	f000 fb6d 	bl	8006a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
      break;
 80063ba:	e04f      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	f000 fb56 	bl	8006a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063de:	609a      	str	r2, [r3, #8]
      break;
 80063e0:	e03c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 faca 	bl	8006988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2150      	movs	r1, #80	@ 0x50
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fb23 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006400:	e02c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fae9 	bl	80069e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2160      	movs	r1, #96	@ 0x60
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fb13 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006420:	e01c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	461a      	mov	r2, r3
 8006430:	f000 faaa 	bl	8006988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2140      	movs	r1, #64	@ 0x40
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fb03 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006440:	e00c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f000 fafa 	bl	8006a46 <TIM_ITRx_SetConfig>
      break;
 8006452:	e003      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      break;
 8006458:	e000      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800645a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a43      	ldr	r2, [pc, #268]	@ (80065fc <TIM_Base_SetConfig+0x120>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fa:	d00f      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a40      	ldr	r2, [pc, #256]	@ (8006600 <TIM_Base_SetConfig+0x124>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3f      	ldr	r2, [pc, #252]	@ (8006604 <TIM_Base_SetConfig+0x128>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a3e      	ldr	r2, [pc, #248]	@ (8006608 <TIM_Base_SetConfig+0x12c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a3d      	ldr	r2, [pc, #244]	@ (800660c <TIM_Base_SetConfig+0x130>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d108      	bne.n	800652e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a32      	ldr	r2, [pc, #200]	@ (80065fc <TIM_Base_SetConfig+0x120>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653c:	d027      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2f      	ldr	r2, [pc, #188]	@ (8006600 <TIM_Base_SetConfig+0x124>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d023      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2e      	ldr	r2, [pc, #184]	@ (8006604 <TIM_Base_SetConfig+0x128>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01f      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2d      	ldr	r2, [pc, #180]	@ (8006608 <TIM_Base_SetConfig+0x12c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2c      	ldr	r2, [pc, #176]	@ (800660c <TIM_Base_SetConfig+0x130>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d017      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2b      	ldr	r2, [pc, #172]	@ (8006610 <TIM_Base_SetConfig+0x134>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2a      	ldr	r2, [pc, #168]	@ (8006614 <TIM_Base_SetConfig+0x138>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00f      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a29      	ldr	r2, [pc, #164]	@ (8006618 <TIM_Base_SetConfig+0x13c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a28      	ldr	r2, [pc, #160]	@ (800661c <TIM_Base_SetConfig+0x140>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a27      	ldr	r2, [pc, #156]	@ (8006620 <TIM_Base_SetConfig+0x144>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a26      	ldr	r2, [pc, #152]	@ (8006624 <TIM_Base_SetConfig+0x148>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	@ (80065fc <TIM_Base_SetConfig+0x120>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0xf2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a10      	ldr	r2, [pc, #64]	@ (800660c <TIM_Base_SetConfig+0x130>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d103      	bne.n	80065d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	691a      	ldr	r2, [r3, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f043 0204 	orr.w	r2, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	601a      	str	r2, [r3, #0]
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40010000 	.word	0x40010000
 8006600:	40000400 	.word	0x40000400
 8006604:	40000800 	.word	0x40000800
 8006608:	40000c00 	.word	0x40000c00
 800660c:	40010400 	.word	0x40010400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800
 800661c:	40001800 	.word	0x40001800
 8006620:	40001c00 	.word	0x40001c00
 8006624:	40002000 	.word	0x40002000

08006628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f023 0201 	bic.w	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 0302 	bic.w	r3, r3, #2
 8006670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a20      	ldr	r2, [pc, #128]	@ (8006700 <TIM_OC1_SetConfig+0xd8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_OC1_SetConfig+0x64>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <TIM_OC1_SetConfig+0xdc>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d10c      	bne.n	80066a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0308 	bic.w	r3, r3, #8
 8006692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <TIM_OC1_SetConfig+0xd8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC1_SetConfig+0x8e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a14      	ldr	r2, [pc, #80]	@ (8006704 <TIM_OC1_SetConfig+0xdc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d111      	bne.n	80066da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f023 0210 	bic.w	r2, r3, #16
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800673e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0320 	bic.w	r3, r3, #32
 8006752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <TIM_OC2_SetConfig+0xe4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC2_SetConfig+0x68>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <TIM_OC2_SetConfig+0xe8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10d      	bne.n	800678c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800678a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a17      	ldr	r2, [pc, #92]	@ (80067ec <TIM_OC2_SetConfig+0xe4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC2_SetConfig+0x94>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a16      	ldr	r2, [pc, #88]	@ (80067f0 <TIM_OC2_SetConfig+0xe8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d113      	bne.n	80067c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400

080067f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800683c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a21      	ldr	r2, [pc, #132]	@ (80068d4 <TIM_OC3_SetConfig+0xe0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_OC3_SetConfig+0x66>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a20      	ldr	r2, [pc, #128]	@ (80068d8 <TIM_OC3_SetConfig+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d10d      	bne.n	8006876 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a16      	ldr	r2, [pc, #88]	@ (80068d4 <TIM_OC3_SetConfig+0xe0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_OC3_SetConfig+0x92>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a15      	ldr	r2, [pc, #84]	@ (80068d8 <TIM_OC3_SetConfig+0xe4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d113      	bne.n	80068ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800688c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	621a      	str	r2, [r3, #32]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40010400 	.word	0x40010400

080068dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800690a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	031b      	lsls	r3, r3, #12
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a12      	ldr	r2, [pc, #72]	@ (8006980 <TIM_OC4_SetConfig+0xa4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_OC4_SetConfig+0x68>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a11      	ldr	r2, [pc, #68]	@ (8006984 <TIM_OC4_SetConfig+0xa8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d109      	bne.n	8006958 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800694a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	019b      	lsls	r3, r3, #6
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40010000 	.word	0x40010000
 8006984:	40010400 	.word	0x40010400

08006988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f023 030a 	bic.w	r3, r3, #10
 80069c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b087      	sub	sp, #28
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f023 0210 	bic.w	r2, r3, #16
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	031b      	lsls	r3, r3, #12
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f043 0307 	orr.w	r3, r3, #7
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	021a      	lsls	r2, r3, #8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2201      	movs	r2, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1a      	ldr	r2, [r3, #32]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	43db      	mvns	r3, r3
 8006ade:	401a      	ands	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e05a      	b.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a21      	ldr	r2, [pc, #132]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d022      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6c:	d01d      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1d      	ldr	r2, [pc, #116]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d018      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00e      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a18      	ldr	r2, [pc, #96]	@ (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d009      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d004      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a15      	ldr	r2, [pc, #84]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e042      	b.n	8006cc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fc fd04 	bl	800365c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	@ 0x24
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fdd3 	bl	8007818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	@ 0x28
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d175      	bne.n	8006dd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_UART_Transmit+0x2c>
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e06e      	b.n	8006dd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2221      	movs	r2, #33	@ 0x21
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d06:	f7fd fa65 	bl	80041d4 <HAL_GetTick>
 8006d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	88fa      	ldrh	r2, [r7, #6]
 8006d10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d20:	d108      	bne.n	8006d34 <HAL_UART_Transmit+0x6c>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e003      	b.n	8006d3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d3c:	e02e      	b.n	8006d9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2180      	movs	r1, #128	@ 0x80
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fb37 	bl	80073bc <UART_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e03a      	b.n	8006dd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	3302      	adds	r3, #2
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	e007      	b.n	8006d8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1cb      	bne.n	8006d3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2140      	movs	r1, #64	@ 0x40
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 fb03 	bl	80073bc <UART_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e006      	b.n	8006dd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	4613      	mov	r3, r2
 8006dea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d112      	bne.n	8006e1e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_UART_Receive_IT+0x26>
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e00b      	b.n	8006e20 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	461a      	mov	r2, r3
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fb2a 	bl	800746e <UART_Start_Receive_IT>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_UART_IRQHandler+0x66>
 8006e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fc07 	bl	800769a <UART_Receive_IT>
      return;
 8006e8c:	e273      	b.n	8007376 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80de 	beq.w	8007054 <HAL_UART_IRQHandler+0x22c>
 8006e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80d1 	beq.w	8007054 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xae>
 8006ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	f043 0201 	orr.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_UART_IRQHandler+0xd2>
 8006ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f043 0202 	orr.w	r2, r3, #2
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <HAL_UART_IRQHandler+0xf6>
 8006f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f043 0204 	orr.w	r2, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d011      	beq.n	8006f4e <HAL_UART_IRQHandler+0x126>
 8006f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d105      	bne.n	8006f42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	f043 0208 	orr.w	r2, r3, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 820a 	beq.w	800736c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_UART_IRQHandler+0x14e>
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb92 	bl	800769a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f80:	2b40      	cmp	r3, #64	@ 0x40
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d103      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x17a>
 8006f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04f      	beq.n	8007042 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa9d 	bl	80074e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb2:	2b40      	cmp	r3, #64	@ 0x40
 8006fb4:	d141      	bne.n	800703a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3314      	adds	r3, #20
 8006fbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3314      	adds	r3, #20
 8006fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1d9      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d013      	beq.n	8007032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700e:	4a8a      	ldr	r2, [pc, #552]	@ (8007238 <HAL_UART_IRQHandler+0x410>)
 8007010:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd fa8d 	bl	8004536 <HAL_DMA_Abort_IT>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d016      	beq.n	8007050 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007030:	e00e      	b.n	8007050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f9ac 	bl	8007390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007038:	e00a      	b.n	8007050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f9a8 	bl	8007390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007040:	e006      	b.n	8007050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f9a4 	bl	8007390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800704e:	e18d      	b.n	800736c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007050:	bf00      	nop
    return;
 8007052:	e18b      	b.n	800736c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007058:	2b01      	cmp	r3, #1
 800705a:	f040 8167 	bne.w	800732c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800705e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8160 	beq.w	800732c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8159 	beq.w	800732c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800707a:	2300      	movs	r3, #0
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	60bb      	str	r3, [r7, #8]
 800708e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709a:	2b40      	cmp	r3, #64	@ 0x40
 800709c:	f040 80ce 	bne.w	800723c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80a9 	beq.w	8007208 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070be:	429a      	cmp	r2, r3
 80070c0:	f080 80a2 	bcs.w	8007208 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d6:	f000 8088 	beq.w	80071ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007106:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800710a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007112:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800711e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1d9      	bne.n	80070da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3314      	adds	r3, #20
 800712c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007138:	f023 0301 	bic.w	r3, r3, #1
 800713c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3314      	adds	r3, #20
 8007146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800714a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800714e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007152:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800715c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e1      	bne.n	8007126 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3314      	adds	r3, #20
 8007168:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007186:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007188:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800718c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007194:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e3      	bne.n	8007162 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e3      	bne.n	80071a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fd f936 	bl	8004456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f8cf 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007206:	e0b3      	b.n	8007370 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800720c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007210:	429a      	cmp	r2, r3
 8007212:	f040 80ad 	bne.w	8007370 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007220:	f040 80a6 	bne.w	8007370 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f8b7 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
      return;
 8007236:	e09b      	b.n	8007370 <HAL_UART_IRQHandler+0x548>
 8007238:	080075a9 	.word	0x080075a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007244:	b29b      	uxth	r3, r3
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 808e 	beq.w	8007374 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8089 	beq.w	8007374 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007278:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	330c      	adds	r3, #12
 8007282:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007286:	647a      	str	r2, [r7, #68]	@ 0x44
 8007288:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800728c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e3      	bne.n	8007262 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3314      	adds	r3, #20
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	623b      	str	r3, [r7, #32]
   return(result);
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072be:	633a      	str	r2, [r7, #48]	@ 0x30
 80072c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e3      	bne.n	800729a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007304:	61fa      	str	r2, [r7, #28]
 8007306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	69b9      	ldr	r1, [r7, #24]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	617b      	str	r3, [r7, #20]
   return(result);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e3      	bne.n	80072e0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800731e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f83d 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800732a:	e023      	b.n	8007374 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800732c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <HAL_UART_IRQHandler+0x524>
 8007338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800733c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f940 	bl	80075ca <UART_Transmit_IT>
    return;
 800734a:	e014      	b.n	8007376 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <HAL_UART_IRQHandler+0x54e>
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f980 	bl	800766a <UART_EndTransmit_IT>
    return;
 800736a:	e004      	b.n	8007376 <HAL_UART_IRQHandler+0x54e>
    return;
 800736c:	bf00      	nop
 800736e:	e002      	b.n	8007376 <HAL_UART_IRQHandler+0x54e>
      return;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <HAL_UART_IRQHandler+0x54e>
      return;
 8007374:	bf00      	nop
  }
}
 8007376:	37e8      	adds	r7, #232	@ 0xe8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073cc:	e03b      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d037      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d6:	f7fc fefd 	bl	80041d4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	6a3a      	ldr	r2, [r7, #32]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d302      	bcc.n	80073ec <UART_WaitOnFlagUntilTimeout+0x30>
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e03a      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d023      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b80      	cmp	r3, #128	@ 0x80
 8007402:	d020      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b40      	cmp	r3, #64	@ 0x40
 8007408:	d01d      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b08      	cmp	r3, #8
 8007416:	d116      	bne.n	8007446 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f857 	bl	80074e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2208      	movs	r2, #8
 8007438:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e00f      	b.n	8007466 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	429a      	cmp	r2, r3
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	461a      	mov	r2, r3
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	429a      	cmp	r2, r3
 8007462:	d0b4      	beq.n	80073ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	4613      	mov	r3, r2
 800747a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2222      	movs	r2, #34	@ 0x22
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695a      	ldr	r2, [r3, #20]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0220 	orr.w	r2, r2, #32
 80074d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b095      	sub	sp, #84	@ 0x54
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	330c      	adds	r3, #12
 8007508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800750a:	643a      	str	r2, [r7, #64]	@ 0x40
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3314      	adds	r3, #20
 8007524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	61fb      	str	r3, [r7, #28]
   return(result);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3314      	adds	r3, #20
 800753c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800753e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007540:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007556:	2b01      	cmp	r3, #1
 8007558:	d119      	bne.n	800758e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	60bb      	str	r3, [r7, #8]
   return(result);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f023 0310 	bic.w	r3, r3, #16
 8007570:	647b      	str	r3, [r7, #68]	@ 0x44
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800757a:	61ba      	str	r2, [r7, #24]
 800757c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6979      	ldr	r1, [r7, #20]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	613b      	str	r3, [r7, #16]
   return(result);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800759c:	bf00      	nop
 800759e:	3754      	adds	r7, #84	@ 0x54
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fee7 	bl	8007390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b21      	cmp	r3, #33	@ 0x21
 80075dc:	d13e      	bne.n	800765c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e6:	d114      	bne.n	8007612 <UART_Transmit_IT+0x48>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d110      	bne.n	8007612 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007604:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	1c9a      	adds	r2, r3, #2
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	621a      	str	r2, [r3, #32]
 8007610:	e008      	b.n	8007624 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	1c59      	adds	r1, r3, #1
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6211      	str	r1, [r2, #32]
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4619      	mov	r1, r3
 8007632:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10f      	bne.n	8007658 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007646:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007656:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	e000      	b.n	800765e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
  }
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fe76 	bl	800737c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b08c      	sub	sp, #48	@ 0x30
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b22      	cmp	r3, #34	@ 0x22
 80076b4:	f040 80aa 	bne.w	800780c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076c0:	d115      	bne.n	80076ee <UART_Receive_IT+0x54>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d111      	bne.n	80076ee <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e6:	1c9a      	adds	r2, r3, #2
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80076ec:	e024      	b.n	8007738 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fc:	d007      	beq.n	800770e <UART_Receive_IT+0x74>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <UART_Receive_IT+0x82>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	701a      	strb	r2, [r3, #0]
 800771a:	e008      	b.n	800772e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007728:	b2da      	uxtb	r2, r3
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4619      	mov	r1, r3
 8007746:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007748:	2b00      	cmp	r3, #0
 800774a:	d15d      	bne.n	8007808 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0220 	bic.w	r2, r2, #32
 800775a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800776a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800778e:	2b01      	cmp	r3, #1
 8007790:	d135      	bne.n	80077fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	613b      	str	r3, [r7, #16]
   return(result);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f023 0310 	bic.w	r3, r3, #16
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	330c      	adds	r3, #12
 80077b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b8:	623a      	str	r2, [r7, #32]
 80077ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	69f9      	ldr	r1, [r7, #28]
 80077be:	6a3a      	ldr	r2, [r7, #32]
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e5      	bne.n	8007798 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d10a      	bne.n	80077f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fdd4 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
 80077fc:	e002      	b.n	8007804 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7f9 fba4 	bl	8000f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	e002      	b.n	800780e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	e000      	b.n	800780e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800780c:	2302      	movs	r3, #2
  }
}
 800780e:	4618      	mov	r0, r3
 8007810:	3730      	adds	r7, #48	@ 0x30
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800781c:	b0c0      	sub	sp, #256	@ 0x100
 800781e:	af00      	add	r7, sp, #0
 8007820:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007834:	68d9      	ldr	r1, [r3, #12]
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	ea40 0301 	orr.w	r3, r0, r1
 8007840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	431a      	orrs	r2, r3
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	431a      	orrs	r2, r3
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007870:	f021 010c 	bic.w	r1, r1, #12
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800787e:	430b      	orrs	r3, r1
 8007880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800788e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007892:	6999      	ldr	r1, [r3, #24]
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	ea40 0301 	orr.w	r3, r0, r1
 800789e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b8f      	ldr	r3, [pc, #572]	@ (8007ae4 <UART_SetConfig+0x2cc>)
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d005      	beq.n	80078b8 <UART_SetConfig+0xa0>
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ae8 <UART_SetConfig+0x2d0>)
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d104      	bne.n	80078c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078b8:	f7fd f950 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 80078bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078c0:	e003      	b.n	80078ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078c2:	f7fd f937 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 80078c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078d4:	f040 810c 	bne.w	8007af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	1891      	adds	r1, r2, r2
 80078f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078f2:	415b      	adcs	r3, r3
 80078f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078fa:	4621      	mov	r1, r4
 80078fc:	eb12 0801 	adds.w	r8, r2, r1
 8007900:	4629      	mov	r1, r5
 8007902:	eb43 0901 	adc.w	r9, r3, r1
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800791a:	4690      	mov	r8, r2
 800791c:	4699      	mov	r9, r3
 800791e:	4623      	mov	r3, r4
 8007920:	eb18 0303 	adds.w	r3, r8, r3
 8007924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007928:	462b      	mov	r3, r5
 800792a:	eb49 0303 	adc.w	r3, r9, r3
 800792e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800793e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007946:	460b      	mov	r3, r1
 8007948:	18db      	adds	r3, r3, r3
 800794a:	653b      	str	r3, [r7, #80]	@ 0x50
 800794c:	4613      	mov	r3, r2
 800794e:	eb42 0303 	adc.w	r3, r2, r3
 8007952:	657b      	str	r3, [r7, #84]	@ 0x54
 8007954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800795c:	f7f8 fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4b61      	ldr	r3, [pc, #388]	@ (8007aec <UART_SetConfig+0x2d4>)
 8007966:	fba3 2302 	umull	r2, r3, r3, r2
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	011c      	lsls	r4, r3, #4
 800796e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007972:	2200      	movs	r2, #0
 8007974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007978:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800797c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007980:	4642      	mov	r2, r8
 8007982:	464b      	mov	r3, r9
 8007984:	1891      	adds	r1, r2, r2
 8007986:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007988:	415b      	adcs	r3, r3
 800798a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800798c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007990:	4641      	mov	r1, r8
 8007992:	eb12 0a01 	adds.w	sl, r2, r1
 8007996:	4649      	mov	r1, r9
 8007998:	eb43 0b01 	adc.w	fp, r3, r1
 800799c:	f04f 0200 	mov.w	r2, #0
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079b0:	4692      	mov	sl, r2
 80079b2:	469b      	mov	fp, r3
 80079b4:	4643      	mov	r3, r8
 80079b6:	eb1a 0303 	adds.w	r3, sl, r3
 80079ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079be:	464b      	mov	r3, r9
 80079c0:	eb4b 0303 	adc.w	r3, fp, r3
 80079c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079dc:	460b      	mov	r3, r1
 80079de:	18db      	adds	r3, r3, r3
 80079e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079e2:	4613      	mov	r3, r2
 80079e4:	eb42 0303 	adc.w	r3, r2, r3
 80079e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079f2:	f7f8 fc65 	bl	80002c0 <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aec <UART_SetConfig+0x2d4>)
 80079fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007a02:	095b      	lsrs	r3, r3, #5
 8007a04:	2264      	movs	r2, #100	@ 0x64
 8007a06:	fb02 f303 	mul.w	r3, r2, r3
 8007a0a:	1acb      	subs	r3, r1, r3
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a12:	4b36      	ldr	r3, [pc, #216]	@ (8007aec <UART_SetConfig+0x2d4>)
 8007a14:	fba3 2302 	umull	r2, r3, r3, r2
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a20:	441c      	add	r4, r3
 8007a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	1891      	adds	r1, r2, r2
 8007a3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a3c:	415b      	adcs	r3, r3
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a44:	4641      	mov	r1, r8
 8007a46:	1851      	adds	r1, r2, r1
 8007a48:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	414b      	adcs	r3, r1
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a5c:	4659      	mov	r1, fp
 8007a5e:	00cb      	lsls	r3, r1, #3
 8007a60:	4651      	mov	r1, sl
 8007a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a66:	4651      	mov	r1, sl
 8007a68:	00ca      	lsls	r2, r1, #3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4642      	mov	r2, r8
 8007a72:	189b      	adds	r3, r3, r2
 8007a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a78:	464b      	mov	r3, r9
 8007a7a:	460a      	mov	r2, r1
 8007a7c:	eb42 0303 	adc.w	r3, r2, r3
 8007a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a98:	460b      	mov	r3, r1
 8007a9a:	18db      	adds	r3, r3, r3
 8007a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	eb42 0303 	adc.w	r3, r2, r3
 8007aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007aae:	f7f8 fc07 	bl	80002c0 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <UART_SetConfig+0x2d4>)
 8007ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8007abc:	095b      	lsrs	r3, r3, #5
 8007abe:	2164      	movs	r1, #100	@ 0x64
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	3332      	adds	r3, #50	@ 0x32
 8007aca:	4a08      	ldr	r2, [pc, #32]	@ (8007aec <UART_SetConfig+0x2d4>)
 8007acc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	f003 0207 	and.w	r2, r3, #7
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4422      	add	r2, r4
 8007ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ae0:	e106      	b.n	8007cf0 <UART_SetConfig+0x4d8>
 8007ae2:	bf00      	nop
 8007ae4:	40011000 	.word	0x40011000
 8007ae8:	40011400 	.word	0x40011400
 8007aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007afa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b02:	4642      	mov	r2, r8
 8007b04:	464b      	mov	r3, r9
 8007b06:	1891      	adds	r1, r2, r2
 8007b08:	6239      	str	r1, [r7, #32]
 8007b0a:	415b      	adcs	r3, r3
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b12:	4641      	mov	r1, r8
 8007b14:	1854      	adds	r4, r2, r1
 8007b16:	4649      	mov	r1, r9
 8007b18:	eb43 0501 	adc.w	r5, r3, r1
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	00eb      	lsls	r3, r5, #3
 8007b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b2a:	00e2      	lsls	r2, r4, #3
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	461d      	mov	r5, r3
 8007b30:	4643      	mov	r3, r8
 8007b32:	18e3      	adds	r3, r4, r3
 8007b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b38:	464b      	mov	r3, r9
 8007b3a:	eb45 0303 	adc.w	r3, r5, r3
 8007b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b52:	f04f 0200 	mov.w	r2, #0
 8007b56:	f04f 0300 	mov.w	r3, #0
 8007b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b5e:	4629      	mov	r1, r5
 8007b60:	008b      	lsls	r3, r1, #2
 8007b62:	4621      	mov	r1, r4
 8007b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b68:	4621      	mov	r1, r4
 8007b6a:	008a      	lsls	r2, r1, #2
 8007b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b70:	f7f8 fba6 	bl	80002c0 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4b60      	ldr	r3, [pc, #384]	@ (8007cfc <UART_SetConfig+0x4e4>)
 8007b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	011c      	lsls	r4, r3, #4
 8007b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	1891      	adds	r1, r2, r2
 8007b9a:	61b9      	str	r1, [r7, #24]
 8007b9c:	415b      	adcs	r3, r3
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	1851      	adds	r1, r2, r1
 8007ba8:	6139      	str	r1, [r7, #16]
 8007baa:	4649      	mov	r1, r9
 8007bac:	414b      	adcs	r3, r1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	00cb      	lsls	r3, r1, #3
 8007bc0:	4651      	mov	r1, sl
 8007bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc6:	4651      	mov	r1, sl
 8007bc8:	00ca      	lsls	r2, r1, #3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	189b      	adds	r3, r3, r2
 8007bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bd8:	464b      	mov	r3, r9
 8007bda:	460a      	mov	r2, r1
 8007bdc:	eb42 0303 	adc.w	r3, r2, r3
 8007be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	008b      	lsls	r3, r1, #2
 8007c00:	4641      	mov	r1, r8
 8007c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c06:	4641      	mov	r1, r8
 8007c08:	008a      	lsls	r2, r1, #2
 8007c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c0e:	f7f8 fb57 	bl	80002c0 <__aeabi_uldivmod>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4611      	mov	r1, r2
 8007c18:	4b38      	ldr	r3, [pc, #224]	@ (8007cfc <UART_SetConfig+0x4e4>)
 8007c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	2264      	movs	r2, #100	@ 0x64
 8007c22:	fb02 f303 	mul.w	r3, r2, r3
 8007c26:	1acb      	subs	r3, r1, r3
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	3332      	adds	r3, #50	@ 0x32
 8007c2c:	4a33      	ldr	r2, [pc, #204]	@ (8007cfc <UART_SetConfig+0x4e4>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c38:	441c      	add	r4, r3
 8007c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c3e:	2200      	movs	r2, #0
 8007c40:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c42:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c48:	4642      	mov	r2, r8
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	1891      	adds	r1, r2, r2
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	415b      	adcs	r3, r3
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c58:	4641      	mov	r1, r8
 8007c5a:	1851      	adds	r1, r2, r1
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	4649      	mov	r1, r9
 8007c60:	414b      	adcs	r3, r1
 8007c62:	607b      	str	r3, [r7, #4]
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c70:	4659      	mov	r1, fp
 8007c72:	00cb      	lsls	r3, r1, #3
 8007c74:	4651      	mov	r1, sl
 8007c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c7a:	4651      	mov	r1, sl
 8007c7c:	00ca      	lsls	r2, r1, #3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4619      	mov	r1, r3
 8007c82:	4603      	mov	r3, r0
 8007c84:	4642      	mov	r2, r8
 8007c86:	189b      	adds	r3, r3, r2
 8007c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	eb42 0303 	adc.w	r3, r2, r3
 8007c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cac:	4649      	mov	r1, r9
 8007cae:	008b      	lsls	r3, r1, #2
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	008a      	lsls	r2, r1, #2
 8007cba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cbe:	f7f8 faff 	bl	80002c0 <__aeabi_uldivmod>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cfc <UART_SetConfig+0x4e4>)
 8007cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	2164      	movs	r1, #100	@ 0x64
 8007cd0:	fb01 f303 	mul.w	r3, r1, r3
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	3332      	adds	r3, #50	@ 0x32
 8007cda:	4a08      	ldr	r2, [pc, #32]	@ (8007cfc <UART_SetConfig+0x4e4>)
 8007cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	f003 020f 	and.w	r2, r3, #15
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4422      	add	r2, r4
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cfc:	51eb851f 	.word	0x51eb851f

08007d00 <sniprintf>:
 8007d00:	b40c      	push	{r2, r3}
 8007d02:	b530      	push	{r4, r5, lr}
 8007d04:	4b18      	ldr	r3, [pc, #96]	@ (8007d68 <sniprintf+0x68>)
 8007d06:	1e0c      	subs	r4, r1, #0
 8007d08:	681d      	ldr	r5, [r3, #0]
 8007d0a:	b09d      	sub	sp, #116	@ 0x74
 8007d0c:	da08      	bge.n	8007d20 <sniprintf+0x20>
 8007d0e:	238b      	movs	r3, #139	@ 0x8b
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295
 8007d16:	b01d      	add	sp, #116	@ 0x74
 8007d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d1c:	b002      	add	sp, #8
 8007d1e:	4770      	bx	lr
 8007d20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d28:	f04f 0300 	mov.w	r3, #0
 8007d2c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d2e:	bf14      	ite	ne
 8007d30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d34:	4623      	moveq	r3, r4
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	9307      	str	r3, [sp, #28]
 8007d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d3e:	9002      	str	r0, [sp, #8]
 8007d40:	9006      	str	r0, [sp, #24]
 8007d42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d48:	ab21      	add	r3, sp, #132	@ 0x84
 8007d4a:	a902      	add	r1, sp, #8
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f000 f9f8 	bl	8008144 <_svfiprintf_r>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	bfbc      	itt	lt
 8007d58:	238b      	movlt	r3, #139	@ 0x8b
 8007d5a:	602b      	strlt	r3, [r5, #0]
 8007d5c:	2c00      	cmp	r4, #0
 8007d5e:	d0da      	beq.n	8007d16 <sniprintf+0x16>
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e7d6      	b.n	8007d16 <sniprintf+0x16>
 8007d68:	20000170 	.word	0x20000170

08007d6c <siscanf>:
 8007d6c:	b40e      	push	{r1, r2, r3}
 8007d6e:	b570      	push	{r4, r5, r6, lr}
 8007d70:	b09d      	sub	sp, #116	@ 0x74
 8007d72:	ac21      	add	r4, sp, #132	@ 0x84
 8007d74:	2500      	movs	r5, #0
 8007d76:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007d7a:	f854 6b04 	ldr.w	r6, [r4], #4
 8007d7e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d82:	951b      	str	r5, [sp, #108]	@ 0x6c
 8007d84:	9002      	str	r0, [sp, #8]
 8007d86:	9006      	str	r0, [sp, #24]
 8007d88:	f7f8 fa42 	bl	8000210 <strlen>
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dbc <siscanf+0x50>)
 8007d8e:	9003      	str	r0, [sp, #12]
 8007d90:	9007      	str	r0, [sp, #28]
 8007d92:	480b      	ldr	r0, [pc, #44]	@ (8007dc0 <siscanf+0x54>)
 8007d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d9e:	4632      	mov	r2, r6
 8007da0:	4623      	mov	r3, r4
 8007da2:	a902      	add	r1, sp, #8
 8007da4:	6800      	ldr	r0, [r0, #0]
 8007da6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007da8:	9514      	str	r5, [sp, #80]	@ 0x50
 8007daa:	9401      	str	r4, [sp, #4]
 8007dac:	f000 fb20 	bl	80083f0 <__ssvfiscanf_r>
 8007db0:	b01d      	add	sp, #116	@ 0x74
 8007db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007db6:	b003      	add	sp, #12
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	08007dc5 	.word	0x08007dc5
 8007dc0:	20000170 	.word	0x20000170

08007dc4 <__seofread>:
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4770      	bx	lr

08007dc8 <memset>:
 8007dc8:	4402      	add	r2, r0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <memset+0xa>
 8007dd0:	4770      	bx	lr
 8007dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd6:	e7f9      	b.n	8007dcc <memset+0x4>

08007dd8 <strncmp>:
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	b16a      	cbz	r2, 8007df8 <strncmp+0x20>
 8007ddc:	3901      	subs	r1, #1
 8007dde:	1884      	adds	r4, r0, r2
 8007de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d103      	bne.n	8007df4 <strncmp+0x1c>
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d001      	beq.n	8007df4 <strncmp+0x1c>
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	d1f5      	bne.n	8007de0 <strncmp+0x8>
 8007df4:	1ad0      	subs	r0, r2, r3
 8007df6:	bd10      	pop	{r4, pc}
 8007df8:	4610      	mov	r0, r2
 8007dfa:	e7fc      	b.n	8007df6 <strncmp+0x1e>

08007dfc <strstr>:
 8007dfc:	780a      	ldrb	r2, [r1, #0]
 8007dfe:	b570      	push	{r4, r5, r6, lr}
 8007e00:	b96a      	cbnz	r2, 8007e1e <strstr+0x22>
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d109      	bne.n	8007e1c <strstr+0x20>
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f6      	beq.n	8007e02 <strstr+0x6>
 8007e14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007e18:	429e      	cmp	r6, r3
 8007e1a:	d0f7      	beq.n	8007e0c <strstr+0x10>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	7803      	ldrb	r3, [r0, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ef      	bne.n	8007e04 <strstr+0x8>
 8007e24:	4618      	mov	r0, r3
 8007e26:	e7ec      	b.n	8007e02 <strstr+0x6>

08007e28 <__errno>:
 8007e28:	4b01      	ldr	r3, [pc, #4]	@ (8007e30 <__errno+0x8>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000170 	.word	0x20000170

08007e34 <__libc_init_array>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4d0d      	ldr	r5, [pc, #52]	@ (8007e6c <__libc_init_array+0x38>)
 8007e38:	4c0d      	ldr	r4, [pc, #52]	@ (8007e70 <__libc_init_array+0x3c>)
 8007e3a:	1b64      	subs	r4, r4, r5
 8007e3c:	10a4      	asrs	r4, r4, #2
 8007e3e:	2600      	movs	r6, #0
 8007e40:	42a6      	cmp	r6, r4
 8007e42:	d109      	bne.n	8007e58 <__libc_init_array+0x24>
 8007e44:	4d0b      	ldr	r5, [pc, #44]	@ (8007e74 <__libc_init_array+0x40>)
 8007e46:	4c0c      	ldr	r4, [pc, #48]	@ (8007e78 <__libc_init_array+0x44>)
 8007e48:	f001 f8e2 	bl	8009010 <_init>
 8007e4c:	1b64      	subs	r4, r4, r5
 8007e4e:	10a4      	asrs	r4, r4, #2
 8007e50:	2600      	movs	r6, #0
 8007e52:	42a6      	cmp	r6, r4
 8007e54:	d105      	bne.n	8007e62 <__libc_init_array+0x2e>
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5c:	4798      	blx	r3
 8007e5e:	3601      	adds	r6, #1
 8007e60:	e7ee      	b.n	8007e40 <__libc_init_array+0xc>
 8007e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e66:	4798      	blx	r3
 8007e68:	3601      	adds	r6, #1
 8007e6a:	e7f2      	b.n	8007e52 <__libc_init_array+0x1e>
 8007e6c:	08009448 	.word	0x08009448
 8007e70:	08009448 	.word	0x08009448
 8007e74:	08009448 	.word	0x08009448
 8007e78:	0800944c 	.word	0x0800944c

08007e7c <__retarget_lock_acquire_recursive>:
 8007e7c:	4770      	bx	lr

08007e7e <__retarget_lock_release_recursive>:
 8007e7e:	4770      	bx	lr

08007e80 <memcpy>:
 8007e80:	440a      	add	r2, r1
 8007e82:	4291      	cmp	r1, r2
 8007e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e88:	d100      	bne.n	8007e8c <memcpy+0xc>
 8007e8a:	4770      	bx	lr
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e96:	4291      	cmp	r1, r2
 8007e98:	d1f9      	bne.n	8007e8e <memcpy+0xe>
 8007e9a:	bd10      	pop	{r4, pc}

08007e9c <_free_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d041      	beq.n	8007f28 <_free_r+0x8c>
 8007ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea8:	1f0c      	subs	r4, r1, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfb8      	it	lt
 8007eae:	18e4      	addlt	r4, r4, r3
 8007eb0:	f000 f8e0 	bl	8008074 <__malloc_lock>
 8007eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f2c <_free_r+0x90>)
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	b933      	cbnz	r3, 8007ec8 <_free_r+0x2c>
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	6014      	str	r4, [r2, #0]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec4:	f000 b8dc 	b.w	8008080 <__malloc_unlock>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d908      	bls.n	8007ede <_free_r+0x42>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf01      	itttt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	1809      	addeq	r1, r1, r0
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	e7ed      	b.n	8007eba <_free_r+0x1e>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	b10b      	cbz	r3, 8007ee8 <_free_r+0x4c>
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d9fa      	bls.n	8007ede <_free_r+0x42>
 8007ee8:	6811      	ldr	r1, [r2, #0]
 8007eea:	1850      	adds	r0, r2, r1
 8007eec:	42a0      	cmp	r0, r4
 8007eee:	d10b      	bne.n	8007f08 <_free_r+0x6c>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	4401      	add	r1, r0
 8007ef4:	1850      	adds	r0, r2, r1
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	6011      	str	r1, [r2, #0]
 8007efa:	d1e0      	bne.n	8007ebe <_free_r+0x22>
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	6053      	str	r3, [r2, #4]
 8007f02:	4408      	add	r0, r1
 8007f04:	6010      	str	r0, [r2, #0]
 8007f06:	e7da      	b.n	8007ebe <_free_r+0x22>
 8007f08:	d902      	bls.n	8007f10 <_free_r+0x74>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	e7d6      	b.n	8007ebe <_free_r+0x22>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	1821      	adds	r1, r4, r0
 8007f14:	428b      	cmp	r3, r1
 8007f16:	bf04      	itt	eq
 8007f18:	6819      	ldreq	r1, [r3, #0]
 8007f1a:	685b      	ldreq	r3, [r3, #4]
 8007f1c:	6063      	str	r3, [r4, #4]
 8007f1e:	bf04      	itt	eq
 8007f20:	1809      	addeq	r1, r1, r0
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	6054      	str	r4, [r2, #4]
 8007f26:	e7ca      	b.n	8007ebe <_free_r+0x22>
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000684 	.word	0x20000684

08007f30 <sbrk_aligned>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4e0f      	ldr	r6, [pc, #60]	@ (8007f70 <sbrk_aligned+0x40>)
 8007f34:	460c      	mov	r4, r1
 8007f36:	6831      	ldr	r1, [r6, #0]
 8007f38:	4605      	mov	r5, r0
 8007f3a:	b911      	cbnz	r1, 8007f42 <sbrk_aligned+0x12>
 8007f3c:	f000 ff36 	bl	8008dac <_sbrk_r>
 8007f40:	6030      	str	r0, [r6, #0]
 8007f42:	4621      	mov	r1, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 ff31 	bl	8008dac <_sbrk_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d103      	bne.n	8007f56 <sbrk_aligned+0x26>
 8007f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f52:	4620      	mov	r0, r4
 8007f54:	bd70      	pop	{r4, r5, r6, pc}
 8007f56:	1cc4      	adds	r4, r0, #3
 8007f58:	f024 0403 	bic.w	r4, r4, #3
 8007f5c:	42a0      	cmp	r0, r4
 8007f5e:	d0f8      	beq.n	8007f52 <sbrk_aligned+0x22>
 8007f60:	1a21      	subs	r1, r4, r0
 8007f62:	4628      	mov	r0, r5
 8007f64:	f000 ff22 	bl	8008dac <_sbrk_r>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d1f2      	bne.n	8007f52 <sbrk_aligned+0x22>
 8007f6c:	e7ef      	b.n	8007f4e <sbrk_aligned+0x1e>
 8007f6e:	bf00      	nop
 8007f70:	20000680 	.word	0x20000680

08007f74 <_malloc_r>:
 8007f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f78:	1ccd      	adds	r5, r1, #3
 8007f7a:	f025 0503 	bic.w	r5, r5, #3
 8007f7e:	3508      	adds	r5, #8
 8007f80:	2d0c      	cmp	r5, #12
 8007f82:	bf38      	it	cc
 8007f84:	250c      	movcc	r5, #12
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	4606      	mov	r6, r0
 8007f8a:	db01      	blt.n	8007f90 <_malloc_r+0x1c>
 8007f8c:	42a9      	cmp	r1, r5
 8007f8e:	d904      	bls.n	8007f9a <_malloc_r+0x26>
 8007f90:	230c      	movs	r3, #12
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	2000      	movs	r0, #0
 8007f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008070 <_malloc_r+0xfc>
 8007f9e:	f000 f869 	bl	8008074 <__malloc_lock>
 8007fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa6:	461c      	mov	r4, r3
 8007fa8:	bb44      	cbnz	r4, 8007ffc <_malloc_r+0x88>
 8007faa:	4629      	mov	r1, r5
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff ffbf 	bl	8007f30 <sbrk_aligned>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	d158      	bne.n	800806a <_malloc_r+0xf6>
 8007fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8007fbc:	4627      	mov	r7, r4
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	d143      	bne.n	800804a <_malloc_r+0xd6>
 8007fc2:	2c00      	cmp	r4, #0
 8007fc4:	d04b      	beq.n	800805e <_malloc_r+0xea>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	4639      	mov	r1, r7
 8007fca:	4630      	mov	r0, r6
 8007fcc:	eb04 0903 	add.w	r9, r4, r3
 8007fd0:	f000 feec 	bl	8008dac <_sbrk_r>
 8007fd4:	4581      	cmp	r9, r0
 8007fd6:	d142      	bne.n	800805e <_malloc_r+0xea>
 8007fd8:	6821      	ldr	r1, [r4, #0]
 8007fda:	1a6d      	subs	r5, r5, r1
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7ff ffa6 	bl	8007f30 <sbrk_aligned>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d03a      	beq.n	800805e <_malloc_r+0xea>
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	442b      	add	r3, r5
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	bb62      	cbnz	r2, 8008050 <_malloc_r+0xdc>
 8007ff6:	f8c8 7000 	str.w	r7, [r8]
 8007ffa:	e00f      	b.n	800801c <_malloc_r+0xa8>
 8007ffc:	6822      	ldr	r2, [r4, #0]
 8007ffe:	1b52      	subs	r2, r2, r5
 8008000:	d420      	bmi.n	8008044 <_malloc_r+0xd0>
 8008002:	2a0b      	cmp	r2, #11
 8008004:	d917      	bls.n	8008036 <_malloc_r+0xc2>
 8008006:	1961      	adds	r1, r4, r5
 8008008:	42a3      	cmp	r3, r4
 800800a:	6025      	str	r5, [r4, #0]
 800800c:	bf18      	it	ne
 800800e:	6059      	strne	r1, [r3, #4]
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	bf08      	it	eq
 8008014:	f8c8 1000 	streq.w	r1, [r8]
 8008018:	5162      	str	r2, [r4, r5]
 800801a:	604b      	str	r3, [r1, #4]
 800801c:	4630      	mov	r0, r6
 800801e:	f000 f82f 	bl	8008080 <__malloc_unlock>
 8008022:	f104 000b 	add.w	r0, r4, #11
 8008026:	1d23      	adds	r3, r4, #4
 8008028:	f020 0007 	bic.w	r0, r0, #7
 800802c:	1ac2      	subs	r2, r0, r3
 800802e:	bf1c      	itt	ne
 8008030:	1a1b      	subne	r3, r3, r0
 8008032:	50a3      	strne	r3, [r4, r2]
 8008034:	e7af      	b.n	8007f96 <_malloc_r+0x22>
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	42a3      	cmp	r3, r4
 800803a:	bf0c      	ite	eq
 800803c:	f8c8 2000 	streq.w	r2, [r8]
 8008040:	605a      	strne	r2, [r3, #4]
 8008042:	e7eb      	b.n	800801c <_malloc_r+0xa8>
 8008044:	4623      	mov	r3, r4
 8008046:	6864      	ldr	r4, [r4, #4]
 8008048:	e7ae      	b.n	8007fa8 <_malloc_r+0x34>
 800804a:	463c      	mov	r4, r7
 800804c:	687f      	ldr	r7, [r7, #4]
 800804e:	e7b6      	b.n	8007fbe <_malloc_r+0x4a>
 8008050:	461a      	mov	r2, r3
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	42a3      	cmp	r3, r4
 8008056:	d1fb      	bne.n	8008050 <_malloc_r+0xdc>
 8008058:	2300      	movs	r3, #0
 800805a:	6053      	str	r3, [r2, #4]
 800805c:	e7de      	b.n	800801c <_malloc_r+0xa8>
 800805e:	230c      	movs	r3, #12
 8008060:	6033      	str	r3, [r6, #0]
 8008062:	4630      	mov	r0, r6
 8008064:	f000 f80c 	bl	8008080 <__malloc_unlock>
 8008068:	e794      	b.n	8007f94 <_malloc_r+0x20>
 800806a:	6005      	str	r5, [r0, #0]
 800806c:	e7d6      	b.n	800801c <_malloc_r+0xa8>
 800806e:	bf00      	nop
 8008070:	20000684 	.word	0x20000684

08008074 <__malloc_lock>:
 8008074:	4801      	ldr	r0, [pc, #4]	@ (800807c <__malloc_lock+0x8>)
 8008076:	f7ff bf01 	b.w	8007e7c <__retarget_lock_acquire_recursive>
 800807a:	bf00      	nop
 800807c:	2000067c 	.word	0x2000067c

08008080 <__malloc_unlock>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__malloc_unlock+0x8>)
 8008082:	f7ff befc 	b.w	8007e7e <__retarget_lock_release_recursive>
 8008086:	bf00      	nop
 8008088:	2000067c 	.word	0x2000067c

0800808c <__ssputs_r>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	688e      	ldr	r6, [r1, #8]
 8008092:	461f      	mov	r7, r3
 8008094:	42be      	cmp	r6, r7
 8008096:	680b      	ldr	r3, [r1, #0]
 8008098:	4682      	mov	sl, r0
 800809a:	460c      	mov	r4, r1
 800809c:	4690      	mov	r8, r2
 800809e:	d82d      	bhi.n	80080fc <__ssputs_r+0x70>
 80080a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080a8:	d026      	beq.n	80080f8 <__ssputs_r+0x6c>
 80080aa:	6965      	ldr	r5, [r4, #20]
 80080ac:	6909      	ldr	r1, [r1, #16]
 80080ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080b2:	eba3 0901 	sub.w	r9, r3, r1
 80080b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080ba:	1c7b      	adds	r3, r7, #1
 80080bc:	444b      	add	r3, r9
 80080be:	106d      	asrs	r5, r5, #1
 80080c0:	429d      	cmp	r5, r3
 80080c2:	bf38      	it	cc
 80080c4:	461d      	movcc	r5, r3
 80080c6:	0553      	lsls	r3, r2, #21
 80080c8:	d527      	bpl.n	800811a <__ssputs_r+0x8e>
 80080ca:	4629      	mov	r1, r5
 80080cc:	f7ff ff52 	bl	8007f74 <_malloc_r>
 80080d0:	4606      	mov	r6, r0
 80080d2:	b360      	cbz	r0, 800812e <__ssputs_r+0xa2>
 80080d4:	6921      	ldr	r1, [r4, #16]
 80080d6:	464a      	mov	r2, r9
 80080d8:	f7ff fed2 	bl	8007e80 <memcpy>
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e6:	81a3      	strh	r3, [r4, #12]
 80080e8:	6126      	str	r6, [r4, #16]
 80080ea:	6165      	str	r5, [r4, #20]
 80080ec:	444e      	add	r6, r9
 80080ee:	eba5 0509 	sub.w	r5, r5, r9
 80080f2:	6026      	str	r6, [r4, #0]
 80080f4:	60a5      	str	r5, [r4, #8]
 80080f6:	463e      	mov	r6, r7
 80080f8:	42be      	cmp	r6, r7
 80080fa:	d900      	bls.n	80080fe <__ssputs_r+0x72>
 80080fc:	463e      	mov	r6, r7
 80080fe:	6820      	ldr	r0, [r4, #0]
 8008100:	4632      	mov	r2, r6
 8008102:	4641      	mov	r1, r8
 8008104:	f000 fe37 	bl	8008d76 <memmove>
 8008108:	68a3      	ldr	r3, [r4, #8]
 800810a:	1b9b      	subs	r3, r3, r6
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	4433      	add	r3, r6
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	2000      	movs	r0, #0
 8008116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811a:	462a      	mov	r2, r5
 800811c:	f000 fe56 	bl	8008dcc <_realloc_r>
 8008120:	4606      	mov	r6, r0
 8008122:	2800      	cmp	r0, #0
 8008124:	d1e0      	bne.n	80080e8 <__ssputs_r+0x5c>
 8008126:	6921      	ldr	r1, [r4, #16]
 8008128:	4650      	mov	r0, sl
 800812a:	f7ff feb7 	bl	8007e9c <_free_r>
 800812e:	230c      	movs	r3, #12
 8008130:	f8ca 3000 	str.w	r3, [sl]
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	e7e9      	b.n	8008116 <__ssputs_r+0x8a>
	...

08008144 <_svfiprintf_r>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	4698      	mov	r8, r3
 800814a:	898b      	ldrh	r3, [r1, #12]
 800814c:	061b      	lsls	r3, r3, #24
 800814e:	b09d      	sub	sp, #116	@ 0x74
 8008150:	4607      	mov	r7, r0
 8008152:	460d      	mov	r5, r1
 8008154:	4614      	mov	r4, r2
 8008156:	d510      	bpl.n	800817a <_svfiprintf_r+0x36>
 8008158:	690b      	ldr	r3, [r1, #16]
 800815a:	b973      	cbnz	r3, 800817a <_svfiprintf_r+0x36>
 800815c:	2140      	movs	r1, #64	@ 0x40
 800815e:	f7ff ff09 	bl	8007f74 <_malloc_r>
 8008162:	6028      	str	r0, [r5, #0]
 8008164:	6128      	str	r0, [r5, #16]
 8008166:	b930      	cbnz	r0, 8008176 <_svfiprintf_r+0x32>
 8008168:	230c      	movs	r3, #12
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	b01d      	add	sp, #116	@ 0x74
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	2340      	movs	r3, #64	@ 0x40
 8008178:	616b      	str	r3, [r5, #20]
 800817a:	2300      	movs	r3, #0
 800817c:	9309      	str	r3, [sp, #36]	@ 0x24
 800817e:	2320      	movs	r3, #32
 8008180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008184:	f8cd 800c 	str.w	r8, [sp, #12]
 8008188:	2330      	movs	r3, #48	@ 0x30
 800818a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008328 <_svfiprintf_r+0x1e4>
 800818e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008192:	f04f 0901 	mov.w	r9, #1
 8008196:	4623      	mov	r3, r4
 8008198:	469a      	mov	sl, r3
 800819a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819e:	b10a      	cbz	r2, 80081a4 <_svfiprintf_r+0x60>
 80081a0:	2a25      	cmp	r2, #37	@ 0x25
 80081a2:	d1f9      	bne.n	8008198 <_svfiprintf_r+0x54>
 80081a4:	ebba 0b04 	subs.w	fp, sl, r4
 80081a8:	d00b      	beq.n	80081c2 <_svfiprintf_r+0x7e>
 80081aa:	465b      	mov	r3, fp
 80081ac:	4622      	mov	r2, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7ff ff6b 	bl	800808c <__ssputs_r>
 80081b6:	3001      	adds	r0, #1
 80081b8:	f000 80a7 	beq.w	800830a <_svfiprintf_r+0x1c6>
 80081bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081be:	445a      	add	r2, fp
 80081c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 809f 	beq.w	800830a <_svfiprintf_r+0x1c6>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f04f 32ff 	mov.w	r2, #4294967295
 80081d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d6:	f10a 0a01 	add.w	sl, sl, #1
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	9307      	str	r3, [sp, #28]
 80081de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80081e4:	4654      	mov	r4, sl
 80081e6:	2205      	movs	r2, #5
 80081e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ec:	484e      	ldr	r0, [pc, #312]	@ (8008328 <_svfiprintf_r+0x1e4>)
 80081ee:	f7f8 f817 	bl	8000220 <memchr>
 80081f2:	9a04      	ldr	r2, [sp, #16]
 80081f4:	b9d8      	cbnz	r0, 800822e <_svfiprintf_r+0xea>
 80081f6:	06d0      	lsls	r0, r2, #27
 80081f8:	bf44      	itt	mi
 80081fa:	2320      	movmi	r3, #32
 80081fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008200:	0711      	lsls	r1, r2, #28
 8008202:	bf44      	itt	mi
 8008204:	232b      	movmi	r3, #43	@ 0x2b
 8008206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800820a:	f89a 3000 	ldrb.w	r3, [sl]
 800820e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008210:	d015      	beq.n	800823e <_svfiprintf_r+0xfa>
 8008212:	9a07      	ldr	r2, [sp, #28]
 8008214:	4654      	mov	r4, sl
 8008216:	2000      	movs	r0, #0
 8008218:	f04f 0c0a 	mov.w	ip, #10
 800821c:	4621      	mov	r1, r4
 800821e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008222:	3b30      	subs	r3, #48	@ 0x30
 8008224:	2b09      	cmp	r3, #9
 8008226:	d94b      	bls.n	80082c0 <_svfiprintf_r+0x17c>
 8008228:	b1b0      	cbz	r0, 8008258 <_svfiprintf_r+0x114>
 800822a:	9207      	str	r2, [sp, #28]
 800822c:	e014      	b.n	8008258 <_svfiprintf_r+0x114>
 800822e:	eba0 0308 	sub.w	r3, r0, r8
 8008232:	fa09 f303 	lsl.w	r3, r9, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	46a2      	mov	sl, r4
 800823c:	e7d2      	b.n	80081e4 <_svfiprintf_r+0xa0>
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	1d19      	adds	r1, r3, #4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	9103      	str	r1, [sp, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfbb      	ittet	lt
 800824a:	425b      	neglt	r3, r3
 800824c:	f042 0202 	orrlt.w	r2, r2, #2
 8008250:	9307      	strge	r3, [sp, #28]
 8008252:	9307      	strlt	r3, [sp, #28]
 8008254:	bfb8      	it	lt
 8008256:	9204      	strlt	r2, [sp, #16]
 8008258:	7823      	ldrb	r3, [r4, #0]
 800825a:	2b2e      	cmp	r3, #46	@ 0x2e
 800825c:	d10a      	bne.n	8008274 <_svfiprintf_r+0x130>
 800825e:	7863      	ldrb	r3, [r4, #1]
 8008260:	2b2a      	cmp	r3, #42	@ 0x2a
 8008262:	d132      	bne.n	80082ca <_svfiprintf_r+0x186>
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	9203      	str	r2, [sp, #12]
 800826c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008270:	3402      	adds	r4, #2
 8008272:	9305      	str	r3, [sp, #20]
 8008274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008338 <_svfiprintf_r+0x1f4>
 8008278:	7821      	ldrb	r1, [r4, #0]
 800827a:	2203      	movs	r2, #3
 800827c:	4650      	mov	r0, sl
 800827e:	f7f7 ffcf 	bl	8000220 <memchr>
 8008282:	b138      	cbz	r0, 8008294 <_svfiprintf_r+0x150>
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	eba0 000a 	sub.w	r0, r0, sl
 800828a:	2240      	movs	r2, #64	@ 0x40
 800828c:	4082      	lsls	r2, r0
 800828e:	4313      	orrs	r3, r2
 8008290:	3401      	adds	r4, #1
 8008292:	9304      	str	r3, [sp, #16]
 8008294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008298:	4824      	ldr	r0, [pc, #144]	@ (800832c <_svfiprintf_r+0x1e8>)
 800829a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800829e:	2206      	movs	r2, #6
 80082a0:	f7f7 ffbe 	bl	8000220 <memchr>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d036      	beq.n	8008316 <_svfiprintf_r+0x1d2>
 80082a8:	4b21      	ldr	r3, [pc, #132]	@ (8008330 <_svfiprintf_r+0x1ec>)
 80082aa:	bb1b      	cbnz	r3, 80082f4 <_svfiprintf_r+0x1b0>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	3307      	adds	r3, #7
 80082b0:	f023 0307 	bic.w	r3, r3, #7
 80082b4:	3308      	adds	r3, #8
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ba:	4433      	add	r3, r6
 80082bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082be:	e76a      	b.n	8008196 <_svfiprintf_r+0x52>
 80082c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082c4:	460c      	mov	r4, r1
 80082c6:	2001      	movs	r0, #1
 80082c8:	e7a8      	b.n	800821c <_svfiprintf_r+0xd8>
 80082ca:	2300      	movs	r3, #0
 80082cc:	3401      	adds	r4, #1
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	4619      	mov	r1, r3
 80082d2:	f04f 0c0a 	mov.w	ip, #10
 80082d6:	4620      	mov	r0, r4
 80082d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082dc:	3a30      	subs	r2, #48	@ 0x30
 80082de:	2a09      	cmp	r2, #9
 80082e0:	d903      	bls.n	80082ea <_svfiprintf_r+0x1a6>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0c6      	beq.n	8008274 <_svfiprintf_r+0x130>
 80082e6:	9105      	str	r1, [sp, #20]
 80082e8:	e7c4      	b.n	8008274 <_svfiprintf_r+0x130>
 80082ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ee:	4604      	mov	r4, r0
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7f0      	b.n	80082d6 <_svfiprintf_r+0x192>
 80082f4:	ab03      	add	r3, sp, #12
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <_svfiprintf_r+0x1f0>)
 80082fc:	a904      	add	r1, sp, #16
 80082fe:	4638      	mov	r0, r7
 8008300:	f3af 8000 	nop.w
 8008304:	1c42      	adds	r2, r0, #1
 8008306:	4606      	mov	r6, r0
 8008308:	d1d6      	bne.n	80082b8 <_svfiprintf_r+0x174>
 800830a:	89ab      	ldrh	r3, [r5, #12]
 800830c:	065b      	lsls	r3, r3, #25
 800830e:	f53f af2d 	bmi.w	800816c <_svfiprintf_r+0x28>
 8008312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008314:	e72c      	b.n	8008170 <_svfiprintf_r+0x2c>
 8008316:	ab03      	add	r3, sp, #12
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	462a      	mov	r2, r5
 800831c:	4b05      	ldr	r3, [pc, #20]	@ (8008334 <_svfiprintf_r+0x1f0>)
 800831e:	a904      	add	r1, sp, #16
 8008320:	4638      	mov	r0, r7
 8008322:	f000 fa49 	bl	80087b8 <_printf_i>
 8008326:	e7ed      	b.n	8008304 <_svfiprintf_r+0x1c0>
 8008328:	080092f0 	.word	0x080092f0
 800832c:	080092fa 	.word	0x080092fa
 8008330:	00000000 	.word	0x00000000
 8008334:	0800808d 	.word	0x0800808d
 8008338:	080092f6 	.word	0x080092f6

0800833c <_sungetc_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	1c4b      	adds	r3, r1, #1
 8008340:	4614      	mov	r4, r2
 8008342:	d103      	bne.n	800834c <_sungetc_r+0x10>
 8008344:	f04f 35ff 	mov.w	r5, #4294967295
 8008348:	4628      	mov	r0, r5
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	8993      	ldrh	r3, [r2, #12]
 800834e:	f023 0320 	bic.w	r3, r3, #32
 8008352:	8193      	strh	r3, [r2, #12]
 8008354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008356:	6852      	ldr	r2, [r2, #4]
 8008358:	b2cd      	uxtb	r5, r1
 800835a:	b18b      	cbz	r3, 8008380 <_sungetc_r+0x44>
 800835c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800835e:	4293      	cmp	r3, r2
 8008360:	dd08      	ble.n	8008374 <_sungetc_r+0x38>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	1e5a      	subs	r2, r3, #1
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	f803 5c01 	strb.w	r5, [r3, #-1]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	e7e9      	b.n	8008348 <_sungetc_r+0xc>
 8008374:	4621      	mov	r1, r4
 8008376:	f000 fcc4 	bl	8008d02 <__submore>
 800837a:	2800      	cmp	r0, #0
 800837c:	d0f1      	beq.n	8008362 <_sungetc_r+0x26>
 800837e:	e7e1      	b.n	8008344 <_sungetc_r+0x8>
 8008380:	6921      	ldr	r1, [r4, #16]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	b151      	cbz	r1, 800839c <_sungetc_r+0x60>
 8008386:	4299      	cmp	r1, r3
 8008388:	d208      	bcs.n	800839c <_sungetc_r+0x60>
 800838a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800838e:	42a9      	cmp	r1, r5
 8008390:	d104      	bne.n	800839c <_sungetc_r+0x60>
 8008392:	3b01      	subs	r3, #1
 8008394:	3201      	adds	r2, #1
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	6062      	str	r2, [r4, #4]
 800839a:	e7d5      	b.n	8008348 <_sungetc_r+0xc>
 800839c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80083a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083a6:	2303      	movs	r3, #3
 80083a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80083aa:	4623      	mov	r3, r4
 80083ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7dc      	b.n	8008370 <_sungetc_r+0x34>

080083b6 <__ssrefill_r>:
 80083b6:	b510      	push	{r4, lr}
 80083b8:	460c      	mov	r4, r1
 80083ba:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80083bc:	b169      	cbz	r1, 80083da <__ssrefill_r+0x24>
 80083be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c2:	4299      	cmp	r1, r3
 80083c4:	d001      	beq.n	80083ca <__ssrefill_r+0x14>
 80083c6:	f7ff fd69 	bl	8007e9c <_free_r>
 80083ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083cc:	6063      	str	r3, [r4, #4]
 80083ce:	2000      	movs	r0, #0
 80083d0:	6360      	str	r0, [r4, #52]	@ 0x34
 80083d2:	b113      	cbz	r3, 80083da <__ssrefill_r+0x24>
 80083d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	6063      	str	r3, [r4, #4]
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f043 0320 	orr.w	r3, r3, #32
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	e7f3      	b.n	80083d8 <__ssrefill_r+0x22>

080083f0 <__ssvfiscanf_r>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	460c      	mov	r4, r1
 80083f6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80083fa:	2100      	movs	r1, #0
 80083fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008400:	49a6      	ldr	r1, [pc, #664]	@ (800869c <__ssvfiscanf_r+0x2ac>)
 8008402:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008404:	f10d 0804 	add.w	r8, sp, #4
 8008408:	49a5      	ldr	r1, [pc, #660]	@ (80086a0 <__ssvfiscanf_r+0x2b0>)
 800840a:	4fa6      	ldr	r7, [pc, #664]	@ (80086a4 <__ssvfiscanf_r+0x2b4>)
 800840c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008410:	4606      	mov	r6, r0
 8008412:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	f892 9000 	ldrb.w	r9, [r2]
 800841a:	f1b9 0f00 	cmp.w	r9, #0
 800841e:	f000 8158 	beq.w	80086d2 <__ssvfiscanf_r+0x2e2>
 8008422:	f817 3009 	ldrb.w	r3, [r7, r9]
 8008426:	f013 0308 	ands.w	r3, r3, #8
 800842a:	f102 0501 	add.w	r5, r2, #1
 800842e:	d019      	beq.n	8008464 <__ssvfiscanf_r+0x74>
 8008430:	6863      	ldr	r3, [r4, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd0f      	ble.n	8008456 <__ssvfiscanf_r+0x66>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	781a      	ldrb	r2, [r3, #0]
 800843a:	5cba      	ldrb	r2, [r7, r2]
 800843c:	0712      	lsls	r2, r2, #28
 800843e:	d401      	bmi.n	8008444 <__ssvfiscanf_r+0x54>
 8008440:	462a      	mov	r2, r5
 8008442:	e7e8      	b.n	8008416 <__ssvfiscanf_r+0x26>
 8008444:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008446:	3201      	adds	r2, #1
 8008448:	9245      	str	r2, [sp, #276]	@ 0x114
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	3301      	adds	r3, #1
 800844e:	3a01      	subs	r2, #1
 8008450:	6062      	str	r2, [r4, #4]
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	e7ec      	b.n	8008430 <__ssvfiscanf_r+0x40>
 8008456:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008458:	4621      	mov	r1, r4
 800845a:	4630      	mov	r0, r6
 800845c:	4798      	blx	r3
 800845e:	2800      	cmp	r0, #0
 8008460:	d0e9      	beq.n	8008436 <__ssvfiscanf_r+0x46>
 8008462:	e7ed      	b.n	8008440 <__ssvfiscanf_r+0x50>
 8008464:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008468:	f040 8085 	bne.w	8008576 <__ssvfiscanf_r+0x186>
 800846c:	9341      	str	r3, [sp, #260]	@ 0x104
 800846e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8008470:	7853      	ldrb	r3, [r2, #1]
 8008472:	2b2a      	cmp	r3, #42	@ 0x2a
 8008474:	bf02      	ittt	eq
 8008476:	2310      	moveq	r3, #16
 8008478:	1c95      	addeq	r5, r2, #2
 800847a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800847c:	220a      	movs	r2, #10
 800847e:	46aa      	mov	sl, r5
 8008480:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008484:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008488:	2b09      	cmp	r3, #9
 800848a:	d91e      	bls.n	80084ca <__ssvfiscanf_r+0xda>
 800848c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80086a8 <__ssvfiscanf_r+0x2b8>
 8008490:	2203      	movs	r2, #3
 8008492:	4658      	mov	r0, fp
 8008494:	f7f7 fec4 	bl	8000220 <memchr>
 8008498:	b138      	cbz	r0, 80084aa <__ssvfiscanf_r+0xba>
 800849a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800849c:	eba0 000b 	sub.w	r0, r0, fp
 80084a0:	2301      	movs	r3, #1
 80084a2:	4083      	lsls	r3, r0
 80084a4:	4313      	orrs	r3, r2
 80084a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80084a8:	4655      	mov	r5, sl
 80084aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084ae:	2b78      	cmp	r3, #120	@ 0x78
 80084b0:	d806      	bhi.n	80084c0 <__ssvfiscanf_r+0xd0>
 80084b2:	2b57      	cmp	r3, #87	@ 0x57
 80084b4:	d810      	bhi.n	80084d8 <__ssvfiscanf_r+0xe8>
 80084b6:	2b25      	cmp	r3, #37	@ 0x25
 80084b8:	d05d      	beq.n	8008576 <__ssvfiscanf_r+0x186>
 80084ba:	d857      	bhi.n	800856c <__ssvfiscanf_r+0x17c>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d075      	beq.n	80085ac <__ssvfiscanf_r+0x1bc>
 80084c0:	2303      	movs	r3, #3
 80084c2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80084c4:	230a      	movs	r3, #10
 80084c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80084c8:	e088      	b.n	80085dc <__ssvfiscanf_r+0x1ec>
 80084ca:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80084cc:	fb02 1103 	mla	r1, r2, r3, r1
 80084d0:	3930      	subs	r1, #48	@ 0x30
 80084d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80084d4:	4655      	mov	r5, sl
 80084d6:	e7d2      	b.n	800847e <__ssvfiscanf_r+0x8e>
 80084d8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80084dc:	2a20      	cmp	r2, #32
 80084de:	d8ef      	bhi.n	80084c0 <__ssvfiscanf_r+0xd0>
 80084e0:	a101      	add	r1, pc, #4	@ (adr r1, 80084e8 <__ssvfiscanf_r+0xf8>)
 80084e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	080085bb 	.word	0x080085bb
 80084ec:	080084c1 	.word	0x080084c1
 80084f0:	080084c1 	.word	0x080084c1
 80084f4:	08008615 	.word	0x08008615
 80084f8:	080084c1 	.word	0x080084c1
 80084fc:	080084c1 	.word	0x080084c1
 8008500:	080084c1 	.word	0x080084c1
 8008504:	080084c1 	.word	0x080084c1
 8008508:	080084c1 	.word	0x080084c1
 800850c:	080084c1 	.word	0x080084c1
 8008510:	080084c1 	.word	0x080084c1
 8008514:	0800862b 	.word	0x0800862b
 8008518:	08008611 	.word	0x08008611
 800851c:	08008573 	.word	0x08008573
 8008520:	08008573 	.word	0x08008573
 8008524:	08008573 	.word	0x08008573
 8008528:	080084c1 	.word	0x080084c1
 800852c:	080085cd 	.word	0x080085cd
 8008530:	080084c1 	.word	0x080084c1
 8008534:	080084c1 	.word	0x080084c1
 8008538:	080084c1 	.word	0x080084c1
 800853c:	080084c1 	.word	0x080084c1
 8008540:	0800863b 	.word	0x0800863b
 8008544:	080085d5 	.word	0x080085d5
 8008548:	080085b3 	.word	0x080085b3
 800854c:	080084c1 	.word	0x080084c1
 8008550:	080084c1 	.word	0x080084c1
 8008554:	08008637 	.word	0x08008637
 8008558:	080084c1 	.word	0x080084c1
 800855c:	08008611 	.word	0x08008611
 8008560:	080084c1 	.word	0x080084c1
 8008564:	080084c1 	.word	0x080084c1
 8008568:	080085bb 	.word	0x080085bb
 800856c:	3b45      	subs	r3, #69	@ 0x45
 800856e:	2b02      	cmp	r3, #2
 8008570:	d8a6      	bhi.n	80084c0 <__ssvfiscanf_r+0xd0>
 8008572:	2305      	movs	r3, #5
 8008574:	e031      	b.n	80085da <__ssvfiscanf_r+0x1ea>
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	dd0d      	ble.n	8008598 <__ssvfiscanf_r+0x1a8>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	781a      	ldrb	r2, [r3, #0]
 8008580:	454a      	cmp	r2, r9
 8008582:	f040 80a6 	bne.w	80086d2 <__ssvfiscanf_r+0x2e2>
 8008586:	3301      	adds	r3, #1
 8008588:	6862      	ldr	r2, [r4, #4]
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800858e:	3a01      	subs	r2, #1
 8008590:	3301      	adds	r3, #1
 8008592:	6062      	str	r2, [r4, #4]
 8008594:	9345      	str	r3, [sp, #276]	@ 0x114
 8008596:	e753      	b.n	8008440 <__ssvfiscanf_r+0x50>
 8008598:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800859a:	4621      	mov	r1, r4
 800859c:	4630      	mov	r0, r6
 800859e:	4798      	blx	r3
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d0eb      	beq.n	800857c <__ssvfiscanf_r+0x18c>
 80085a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f040 808b 	bne.w	80086c2 <__ssvfiscanf_r+0x2d2>
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	e08b      	b.n	80086ca <__ssvfiscanf_r+0x2da>
 80085b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80085b4:	f042 0220 	orr.w	r2, r2, #32
 80085b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80085ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80085bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80085c2:	2210      	movs	r2, #16
 80085c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80085c6:	9242      	str	r2, [sp, #264]	@ 0x108
 80085c8:	d902      	bls.n	80085d0 <__ssvfiscanf_r+0x1e0>
 80085ca:	e005      	b.n	80085d8 <__ssvfiscanf_r+0x1e8>
 80085cc:	2300      	movs	r3, #0
 80085ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80085d0:	2303      	movs	r3, #3
 80085d2:	e002      	b.n	80085da <__ssvfiscanf_r+0x1ea>
 80085d4:	2308      	movs	r3, #8
 80085d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80085d8:	2304      	movs	r3, #4
 80085da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80085dc:	6863      	ldr	r3, [r4, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dd39      	ble.n	8008656 <__ssvfiscanf_r+0x266>
 80085e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80085e4:	0659      	lsls	r1, r3, #25
 80085e6:	d404      	bmi.n	80085f2 <__ssvfiscanf_r+0x202>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	5cba      	ldrb	r2, [r7, r2]
 80085ee:	0712      	lsls	r2, r2, #28
 80085f0:	d438      	bmi.n	8008664 <__ssvfiscanf_r+0x274>
 80085f2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	dc47      	bgt.n	8008688 <__ssvfiscanf_r+0x298>
 80085f8:	466b      	mov	r3, sp
 80085fa:	4622      	mov	r2, r4
 80085fc:	a941      	add	r1, sp, #260	@ 0x104
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 f9f8 	bl	80089f4 <_scanf_chars>
 8008604:	2801      	cmp	r0, #1
 8008606:	d064      	beq.n	80086d2 <__ssvfiscanf_r+0x2e2>
 8008608:	2802      	cmp	r0, #2
 800860a:	f47f af19 	bne.w	8008440 <__ssvfiscanf_r+0x50>
 800860e:	e7c9      	b.n	80085a4 <__ssvfiscanf_r+0x1b4>
 8008610:	220a      	movs	r2, #10
 8008612:	e7d7      	b.n	80085c4 <__ssvfiscanf_r+0x1d4>
 8008614:	4629      	mov	r1, r5
 8008616:	4640      	mov	r0, r8
 8008618:	f000 fb3a 	bl	8008c90 <__sccl>
 800861c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800861e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008622:	9341      	str	r3, [sp, #260]	@ 0x104
 8008624:	4605      	mov	r5, r0
 8008626:	2301      	movs	r3, #1
 8008628:	e7d7      	b.n	80085da <__ssvfiscanf_r+0x1ea>
 800862a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800862c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008630:	9341      	str	r3, [sp, #260]	@ 0x104
 8008632:	2300      	movs	r3, #0
 8008634:	e7d1      	b.n	80085da <__ssvfiscanf_r+0x1ea>
 8008636:	2302      	movs	r3, #2
 8008638:	e7cf      	b.n	80085da <__ssvfiscanf_r+0x1ea>
 800863a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800863c:	06c3      	lsls	r3, r0, #27
 800863e:	f53f aeff 	bmi.w	8008440 <__ssvfiscanf_r+0x50>
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008646:	1d19      	adds	r1, r3, #4
 8008648:	9100      	str	r1, [sp, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	07c0      	lsls	r0, r0, #31
 800864e:	bf4c      	ite	mi
 8008650:	801a      	strhmi	r2, [r3, #0]
 8008652:	601a      	strpl	r2, [r3, #0]
 8008654:	e6f4      	b.n	8008440 <__ssvfiscanf_r+0x50>
 8008656:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008658:	4621      	mov	r1, r4
 800865a:	4630      	mov	r0, r6
 800865c:	4798      	blx	r3
 800865e:	2800      	cmp	r0, #0
 8008660:	d0bf      	beq.n	80085e2 <__ssvfiscanf_r+0x1f2>
 8008662:	e79f      	b.n	80085a4 <__ssvfiscanf_r+0x1b4>
 8008664:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008666:	3201      	adds	r2, #1
 8008668:	9245      	str	r2, [sp, #276]	@ 0x114
 800866a:	6862      	ldr	r2, [r4, #4]
 800866c:	3a01      	subs	r2, #1
 800866e:	2a00      	cmp	r2, #0
 8008670:	6062      	str	r2, [r4, #4]
 8008672:	dd02      	ble.n	800867a <__ssvfiscanf_r+0x28a>
 8008674:	3301      	adds	r3, #1
 8008676:	6023      	str	r3, [r4, #0]
 8008678:	e7b6      	b.n	80085e8 <__ssvfiscanf_r+0x1f8>
 800867a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800867c:	4621      	mov	r1, r4
 800867e:	4630      	mov	r0, r6
 8008680:	4798      	blx	r3
 8008682:	2800      	cmp	r0, #0
 8008684:	d0b0      	beq.n	80085e8 <__ssvfiscanf_r+0x1f8>
 8008686:	e78d      	b.n	80085a4 <__ssvfiscanf_r+0x1b4>
 8008688:	2b04      	cmp	r3, #4
 800868a:	dc0f      	bgt.n	80086ac <__ssvfiscanf_r+0x2bc>
 800868c:	466b      	mov	r3, sp
 800868e:	4622      	mov	r2, r4
 8008690:	a941      	add	r1, sp, #260	@ 0x104
 8008692:	4630      	mov	r0, r6
 8008694:	f000 fa08 	bl	8008aa8 <_scanf_i>
 8008698:	e7b4      	b.n	8008604 <__ssvfiscanf_r+0x214>
 800869a:	bf00      	nop
 800869c:	0800833d 	.word	0x0800833d
 80086a0:	080083b7 	.word	0x080083b7
 80086a4:	0800933f 	.word	0x0800933f
 80086a8:	080092f6 	.word	0x080092f6
 80086ac:	4b0a      	ldr	r3, [pc, #40]	@ (80086d8 <__ssvfiscanf_r+0x2e8>)
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f43f aec6 	beq.w	8008440 <__ssvfiscanf_r+0x50>
 80086b4:	466b      	mov	r3, sp
 80086b6:	4622      	mov	r2, r4
 80086b8:	a941      	add	r1, sp, #260	@ 0x104
 80086ba:	4630      	mov	r0, r6
 80086bc:	f3af 8000 	nop.w
 80086c0:	e7a0      	b.n	8008604 <__ssvfiscanf_r+0x214>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	065b      	lsls	r3, r3, #25
 80086c6:	f53f af71 	bmi.w	80085ac <__ssvfiscanf_r+0x1bc>
 80086ca:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80086d4:	e7f9      	b.n	80086ca <__ssvfiscanf_r+0x2da>
 80086d6:	bf00      	nop
 80086d8:	00000000 	.word	0x00000000

080086dc <_printf_common>:
 80086dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	4616      	mov	r6, r2
 80086e2:	4698      	mov	r8, r3
 80086e4:	688a      	ldr	r2, [r1, #8]
 80086e6:	690b      	ldr	r3, [r1, #16]
 80086e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	bfb8      	it	lt
 80086f0:	4613      	movlt	r3, r2
 80086f2:	6033      	str	r3, [r6, #0]
 80086f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086f8:	4607      	mov	r7, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	b10a      	cbz	r2, 8008702 <_printf_common+0x26>
 80086fe:	3301      	adds	r3, #1
 8008700:	6033      	str	r3, [r6, #0]
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	0699      	lsls	r1, r3, #26
 8008706:	bf42      	ittt	mi
 8008708:	6833      	ldrmi	r3, [r6, #0]
 800870a:	3302      	addmi	r3, #2
 800870c:	6033      	strmi	r3, [r6, #0]
 800870e:	6825      	ldr	r5, [r4, #0]
 8008710:	f015 0506 	ands.w	r5, r5, #6
 8008714:	d106      	bne.n	8008724 <_printf_common+0x48>
 8008716:	f104 0a19 	add.w	sl, r4, #25
 800871a:	68e3      	ldr	r3, [r4, #12]
 800871c:	6832      	ldr	r2, [r6, #0]
 800871e:	1a9b      	subs	r3, r3, r2
 8008720:	42ab      	cmp	r3, r5
 8008722:	dc26      	bgt.n	8008772 <_printf_common+0x96>
 8008724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008728:	6822      	ldr	r2, [r4, #0]
 800872a:	3b00      	subs	r3, #0
 800872c:	bf18      	it	ne
 800872e:	2301      	movne	r3, #1
 8008730:	0692      	lsls	r2, r2, #26
 8008732:	d42b      	bmi.n	800878c <_printf_common+0xb0>
 8008734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008738:	4641      	mov	r1, r8
 800873a:	4638      	mov	r0, r7
 800873c:	47c8      	blx	r9
 800873e:	3001      	adds	r0, #1
 8008740:	d01e      	beq.n	8008780 <_printf_common+0xa4>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	f003 0306 	and.w	r3, r3, #6
 800874a:	2b04      	cmp	r3, #4
 800874c:	bf02      	ittt	eq
 800874e:	68e5      	ldreq	r5, [r4, #12]
 8008750:	6833      	ldreq	r3, [r6, #0]
 8008752:	1aed      	subeq	r5, r5, r3
 8008754:	68a3      	ldr	r3, [r4, #8]
 8008756:	bf0c      	ite	eq
 8008758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800875c:	2500      	movne	r5, #0
 800875e:	4293      	cmp	r3, r2
 8008760:	bfc4      	itt	gt
 8008762:	1a9b      	subgt	r3, r3, r2
 8008764:	18ed      	addgt	r5, r5, r3
 8008766:	2600      	movs	r6, #0
 8008768:	341a      	adds	r4, #26
 800876a:	42b5      	cmp	r5, r6
 800876c:	d11a      	bne.n	80087a4 <_printf_common+0xc8>
 800876e:	2000      	movs	r0, #0
 8008770:	e008      	b.n	8008784 <_printf_common+0xa8>
 8008772:	2301      	movs	r3, #1
 8008774:	4652      	mov	r2, sl
 8008776:	4641      	mov	r1, r8
 8008778:	4638      	mov	r0, r7
 800877a:	47c8      	blx	r9
 800877c:	3001      	adds	r0, #1
 800877e:	d103      	bne.n	8008788 <_printf_common+0xac>
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008788:	3501      	adds	r5, #1
 800878a:	e7c6      	b.n	800871a <_printf_common+0x3e>
 800878c:	18e1      	adds	r1, r4, r3
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	2030      	movs	r0, #48	@ 0x30
 8008792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008796:	4422      	add	r2, r4
 8008798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800879c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087a0:	3302      	adds	r3, #2
 80087a2:	e7c7      	b.n	8008734 <_printf_common+0x58>
 80087a4:	2301      	movs	r3, #1
 80087a6:	4622      	mov	r2, r4
 80087a8:	4641      	mov	r1, r8
 80087aa:	4638      	mov	r0, r7
 80087ac:	47c8      	blx	r9
 80087ae:	3001      	adds	r0, #1
 80087b0:	d0e6      	beq.n	8008780 <_printf_common+0xa4>
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7d9      	b.n	800876a <_printf_common+0x8e>
	...

080087b8 <_printf_i>:
 80087b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087bc:	7e0f      	ldrb	r7, [r1, #24]
 80087be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087c0:	2f78      	cmp	r7, #120	@ 0x78
 80087c2:	4691      	mov	r9, r2
 80087c4:	4680      	mov	r8, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	469a      	mov	sl, r3
 80087ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087ce:	d807      	bhi.n	80087e0 <_printf_i+0x28>
 80087d0:	2f62      	cmp	r7, #98	@ 0x62
 80087d2:	d80a      	bhi.n	80087ea <_printf_i+0x32>
 80087d4:	2f00      	cmp	r7, #0
 80087d6:	f000 80d1 	beq.w	800897c <_printf_i+0x1c4>
 80087da:	2f58      	cmp	r7, #88	@ 0x58
 80087dc:	f000 80b8 	beq.w	8008950 <_printf_i+0x198>
 80087e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087e8:	e03a      	b.n	8008860 <_printf_i+0xa8>
 80087ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087ee:	2b15      	cmp	r3, #21
 80087f0:	d8f6      	bhi.n	80087e0 <_printf_i+0x28>
 80087f2:	a101      	add	r1, pc, #4	@ (adr r1, 80087f8 <_printf_i+0x40>)
 80087f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087f8:	08008851 	.word	0x08008851
 80087fc:	08008865 	.word	0x08008865
 8008800:	080087e1 	.word	0x080087e1
 8008804:	080087e1 	.word	0x080087e1
 8008808:	080087e1 	.word	0x080087e1
 800880c:	080087e1 	.word	0x080087e1
 8008810:	08008865 	.word	0x08008865
 8008814:	080087e1 	.word	0x080087e1
 8008818:	080087e1 	.word	0x080087e1
 800881c:	080087e1 	.word	0x080087e1
 8008820:	080087e1 	.word	0x080087e1
 8008824:	08008963 	.word	0x08008963
 8008828:	0800888f 	.word	0x0800888f
 800882c:	0800891d 	.word	0x0800891d
 8008830:	080087e1 	.word	0x080087e1
 8008834:	080087e1 	.word	0x080087e1
 8008838:	08008985 	.word	0x08008985
 800883c:	080087e1 	.word	0x080087e1
 8008840:	0800888f 	.word	0x0800888f
 8008844:	080087e1 	.word	0x080087e1
 8008848:	080087e1 	.word	0x080087e1
 800884c:	08008925 	.word	0x08008925
 8008850:	6833      	ldr	r3, [r6, #0]
 8008852:	1d1a      	adds	r2, r3, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6032      	str	r2, [r6, #0]
 8008858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800885c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008860:	2301      	movs	r3, #1
 8008862:	e09c      	b.n	800899e <_printf_i+0x1e6>
 8008864:	6833      	ldr	r3, [r6, #0]
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	1d19      	adds	r1, r3, #4
 800886a:	6031      	str	r1, [r6, #0]
 800886c:	0606      	lsls	r6, r0, #24
 800886e:	d501      	bpl.n	8008874 <_printf_i+0xbc>
 8008870:	681d      	ldr	r5, [r3, #0]
 8008872:	e003      	b.n	800887c <_printf_i+0xc4>
 8008874:	0645      	lsls	r5, r0, #25
 8008876:	d5fb      	bpl.n	8008870 <_printf_i+0xb8>
 8008878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800887c:	2d00      	cmp	r5, #0
 800887e:	da03      	bge.n	8008888 <_printf_i+0xd0>
 8008880:	232d      	movs	r3, #45	@ 0x2d
 8008882:	426d      	negs	r5, r5
 8008884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008888:	4858      	ldr	r0, [pc, #352]	@ (80089ec <_printf_i+0x234>)
 800888a:	230a      	movs	r3, #10
 800888c:	e011      	b.n	80088b2 <_printf_i+0xfa>
 800888e:	6821      	ldr	r1, [r4, #0]
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	0608      	lsls	r0, r1, #24
 8008894:	f853 5b04 	ldr.w	r5, [r3], #4
 8008898:	d402      	bmi.n	80088a0 <_printf_i+0xe8>
 800889a:	0649      	lsls	r1, r1, #25
 800889c:	bf48      	it	mi
 800889e:	b2ad      	uxthmi	r5, r5
 80088a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088a2:	4852      	ldr	r0, [pc, #328]	@ (80089ec <_printf_i+0x234>)
 80088a4:	6033      	str	r3, [r6, #0]
 80088a6:	bf14      	ite	ne
 80088a8:	230a      	movne	r3, #10
 80088aa:	2308      	moveq	r3, #8
 80088ac:	2100      	movs	r1, #0
 80088ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088b2:	6866      	ldr	r6, [r4, #4]
 80088b4:	60a6      	str	r6, [r4, #8]
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	db05      	blt.n	80088c6 <_printf_i+0x10e>
 80088ba:	6821      	ldr	r1, [r4, #0]
 80088bc:	432e      	orrs	r6, r5
 80088be:	f021 0104 	bic.w	r1, r1, #4
 80088c2:	6021      	str	r1, [r4, #0]
 80088c4:	d04b      	beq.n	800895e <_printf_i+0x1a6>
 80088c6:	4616      	mov	r6, r2
 80088c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80088cc:	fb03 5711 	mls	r7, r3, r1, r5
 80088d0:	5dc7      	ldrb	r7, [r0, r7]
 80088d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088d6:	462f      	mov	r7, r5
 80088d8:	42bb      	cmp	r3, r7
 80088da:	460d      	mov	r5, r1
 80088dc:	d9f4      	bls.n	80088c8 <_printf_i+0x110>
 80088de:	2b08      	cmp	r3, #8
 80088e0:	d10b      	bne.n	80088fa <_printf_i+0x142>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	07df      	lsls	r7, r3, #31
 80088e6:	d508      	bpl.n	80088fa <_printf_i+0x142>
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	6861      	ldr	r1, [r4, #4]
 80088ec:	4299      	cmp	r1, r3
 80088ee:	bfde      	ittt	le
 80088f0:	2330      	movle	r3, #48	@ 0x30
 80088f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088fa:	1b92      	subs	r2, r2, r6
 80088fc:	6122      	str	r2, [r4, #16]
 80088fe:	f8cd a000 	str.w	sl, [sp]
 8008902:	464b      	mov	r3, r9
 8008904:	aa03      	add	r2, sp, #12
 8008906:	4621      	mov	r1, r4
 8008908:	4640      	mov	r0, r8
 800890a:	f7ff fee7 	bl	80086dc <_printf_common>
 800890e:	3001      	adds	r0, #1
 8008910:	d14a      	bne.n	80089a8 <_printf_i+0x1f0>
 8008912:	f04f 30ff 	mov.w	r0, #4294967295
 8008916:	b004      	add	sp, #16
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	f043 0320 	orr.w	r3, r3, #32
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	4832      	ldr	r0, [pc, #200]	@ (80089f0 <_printf_i+0x238>)
 8008926:	2778      	movs	r7, #120	@ 0x78
 8008928:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	6831      	ldr	r1, [r6, #0]
 8008930:	061f      	lsls	r7, r3, #24
 8008932:	f851 5b04 	ldr.w	r5, [r1], #4
 8008936:	d402      	bmi.n	800893e <_printf_i+0x186>
 8008938:	065f      	lsls	r7, r3, #25
 800893a:	bf48      	it	mi
 800893c:	b2ad      	uxthmi	r5, r5
 800893e:	6031      	str	r1, [r6, #0]
 8008940:	07d9      	lsls	r1, r3, #31
 8008942:	bf44      	itt	mi
 8008944:	f043 0320 	orrmi.w	r3, r3, #32
 8008948:	6023      	strmi	r3, [r4, #0]
 800894a:	b11d      	cbz	r5, 8008954 <_printf_i+0x19c>
 800894c:	2310      	movs	r3, #16
 800894e:	e7ad      	b.n	80088ac <_printf_i+0xf4>
 8008950:	4826      	ldr	r0, [pc, #152]	@ (80089ec <_printf_i+0x234>)
 8008952:	e7e9      	b.n	8008928 <_printf_i+0x170>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	f023 0320 	bic.w	r3, r3, #32
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	e7f6      	b.n	800894c <_printf_i+0x194>
 800895e:	4616      	mov	r6, r2
 8008960:	e7bd      	b.n	80088de <_printf_i+0x126>
 8008962:	6833      	ldr	r3, [r6, #0]
 8008964:	6825      	ldr	r5, [r4, #0]
 8008966:	6961      	ldr	r1, [r4, #20]
 8008968:	1d18      	adds	r0, r3, #4
 800896a:	6030      	str	r0, [r6, #0]
 800896c:	062e      	lsls	r6, r5, #24
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	d501      	bpl.n	8008976 <_printf_i+0x1be>
 8008972:	6019      	str	r1, [r3, #0]
 8008974:	e002      	b.n	800897c <_printf_i+0x1c4>
 8008976:	0668      	lsls	r0, r5, #25
 8008978:	d5fb      	bpl.n	8008972 <_printf_i+0x1ba>
 800897a:	8019      	strh	r1, [r3, #0]
 800897c:	2300      	movs	r3, #0
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	4616      	mov	r6, r2
 8008982:	e7bc      	b.n	80088fe <_printf_i+0x146>
 8008984:	6833      	ldr	r3, [r6, #0]
 8008986:	1d1a      	adds	r2, r3, #4
 8008988:	6032      	str	r2, [r6, #0]
 800898a:	681e      	ldr	r6, [r3, #0]
 800898c:	6862      	ldr	r2, [r4, #4]
 800898e:	2100      	movs	r1, #0
 8008990:	4630      	mov	r0, r6
 8008992:	f7f7 fc45 	bl	8000220 <memchr>
 8008996:	b108      	cbz	r0, 800899c <_printf_i+0x1e4>
 8008998:	1b80      	subs	r0, r0, r6
 800899a:	6060      	str	r0, [r4, #4]
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	2300      	movs	r3, #0
 80089a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a6:	e7aa      	b.n	80088fe <_printf_i+0x146>
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	4632      	mov	r2, r6
 80089ac:	4649      	mov	r1, r9
 80089ae:	4640      	mov	r0, r8
 80089b0:	47d0      	blx	sl
 80089b2:	3001      	adds	r0, #1
 80089b4:	d0ad      	beq.n	8008912 <_printf_i+0x15a>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	079b      	lsls	r3, r3, #30
 80089ba:	d413      	bmi.n	80089e4 <_printf_i+0x22c>
 80089bc:	68e0      	ldr	r0, [r4, #12]
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	4298      	cmp	r0, r3
 80089c2:	bfb8      	it	lt
 80089c4:	4618      	movlt	r0, r3
 80089c6:	e7a6      	b.n	8008916 <_printf_i+0x15e>
 80089c8:	2301      	movs	r3, #1
 80089ca:	4632      	mov	r2, r6
 80089cc:	4649      	mov	r1, r9
 80089ce:	4640      	mov	r0, r8
 80089d0:	47d0      	blx	sl
 80089d2:	3001      	adds	r0, #1
 80089d4:	d09d      	beq.n	8008912 <_printf_i+0x15a>
 80089d6:	3501      	adds	r5, #1
 80089d8:	68e3      	ldr	r3, [r4, #12]
 80089da:	9903      	ldr	r1, [sp, #12]
 80089dc:	1a5b      	subs	r3, r3, r1
 80089de:	42ab      	cmp	r3, r5
 80089e0:	dcf2      	bgt.n	80089c8 <_printf_i+0x210>
 80089e2:	e7eb      	b.n	80089bc <_printf_i+0x204>
 80089e4:	2500      	movs	r5, #0
 80089e6:	f104 0619 	add.w	r6, r4, #25
 80089ea:	e7f5      	b.n	80089d8 <_printf_i+0x220>
 80089ec:	08009301 	.word	0x08009301
 80089f0:	08009312 	.word	0x08009312

080089f4 <_scanf_chars>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	4615      	mov	r5, r2
 80089fa:	688a      	ldr	r2, [r1, #8]
 80089fc:	4680      	mov	r8, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	b932      	cbnz	r2, 8008a10 <_scanf_chars+0x1c>
 8008a02:	698a      	ldr	r2, [r1, #24]
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	bf14      	ite	ne
 8008a08:	f04f 32ff 	movne.w	r2, #4294967295
 8008a0c:	2201      	moveq	r2, #1
 8008a0e:	608a      	str	r2, [r1, #8]
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008aa4 <_scanf_chars+0xb0>
 8008a16:	06d1      	lsls	r1, r2, #27
 8008a18:	bf5f      	itttt	pl
 8008a1a:	681a      	ldrpl	r2, [r3, #0]
 8008a1c:	1d11      	addpl	r1, r2, #4
 8008a1e:	6019      	strpl	r1, [r3, #0]
 8008a20:	6816      	ldrpl	r6, [r2, #0]
 8008a22:	2700      	movs	r7, #0
 8008a24:	69a0      	ldr	r0, [r4, #24]
 8008a26:	b188      	cbz	r0, 8008a4c <_scanf_chars+0x58>
 8008a28:	2801      	cmp	r0, #1
 8008a2a:	d107      	bne.n	8008a3c <_scanf_chars+0x48>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	6963      	ldr	r3, [r4, #20]
 8008a32:	5c9b      	ldrb	r3, [r3, r2]
 8008a34:	b953      	cbnz	r3, 8008a4c <_scanf_chars+0x58>
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	d031      	beq.n	8008a9e <_scanf_chars+0xaa>
 8008a3a:	e022      	b.n	8008a82 <_scanf_chars+0x8e>
 8008a3c:	2802      	cmp	r0, #2
 8008a3e:	d120      	bne.n	8008a82 <_scanf_chars+0x8e>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008a48:	071b      	lsls	r3, r3, #28
 8008a4a:	d41a      	bmi.n	8008a82 <_scanf_chars+0x8e>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	06da      	lsls	r2, r3, #27
 8008a50:	bf5e      	ittt	pl
 8008a52:	682b      	ldrpl	r3, [r5, #0]
 8008a54:	781b      	ldrbpl	r3, [r3, #0]
 8008a56:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008a5a:	682a      	ldr	r2, [r5, #0]
 8008a5c:	686b      	ldr	r3, [r5, #4]
 8008a5e:	3201      	adds	r2, #1
 8008a60:	602a      	str	r2, [r5, #0]
 8008a62:	68a2      	ldr	r2, [r4, #8]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	3a01      	subs	r2, #1
 8008a68:	606b      	str	r3, [r5, #4]
 8008a6a:	3701      	adds	r7, #1
 8008a6c:	60a2      	str	r2, [r4, #8]
 8008a6e:	b142      	cbz	r2, 8008a82 <_scanf_chars+0x8e>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dcd7      	bgt.n	8008a24 <_scanf_chars+0x30>
 8008a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4798      	blx	r3
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d0d0      	beq.n	8008a24 <_scanf_chars+0x30>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f013 0310 	ands.w	r3, r3, #16
 8008a88:	d105      	bne.n	8008a96 <_scanf_chars+0xa2>
 8008a8a:	68e2      	ldr	r2, [r4, #12]
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	60e2      	str	r2, [r4, #12]
 8008a90:	69a2      	ldr	r2, [r4, #24]
 8008a92:	b102      	cbz	r2, 8008a96 <_scanf_chars+0xa2>
 8008a94:	7033      	strb	r3, [r6, #0]
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	443b      	add	r3, r7
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0800933f 	.word	0x0800933f

08008aa8 <_scanf_i>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	4698      	mov	r8, r3
 8008aae:	4b74      	ldr	r3, [pc, #464]	@ (8008c80 <_scanf_i+0x1d8>)
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	4682      	mov	sl, r0
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008aba:	b087      	sub	sp, #28
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ac2:	4b70      	ldr	r3, [pc, #448]	@ (8008c84 <_scanf_i+0x1dc>)
 8008ac4:	69a1      	ldr	r1, [r4, #24]
 8008ac6:	4a70      	ldr	r2, [pc, #448]	@ (8008c88 <_scanf_i+0x1e0>)
 8008ac8:	2903      	cmp	r1, #3
 8008aca:	bf08      	it	eq
 8008acc:	461a      	moveq	r2, r3
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	9201      	str	r2, [sp, #4]
 8008ad2:	1e5a      	subs	r2, r3, #1
 8008ad4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ad8:	bf88      	it	hi
 8008ada:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008ade:	4627      	mov	r7, r4
 8008ae0:	bf82      	ittt	hi
 8008ae2:	eb03 0905 	addhi.w	r9, r3, r5
 8008ae6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008aea:	60a3      	strhi	r3, [r4, #8]
 8008aec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008af0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008af4:	bf98      	it	ls
 8008af6:	f04f 0900 	movls.w	r9, #0
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	463d      	mov	r5, r7
 8008afe:	f04f 0b00 	mov.w	fp, #0
 8008b02:	6831      	ldr	r1, [r6, #0]
 8008b04:	ab03      	add	r3, sp, #12
 8008b06:	7809      	ldrb	r1, [r1, #0]
 8008b08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f7f7 fb87 	bl	8000220 <memchr>
 8008b12:	b328      	cbz	r0, 8008b60 <_scanf_i+0xb8>
 8008b14:	f1bb 0f01 	cmp.w	fp, #1
 8008b18:	d159      	bne.n	8008bce <_scanf_i+0x126>
 8008b1a:	6862      	ldr	r2, [r4, #4]
 8008b1c:	b92a      	cbnz	r2, 8008b2a <_scanf_i+0x82>
 8008b1e:	6822      	ldr	r2, [r4, #0]
 8008b20:	2108      	movs	r1, #8
 8008b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b26:	6061      	str	r1, [r4, #4]
 8008b28:	6022      	str	r2, [r4, #0]
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	68a2      	ldr	r2, [r4, #8]
 8008b34:	1e51      	subs	r1, r2, #1
 8008b36:	60a1      	str	r1, [r4, #8]
 8008b38:	b192      	cbz	r2, 8008b60 <_scanf_i+0xb8>
 8008b3a:	6832      	ldr	r2, [r6, #0]
 8008b3c:	1c51      	adds	r1, r2, #1
 8008b3e:	6031      	str	r1, [r6, #0]
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	f805 2b01 	strb.w	r2, [r5], #1
 8008b46:	6872      	ldr	r2, [r6, #4]
 8008b48:	3a01      	subs	r2, #1
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	6072      	str	r2, [r6, #4]
 8008b4e:	dc07      	bgt.n	8008b60 <_scanf_i+0xb8>
 8008b50:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008b54:	4631      	mov	r1, r6
 8008b56:	4650      	mov	r0, sl
 8008b58:	4790      	blx	r2
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f040 8085 	bne.w	8008c6a <_scanf_i+0x1c2>
 8008b60:	f10b 0b01 	add.w	fp, fp, #1
 8008b64:	f1bb 0f03 	cmp.w	fp, #3
 8008b68:	d1cb      	bne.n	8008b02 <_scanf_i+0x5a>
 8008b6a:	6863      	ldr	r3, [r4, #4]
 8008b6c:	b90b      	cbnz	r3, 8008b72 <_scanf_i+0xca>
 8008b6e:	230a      	movs	r3, #10
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	6863      	ldr	r3, [r4, #4]
 8008b74:	4945      	ldr	r1, [pc, #276]	@ (8008c8c <_scanf_i+0x1e4>)
 8008b76:	6960      	ldr	r0, [r4, #20]
 8008b78:	1ac9      	subs	r1, r1, r3
 8008b7a:	f000 f889 	bl	8008c90 <__sccl>
 8008b7e:	f04f 0b00 	mov.w	fp, #0
 8008b82:	68a3      	ldr	r3, [r4, #8]
 8008b84:	6822      	ldr	r2, [r4, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d03d      	beq.n	8008c06 <_scanf_i+0x15e>
 8008b8a:	6831      	ldr	r1, [r6, #0]
 8008b8c:	6960      	ldr	r0, [r4, #20]
 8008b8e:	f891 c000 	ldrb.w	ip, [r1]
 8008b92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d035      	beq.n	8008c06 <_scanf_i+0x15e>
 8008b9a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008b9e:	d124      	bne.n	8008bea <_scanf_i+0x142>
 8008ba0:	0510      	lsls	r0, r2, #20
 8008ba2:	d522      	bpl.n	8008bea <_scanf_i+0x142>
 8008ba4:	f10b 0b01 	add.w	fp, fp, #1
 8008ba8:	f1b9 0f00 	cmp.w	r9, #0
 8008bac:	d003      	beq.n	8008bb6 <_scanf_i+0x10e>
 8008bae:	3301      	adds	r3, #1
 8008bb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bb4:	60a3      	str	r3, [r4, #8]
 8008bb6:	6873      	ldr	r3, [r6, #4]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	6073      	str	r3, [r6, #4]
 8008bbe:	dd1b      	ble.n	8008bf8 <_scanf_i+0x150>
 8008bc0:	6833      	ldr	r3, [r6, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	68a3      	ldr	r3, [r4, #8]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	60a3      	str	r3, [r4, #8]
 8008bcc:	e7d9      	b.n	8008b82 <_scanf_i+0xda>
 8008bce:	f1bb 0f02 	cmp.w	fp, #2
 8008bd2:	d1ae      	bne.n	8008b32 <_scanf_i+0x8a>
 8008bd4:	6822      	ldr	r2, [r4, #0]
 8008bd6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008bda:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008bde:	d1c4      	bne.n	8008b6a <_scanf_i+0xc2>
 8008be0:	2110      	movs	r1, #16
 8008be2:	6061      	str	r1, [r4, #4]
 8008be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008be8:	e7a2      	b.n	8008b30 <_scanf_i+0x88>
 8008bea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	780b      	ldrb	r3, [r1, #0]
 8008bf2:	f805 3b01 	strb.w	r3, [r5], #1
 8008bf6:	e7de      	b.n	8008bb6 <_scanf_i+0x10e>
 8008bf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4650      	mov	r0, sl
 8008c00:	4798      	blx	r3
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d0df      	beq.n	8008bc6 <_scanf_i+0x11e>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	05d9      	lsls	r1, r3, #23
 8008c0a:	d50d      	bpl.n	8008c28 <_scanf_i+0x180>
 8008c0c:	42bd      	cmp	r5, r7
 8008c0e:	d909      	bls.n	8008c24 <_scanf_i+0x17c>
 8008c10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c18:	4632      	mov	r2, r6
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	4798      	blx	r3
 8008c1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c22:	464d      	mov	r5, r9
 8008c24:	42bd      	cmp	r5, r7
 8008c26:	d028      	beq.n	8008c7a <_scanf_i+0x1d2>
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	f012 0210 	ands.w	r2, r2, #16
 8008c2e:	d113      	bne.n	8008c58 <_scanf_i+0x1b0>
 8008c30:	702a      	strb	r2, [r5, #0]
 8008c32:	6863      	ldr	r3, [r4, #4]
 8008c34:	9e01      	ldr	r6, [sp, #4]
 8008c36:	4639      	mov	r1, r7
 8008c38:	4650      	mov	r0, sl
 8008c3a:	47b0      	blx	r6
 8008c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c40:	6821      	ldr	r1, [r4, #0]
 8008c42:	1d1a      	adds	r2, r3, #4
 8008c44:	f8c8 2000 	str.w	r2, [r8]
 8008c48:	f011 0f20 	tst.w	r1, #32
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	d00f      	beq.n	8008c70 <_scanf_i+0x1c8>
 8008c50:	6018      	str	r0, [r3, #0]
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60e3      	str	r3, [r4, #12]
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	1bed      	subs	r5, r5, r7
 8008c5c:	445d      	add	r5, fp
 8008c5e:	442b      	add	r3, r5
 8008c60:	6123      	str	r3, [r4, #16]
 8008c62:	2000      	movs	r0, #0
 8008c64:	b007      	add	sp, #28
 8008c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6a:	f04f 0b00 	mov.w	fp, #0
 8008c6e:	e7ca      	b.n	8008c06 <_scanf_i+0x15e>
 8008c70:	07ca      	lsls	r2, r1, #31
 8008c72:	bf4c      	ite	mi
 8008c74:	8018      	strhmi	r0, [r3, #0]
 8008c76:	6018      	strpl	r0, [r3, #0]
 8008c78:	e7eb      	b.n	8008c52 <_scanf_i+0x1aa>
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	e7f2      	b.n	8008c64 <_scanf_i+0x1bc>
 8008c7e:	bf00      	nop
 8008c80:	080092cc 	.word	0x080092cc
 8008c84:	08008f1d 	.word	0x08008f1d
 8008c88:	08008ffd 	.word	0x08008ffd
 8008c8c:	08009333 	.word	0x08009333

08008c90 <__sccl>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	780b      	ldrb	r3, [r1, #0]
 8008c94:	4604      	mov	r4, r0
 8008c96:	2b5e      	cmp	r3, #94	@ 0x5e
 8008c98:	bf0b      	itete	eq
 8008c9a:	784b      	ldrbeq	r3, [r1, #1]
 8008c9c:	1c4a      	addne	r2, r1, #1
 8008c9e:	1c8a      	addeq	r2, r1, #2
 8008ca0:	2100      	movne	r1, #0
 8008ca2:	bf08      	it	eq
 8008ca4:	2101      	moveq	r1, #1
 8008ca6:	3801      	subs	r0, #1
 8008ca8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008cac:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008cb0:	42a8      	cmp	r0, r5
 8008cb2:	d1fb      	bne.n	8008cac <__sccl+0x1c>
 8008cb4:	b90b      	cbnz	r3, 8008cba <__sccl+0x2a>
 8008cb6:	1e50      	subs	r0, r2, #1
 8008cb8:	bd70      	pop	{r4, r5, r6, pc}
 8008cba:	f081 0101 	eor.w	r1, r1, #1
 8008cbe:	54e1      	strb	r1, [r4, r3]
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008cc8:	2d2d      	cmp	r5, #45	@ 0x2d
 8008cca:	d005      	beq.n	8008cd8 <__sccl+0x48>
 8008ccc:	2d5d      	cmp	r5, #93	@ 0x5d
 8008cce:	d016      	beq.n	8008cfe <__sccl+0x6e>
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	d0f1      	beq.n	8008cb8 <__sccl+0x28>
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	e7f2      	b.n	8008cbe <__sccl+0x2e>
 8008cd8:	7846      	ldrb	r6, [r0, #1]
 8008cda:	2e5d      	cmp	r6, #93	@ 0x5d
 8008cdc:	d0fa      	beq.n	8008cd4 <__sccl+0x44>
 8008cde:	42b3      	cmp	r3, r6
 8008ce0:	dcf8      	bgt.n	8008cd4 <__sccl+0x44>
 8008ce2:	3002      	adds	r0, #2
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	3201      	adds	r2, #1
 8008ce8:	4296      	cmp	r6, r2
 8008cea:	54a1      	strb	r1, [r4, r2]
 8008cec:	dcfb      	bgt.n	8008ce6 <__sccl+0x56>
 8008cee:	1af2      	subs	r2, r6, r3
 8008cf0:	3a01      	subs	r2, #1
 8008cf2:	1c5d      	adds	r5, r3, #1
 8008cf4:	42b3      	cmp	r3, r6
 8008cf6:	bfa8      	it	ge
 8008cf8:	2200      	movge	r2, #0
 8008cfa:	18ab      	adds	r3, r5, r2
 8008cfc:	e7e1      	b.n	8008cc2 <__sccl+0x32>
 8008cfe:	4610      	mov	r0, r2
 8008d00:	e7da      	b.n	8008cb8 <__sccl+0x28>

08008d02 <__submore>:
 8008d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d06:	460c      	mov	r4, r1
 8008d08:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008d0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d11d      	bne.n	8008d4e <__submore+0x4c>
 8008d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008d16:	f7ff f92d 	bl	8007f74 <_malloc_r>
 8008d1a:	b918      	cbnz	r0, 8008d24 <__submore+0x22>
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d28:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008d2a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008d2e:	6360      	str	r0, [r4, #52]	@ 0x34
 8008d30:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008d34:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008d38:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008d3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008d40:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8008d44:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008d48:	6020      	str	r0, [r4, #0]
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e7e8      	b.n	8008d20 <__submore+0x1e>
 8008d4e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008d50:	0077      	lsls	r7, r6, #1
 8008d52:	463a      	mov	r2, r7
 8008d54:	f000 f83a 	bl	8008dcc <_realloc_r>
 8008d58:	4605      	mov	r5, r0
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d0de      	beq.n	8008d1c <__submore+0x1a>
 8008d5e:	eb00 0806 	add.w	r8, r0, r6
 8008d62:	4601      	mov	r1, r0
 8008d64:	4632      	mov	r2, r6
 8008d66:	4640      	mov	r0, r8
 8008d68:	f7ff f88a 	bl	8007e80 <memcpy>
 8008d6c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008d70:	f8c4 8000 	str.w	r8, [r4]
 8008d74:	e7e9      	b.n	8008d4a <__submore+0x48>

08008d76 <memmove>:
 8008d76:	4288      	cmp	r0, r1
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	eb01 0402 	add.w	r4, r1, r2
 8008d7e:	d902      	bls.n	8008d86 <memmove+0x10>
 8008d80:	4284      	cmp	r4, r0
 8008d82:	4623      	mov	r3, r4
 8008d84:	d807      	bhi.n	8008d96 <memmove+0x20>
 8008d86:	1e43      	subs	r3, r0, #1
 8008d88:	42a1      	cmp	r1, r4
 8008d8a:	d008      	beq.n	8008d9e <memmove+0x28>
 8008d8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d94:	e7f8      	b.n	8008d88 <memmove+0x12>
 8008d96:	4402      	add	r2, r0
 8008d98:	4601      	mov	r1, r0
 8008d9a:	428a      	cmp	r2, r1
 8008d9c:	d100      	bne.n	8008da0 <memmove+0x2a>
 8008d9e:	bd10      	pop	{r4, pc}
 8008da0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008da4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da8:	e7f7      	b.n	8008d9a <memmove+0x24>
	...

08008dac <_sbrk_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d06      	ldr	r5, [pc, #24]	@ (8008dc8 <_sbrk_r+0x1c>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	f7fa fcf2 	bl	80037a0 <_sbrk>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_sbrk_r+0x1a>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_sbrk_r+0x1a>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	20000678 	.word	0x20000678

08008dcc <_realloc_r>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	4614      	mov	r4, r2
 8008dd4:	460d      	mov	r5, r1
 8008dd6:	b921      	cbnz	r1, 8008de2 <_realloc_r+0x16>
 8008dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ddc:	4611      	mov	r1, r2
 8008dde:	f7ff b8c9 	b.w	8007f74 <_malloc_r>
 8008de2:	b92a      	cbnz	r2, 8008df0 <_realloc_r+0x24>
 8008de4:	f7ff f85a 	bl	8007e9c <_free_r>
 8008de8:	4625      	mov	r5, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df0:	f000 f906 	bl	8009000 <_malloc_usable_size_r>
 8008df4:	4284      	cmp	r4, r0
 8008df6:	4606      	mov	r6, r0
 8008df8:	d802      	bhi.n	8008e00 <_realloc_r+0x34>
 8008dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dfe:	d8f4      	bhi.n	8008dea <_realloc_r+0x1e>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4638      	mov	r0, r7
 8008e04:	f7ff f8b6 	bl	8007f74 <_malloc_r>
 8008e08:	4680      	mov	r8, r0
 8008e0a:	b908      	cbnz	r0, 8008e10 <_realloc_r+0x44>
 8008e0c:	4645      	mov	r5, r8
 8008e0e:	e7ec      	b.n	8008dea <_realloc_r+0x1e>
 8008e10:	42b4      	cmp	r4, r6
 8008e12:	4622      	mov	r2, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	bf28      	it	cs
 8008e18:	4632      	movcs	r2, r6
 8008e1a:	f7ff f831 	bl	8007e80 <memcpy>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4638      	mov	r0, r7
 8008e22:	f7ff f83b 	bl	8007e9c <_free_r>
 8008e26:	e7f1      	b.n	8008e0c <_realloc_r+0x40>

08008e28 <_strtol_l.isra.0>:
 8008e28:	2b24      	cmp	r3, #36	@ 0x24
 8008e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2e:	4686      	mov	lr, r0
 8008e30:	4690      	mov	r8, r2
 8008e32:	d801      	bhi.n	8008e38 <_strtol_l.isra.0+0x10>
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d106      	bne.n	8008e46 <_strtol_l.isra.0+0x1e>
 8008e38:	f7fe fff6 	bl	8007e28 <__errno>
 8008e3c:	2316      	movs	r3, #22
 8008e3e:	6003      	str	r3, [r0, #0]
 8008e40:	2000      	movs	r0, #0
 8008e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e46:	4834      	ldr	r0, [pc, #208]	@ (8008f18 <_strtol_l.isra.0+0xf0>)
 8008e48:	460d      	mov	r5, r1
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e50:	5d06      	ldrb	r6, [r0, r4]
 8008e52:	f016 0608 	ands.w	r6, r6, #8
 8008e56:	d1f8      	bne.n	8008e4a <_strtol_l.isra.0+0x22>
 8008e58:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e5a:	d110      	bne.n	8008e7e <_strtol_l.isra.0+0x56>
 8008e5c:	782c      	ldrb	r4, [r5, #0]
 8008e5e:	2601      	movs	r6, #1
 8008e60:	1c95      	adds	r5, r2, #2
 8008e62:	f033 0210 	bics.w	r2, r3, #16
 8008e66:	d115      	bne.n	8008e94 <_strtol_l.isra.0+0x6c>
 8008e68:	2c30      	cmp	r4, #48	@ 0x30
 8008e6a:	d10d      	bne.n	8008e88 <_strtol_l.isra.0+0x60>
 8008e6c:	782a      	ldrb	r2, [r5, #0]
 8008e6e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e72:	2a58      	cmp	r2, #88	@ 0x58
 8008e74:	d108      	bne.n	8008e88 <_strtol_l.isra.0+0x60>
 8008e76:	786c      	ldrb	r4, [r5, #1]
 8008e78:	3502      	adds	r5, #2
 8008e7a:	2310      	movs	r3, #16
 8008e7c:	e00a      	b.n	8008e94 <_strtol_l.isra.0+0x6c>
 8008e7e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e80:	bf04      	itt	eq
 8008e82:	782c      	ldrbeq	r4, [r5, #0]
 8008e84:	1c95      	addeq	r5, r2, #2
 8008e86:	e7ec      	b.n	8008e62 <_strtol_l.isra.0+0x3a>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f6      	bne.n	8008e7a <_strtol_l.isra.0+0x52>
 8008e8c:	2c30      	cmp	r4, #48	@ 0x30
 8008e8e:	bf14      	ite	ne
 8008e90:	230a      	movne	r3, #10
 8008e92:	2308      	moveq	r3, #8
 8008e94:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e98:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	fbbc f9f3 	udiv	r9, ip, r3
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ea8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008eac:	2f09      	cmp	r7, #9
 8008eae:	d80f      	bhi.n	8008ed0 <_strtol_l.isra.0+0xa8>
 8008eb0:	463c      	mov	r4, r7
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	dd1b      	ble.n	8008eee <_strtol_l.isra.0+0xc6>
 8008eb6:	1c57      	adds	r7, r2, #1
 8008eb8:	d007      	beq.n	8008eca <_strtol_l.isra.0+0xa2>
 8008eba:	4581      	cmp	r9, r0
 8008ebc:	d314      	bcc.n	8008ee8 <_strtol_l.isra.0+0xc0>
 8008ebe:	d101      	bne.n	8008ec4 <_strtol_l.isra.0+0x9c>
 8008ec0:	45a2      	cmp	sl, r4
 8008ec2:	db11      	blt.n	8008ee8 <_strtol_l.isra.0+0xc0>
 8008ec4:	fb00 4003 	mla	r0, r0, r3, r4
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ece:	e7eb      	b.n	8008ea8 <_strtol_l.isra.0+0x80>
 8008ed0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008ed4:	2f19      	cmp	r7, #25
 8008ed6:	d801      	bhi.n	8008edc <_strtol_l.isra.0+0xb4>
 8008ed8:	3c37      	subs	r4, #55	@ 0x37
 8008eda:	e7ea      	b.n	8008eb2 <_strtol_l.isra.0+0x8a>
 8008edc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ee0:	2f19      	cmp	r7, #25
 8008ee2:	d804      	bhi.n	8008eee <_strtol_l.isra.0+0xc6>
 8008ee4:	3c57      	subs	r4, #87	@ 0x57
 8008ee6:	e7e4      	b.n	8008eb2 <_strtol_l.isra.0+0x8a>
 8008ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eec:	e7ed      	b.n	8008eca <_strtol_l.isra.0+0xa2>
 8008eee:	1c53      	adds	r3, r2, #1
 8008ef0:	d108      	bne.n	8008f04 <_strtol_l.isra.0+0xdc>
 8008ef2:	2322      	movs	r3, #34	@ 0x22
 8008ef4:	f8ce 3000 	str.w	r3, [lr]
 8008ef8:	4660      	mov	r0, ip
 8008efa:	f1b8 0f00 	cmp.w	r8, #0
 8008efe:	d0a0      	beq.n	8008e42 <_strtol_l.isra.0+0x1a>
 8008f00:	1e69      	subs	r1, r5, #1
 8008f02:	e006      	b.n	8008f12 <_strtol_l.isra.0+0xea>
 8008f04:	b106      	cbz	r6, 8008f08 <_strtol_l.isra.0+0xe0>
 8008f06:	4240      	negs	r0, r0
 8008f08:	f1b8 0f00 	cmp.w	r8, #0
 8008f0c:	d099      	beq.n	8008e42 <_strtol_l.isra.0+0x1a>
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d1f6      	bne.n	8008f00 <_strtol_l.isra.0+0xd8>
 8008f12:	f8c8 1000 	str.w	r1, [r8]
 8008f16:	e794      	b.n	8008e42 <_strtol_l.isra.0+0x1a>
 8008f18:	0800933f 	.word	0x0800933f

08008f1c <_strtol_r>:
 8008f1c:	f7ff bf84 	b.w	8008e28 <_strtol_l.isra.0>

08008f20 <_strtoul_l.isra.0>:
 8008f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4e34      	ldr	r6, [pc, #208]	@ (8008ff8 <_strtoul_l.isra.0+0xd8>)
 8008f26:	4686      	mov	lr, r0
 8008f28:	460d      	mov	r5, r1
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f30:	5d37      	ldrb	r7, [r6, r4]
 8008f32:	f017 0708 	ands.w	r7, r7, #8
 8008f36:	d1f8      	bne.n	8008f2a <_strtoul_l.isra.0+0xa>
 8008f38:	2c2d      	cmp	r4, #45	@ 0x2d
 8008f3a:	d110      	bne.n	8008f5e <_strtoul_l.isra.0+0x3e>
 8008f3c:	782c      	ldrb	r4, [r5, #0]
 8008f3e:	2701      	movs	r7, #1
 8008f40:	1c85      	adds	r5, r0, #2
 8008f42:	f033 0010 	bics.w	r0, r3, #16
 8008f46:	d115      	bne.n	8008f74 <_strtoul_l.isra.0+0x54>
 8008f48:	2c30      	cmp	r4, #48	@ 0x30
 8008f4a:	d10d      	bne.n	8008f68 <_strtoul_l.isra.0+0x48>
 8008f4c:	7828      	ldrb	r0, [r5, #0]
 8008f4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008f52:	2858      	cmp	r0, #88	@ 0x58
 8008f54:	d108      	bne.n	8008f68 <_strtoul_l.isra.0+0x48>
 8008f56:	786c      	ldrb	r4, [r5, #1]
 8008f58:	3502      	adds	r5, #2
 8008f5a:	2310      	movs	r3, #16
 8008f5c:	e00a      	b.n	8008f74 <_strtoul_l.isra.0+0x54>
 8008f5e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f60:	bf04      	itt	eq
 8008f62:	782c      	ldrbeq	r4, [r5, #0]
 8008f64:	1c85      	addeq	r5, r0, #2
 8008f66:	e7ec      	b.n	8008f42 <_strtoul_l.isra.0+0x22>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f6      	bne.n	8008f5a <_strtoul_l.isra.0+0x3a>
 8008f6c:	2c30      	cmp	r4, #48	@ 0x30
 8008f6e:	bf14      	ite	ne
 8008f70:	230a      	movne	r3, #10
 8008f72:	2308      	moveq	r3, #8
 8008f74:	f04f 38ff 	mov.w	r8, #4294967295
 8008f78:	2600      	movs	r6, #0
 8008f7a:	fbb8 f8f3 	udiv	r8, r8, r3
 8008f7e:	fb03 f908 	mul.w	r9, r3, r8
 8008f82:	ea6f 0909 	mvn.w	r9, r9
 8008f86:	4630      	mov	r0, r6
 8008f88:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008f8c:	f1bc 0f09 	cmp.w	ip, #9
 8008f90:	d810      	bhi.n	8008fb4 <_strtoul_l.isra.0+0x94>
 8008f92:	4664      	mov	r4, ip
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	dd1e      	ble.n	8008fd6 <_strtoul_l.isra.0+0xb6>
 8008f98:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008f9c:	d007      	beq.n	8008fae <_strtoul_l.isra.0+0x8e>
 8008f9e:	4580      	cmp	r8, r0
 8008fa0:	d316      	bcc.n	8008fd0 <_strtoul_l.isra.0+0xb0>
 8008fa2:	d101      	bne.n	8008fa8 <_strtoul_l.isra.0+0x88>
 8008fa4:	45a1      	cmp	r9, r4
 8008fa6:	db13      	blt.n	8008fd0 <_strtoul_l.isra.0+0xb0>
 8008fa8:	fb00 4003 	mla	r0, r0, r3, r4
 8008fac:	2601      	movs	r6, #1
 8008fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fb2:	e7e9      	b.n	8008f88 <_strtoul_l.isra.0+0x68>
 8008fb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008fb8:	f1bc 0f19 	cmp.w	ip, #25
 8008fbc:	d801      	bhi.n	8008fc2 <_strtoul_l.isra.0+0xa2>
 8008fbe:	3c37      	subs	r4, #55	@ 0x37
 8008fc0:	e7e8      	b.n	8008f94 <_strtoul_l.isra.0+0x74>
 8008fc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008fc6:	f1bc 0f19 	cmp.w	ip, #25
 8008fca:	d804      	bhi.n	8008fd6 <_strtoul_l.isra.0+0xb6>
 8008fcc:	3c57      	subs	r4, #87	@ 0x57
 8008fce:	e7e1      	b.n	8008f94 <_strtoul_l.isra.0+0x74>
 8008fd0:	f04f 36ff 	mov.w	r6, #4294967295
 8008fd4:	e7eb      	b.n	8008fae <_strtoul_l.isra.0+0x8e>
 8008fd6:	1c73      	adds	r3, r6, #1
 8008fd8:	d106      	bne.n	8008fe8 <_strtoul_l.isra.0+0xc8>
 8008fda:	2322      	movs	r3, #34	@ 0x22
 8008fdc:	f8ce 3000 	str.w	r3, [lr]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	b932      	cbnz	r2, 8008ff2 <_strtoul_l.isra.0+0xd2>
 8008fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fe8:	b107      	cbz	r7, 8008fec <_strtoul_l.isra.0+0xcc>
 8008fea:	4240      	negs	r0, r0
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	d0f9      	beq.n	8008fe4 <_strtoul_l.isra.0+0xc4>
 8008ff0:	b106      	cbz	r6, 8008ff4 <_strtoul_l.isra.0+0xd4>
 8008ff2:	1e69      	subs	r1, r5, #1
 8008ff4:	6011      	str	r1, [r2, #0]
 8008ff6:	e7f5      	b.n	8008fe4 <_strtoul_l.isra.0+0xc4>
 8008ff8:	0800933f 	.word	0x0800933f

08008ffc <_strtoul_r>:
 8008ffc:	f7ff bf90 	b.w	8008f20 <_strtoul_l.isra.0>

08009000 <_malloc_usable_size_r>:
 8009000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009004:	1f18      	subs	r0, r3, #4
 8009006:	2b00      	cmp	r3, #0
 8009008:	bfbc      	itt	lt
 800900a:	580b      	ldrlt	r3, [r1, r0]
 800900c:	18c0      	addlt	r0, r0, r3
 800900e:	4770      	bx	lr

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
